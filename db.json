{
  "success": true,
  "message": "Voici les Texts",
  "results": {
    "nb": 19,
    "journee": [
      {
        "0": "5082013",
        "1": "2013-08-05",
        "2": "sh-3.2# ssh 192.168.0.100\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\nIT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!\r\nSomeone could be eavesdropping on you right now (man-in-the-middle attack)!\r\nIt is also possible that a host key has just been changed.\r\nThe fingerprint for the RSA key sent by the remote host is\r\ne0:9d:81:06:85:8f:e2:ea:b1:7d:03:b5:b9:93:31:53.\r\nPlease contact your system administrator.\r\nAdd correct host key in /var/root/.ssh/known_hosts to get rid of this message.\r\nOffending RSA key in /var/root/.ssh/known_hosts:1\r\nRSA host key for 192.168.0.100 has changed and you have requested strict checking.\r\nHost key verification failed.\r\nsh-3.2# ssh-keygen -R 192.168.0.100\r\n/var/root/.ssh/known_hosts updated.\r\nOriginal contents retained as /var/root/.ssh/known_hosts.old\r\nsh-3.2# ssh 192.168.0.100\r\nThe authenticity of host '192.168.0.100 (192.168.0.100)' can't be established.\r\nRSA key fingerprint is e0:9d:81:06:85:8f:e2:ea:b1:7d:03:b5:b9:93:31:53.\r\nAre you sure you want to continue connecting (yes/no)? yes\r\nWarning: Permanently added '192.168.0.100' (RSA) to the list of known hosts.\r\nroot@192.168.0.100's password: \r\nLinux debian 2.6.32-20-pve #1 SMP Wed May 15 08:23:27 CEST 2013 i686\r\n\r\nThe programs included with the Debian GNU/Linux system are free software;\r\nthe exact distribution terms for each program are described in the\r\nindividual files in /usr/share/doc/*/copyright.\r\n\r\nDebian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent\r\npermitted by applicable law.\r\nroot@debian:~# ",
        "3": "SSH clé été",
        "id": "5082013",
        "date": "2013-08-05",
        "texte": "sh-3.2# ssh 192.168.0.100\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\nIT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!\r\nSomeone could be eavesdropping on you right now (man-in-the-middle attack)!\r\nIt is also possible that a host key has just been changed.\r\nThe fingerprint for the RSA key sent by the remote host is\r\ne0:9d:81:06:85:8f:e2:ea:b1:7d:03:b5:b9:93:31:53.\r\nPlease contact your system administrator.\r\nAdd correct host key in /var/root/.ssh/known_hosts to get rid of this message.\r\nOffending RSA key in /var/root/.ssh/known_hosts:1\r\nRSA host key for 192.168.0.100 has changed and you have requested strict checking.\r\nHost key verification failed.\r\nsh-3.2# ssh-keygen -R 192.168.0.100\r\n/var/root/.ssh/known_hosts updated.\r\nOriginal contents retained as /var/root/.ssh/known_hosts.old\r\nsh-3.2# ssh 192.168.0.100\r\nThe authenticity of host '192.168.0.100 (192.168.0.100)' can't be established.\r\nRSA key fingerprint is e0:9d:81:06:85:8f:e2:ea:b1:7d:03:b5:b9:93:31:53.\r\nAre you sure you want to continue connecting (yes/no)? yes\r\nWarning: Permanently added '192.168.0.100' (RSA) to the list of known hosts.\r\nroot@192.168.0.100's password: \r\nLinux debian 2.6.32-20-pve #1 SMP Wed May 15 08:23:27 CEST 2013 i686\r\n\r\nThe programs included with the Debian GNU/Linux system are free software;\r\nthe exact distribution terms for each program are described in the\r\nindividual files in /usr/share/doc/*/copyright.\r\n\r\nDebian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent\r\npermitted by applicable law.\r\nroot@debian:~# ",
        "motscles": "SSH clé été"
      },
      {
        "0": "4082013",
        "1": "2013-08-04",
        "2": "apt-get update\r\napt-get upgrade\r\napt-get install apache2 apache2-utils php5 php5-dev php5-gd\r\napt-get install proftpd\r\napt-get install mysql-server php5-mysql\r\napt-get install libapache2-mod-php5\r\napt-get install phpmyadmin\r\n",
        "3": "debian serveur",
        "id": "4082013",
        "date": "2013-08-04",
        "texte": "apt-get update\r\napt-get upgrade\r\napt-get install apache2 apache2-utils php5 php5-dev php5-gd\r\napt-get install proftpd\r\napt-get install mysql-server php5-mysql\r\napt-get install libapache2-mod-php5\r\napt-get install phpmyadmin\r\n",
        "motscles": "debian serveur"
      },
      {
        "0": "15082013",
        "1": "2013-08-15",
        "2": "\r\nOPEN MEDIA VAULT\r\nhttp://arobaseinformatique.eklablog.com/installation-d-un-serveur-oriente-nas-avec-openmediavault-partie-2-a69085793",
        "3": "OPEN MEDIA VAULT",
        "id": "15082013",
        "date": "2013-08-15",
        "texte": "\r\nOPEN MEDIA VAULT\r\nhttp://arobaseinformatique.eklablog.com/installation-d-un-serveur-oriente-nas-avec-openmediavault-partie-2-a69085793",
        "motscles": "OPEN MEDIA VAULT"
      },
      {
        "0": "14082013",
        "1": "2013-08-14",
        "2": "ntp.imag.fr\r\n\r\n    Location : IMAG, Grenoble, France\r\n    Synchronisation : NTP V3 secondary (stratum 2), linux\r\n    Service area : France\r\n    Access policy : accès ouvert\r\n    Contact : ntp-adm\r\n    Note : nous apprécierions d'être prévenus si vous utilisez régulièrement ce serveur afin de vous mettre dans notre liste de diffusion NTP.\r\n\r\nntp1.imag.fr\r\n\r\n    Location : IMAG, Grenoble, France\r\n    Synchronisation : NTP V3 secondary (stratum 2), linux\r\n    Service area : France\r\n    Access policy : accès ouvert\r\n    Contact : ntp-adm\r\n    Note : nous apprécierions d'être prévenus si vous utilisez régulièrement ce serveur afin de vous mettre dans notre liste de diffusion NTP.\r\n\r\nntp2.imag.fr\r\n\r\n    Location : IMAG, Grenoble, France\r\n    Synchronisation : NTP V3 secondary (stratum 2), linux\r\n    Service area : France\r\n    Access policy : accès ouvert\r\n    Contact : ntp-adm\r\n    Note : nous apprécierions d'être prévenus si vous utilisez régulièrement ce serveur afin de vous mettre dans notre liste de diffusion NTP.\r\n\r\n",
        "3": "time ntp",
        "id": "14082013",
        "date": "2013-08-14",
        "texte": "ntp.imag.fr\r\n\r\n    Location : IMAG, Grenoble, France\r\n    Synchronisation : NTP V3 secondary (stratum 2), linux\r\n    Service area : France\r\n    Access policy : accès ouvert\r\n    Contact : ntp-adm\r\n    Note : nous apprécierions d'être prévenus si vous utilisez régulièrement ce serveur afin de vous mettre dans notre liste de diffusion NTP.\r\n\r\nntp1.imag.fr\r\n\r\n    Location : IMAG, Grenoble, France\r\n    Synchronisation : NTP V3 secondary (stratum 2), linux\r\n    Service area : France\r\n    Access policy : accès ouvert\r\n    Contact : ntp-adm\r\n    Note : nous apprécierions d'être prévenus si vous utilisez régulièrement ce serveur afin de vous mettre dans notre liste de diffusion NTP.\r\n\r\nntp2.imag.fr\r\n\r\n    Location : IMAG, Grenoble, France\r\n    Synchronisation : NTP V3 secondary (stratum 2), linux\r\n    Service area : France\r\n    Access policy : accès ouvert\r\n    Contact : ntp-adm\r\n    Note : nous apprécierions d'être prévenus si vous utilisez régulièrement ce serveur afin de vous mettre dans notre liste de diffusion NTP.\r\n\r\n",
        "motscles": "time ntp"
      },
      {
        "0": "2102016",
        "1": "2016-10-02",
        "2": "Remplacement des caractÃ¨res spÃ©ciaux\r\nResponsive designe\r\nCorrection suppression des fiche et contact\r\nSuppression du lower case dans note du contact",
        "3": "MAJ du site",
        "id": "2102016",
        "date": "2016-10-02",
        "texte": "Remplacement des caractÃ¨res spÃ©ciaux\r\nResponsive designe\r\nCorrection suppression des fiche et contact\r\nSuppression du lower case dans note du contact",
        "motscles": "MAJ du site"
      },
      {
        "0": "27032015",
        "1": "2015-03-27",
        "2": "netplwiz:modifier ouverture compte",
        "3": "ouverture compte",
        "id": "27032015",
        "date": "2015-03-27",
        "texte": "netplwiz:modifier ouverture compte",
        "motscles": "ouverture compte"
      },
      {
        "0": "4102016",
        "1": "2016-10-04",
        "2": "Installation des virtualhosts\r\n\r\nOn va maintenant crÃ©er nos hÃ´tes virtuels. Par dÃ©faut, je les appellerai test1.com et test2.com. A vous de mettre les noms que vous dÃ©sirez. Mais avant de s'attaquer aux utilisateurs, on commence par modifier le squelette de la crÃ©ation des nouveaux users. L'avantage ? Ne pas avoir besoin Ã  chaque fois de devoir crÃ©er le rÃ©pertoire public_html et logs quand on crÃ©e un nouvel utilisateur, mais aussi d'avoir directement une page d'accueil.\r\n\r\n# mkdir /etc/skel/public_html\r\n\r\n# mkdir /etc/skel/logs\r\n\r\n# echo \" &lt;h1&gt;Nouvel espace web crÃ©e&lt;/h1&gt; \" &gt; /etc/skel/public_html/index.html\r\n\r\nUne fois le squelette crÃ©Ã©, on peut crÃ©er un nouvel utilisateur :\r\n\r\n# useradd -g www-data -m test1\r\n\r\nOn crÃ©e un nouveau fichier /etc/apache2/sites-available/test1.com\r\n\r\n# nano /etc/apache2/sites-available/test1.com\r\n\r\nEt on y enregistre :\r\n\r\n&lt;VirtualHost *:80&gt;\r\n        ServerAdmin postmaster@test1.com\r\n        ServerName www.test1.com\r\n        ServerAlias test1.com\r\n        DocumentRoot /home/test1/public_html/\r\n        &lt;Directory /home/test1/public_html/&gt;\r\n                Options -Indexes FollowSymLinks MultiViews\r\n                AllowOverride All\r\n        &lt;/Directory&gt;\r\n        ErrorLog /home/test1/logs/error.log\r\n        LogLevel warn\r\n        CustomLog /home/test1/logs/access.log combined\r\n        ServerSignature Off\r\n&lt;/VirtualHost&gt;\r\n\r\nOn valide et on ferme le fichier. On rend le domaine crÃ©Ã© disponible.\r\n\r\n# ln -s /etc/apache2/sites-available/test1.com /etc/apache2/sites-enabled/test1.com\r\n\r\nOn vÃ©rifie que la syntax est bonne :\r\n\r\n# apache2ctl -t\r\n\r\nSi en retour on obtient un Â« Syntax OK Â», on redÃ©mare apache2 :\r\n\r\n# /etc/init.d/apache2 restart\r\n\r\nNormalement vous devriez pouvoir acceder Ã  http://IP_DE_VOTRE_SERVEUR/~test1/ et y voir Nouvel espace web crÃ©e\r\n",
        "3": "virtualhosts",
        "id": "4102016",
        "date": "2016-10-04",
        "texte": "Installation des virtualhosts\r\n\r\nOn va maintenant crÃ©er nos hÃ´tes virtuels. Par dÃ©faut, je les appellerai test1.com et test2.com. A vous de mettre les noms que vous dÃ©sirez. Mais avant de s'attaquer aux utilisateurs, on commence par modifier le squelette de la crÃ©ation des nouveaux users. L'avantage ? Ne pas avoir besoin Ã  chaque fois de devoir crÃ©er le rÃ©pertoire public_html et logs quand on crÃ©e un nouvel utilisateur, mais aussi d'avoir directement une page d'accueil.\r\n\r\n# mkdir /etc/skel/public_html\r\n\r\n# mkdir /etc/skel/logs\r\n\r\n# echo \" &lt;h1&gt;Nouvel espace web crÃ©e&lt;/h1&gt; \" &gt; /etc/skel/public_html/index.html\r\n\r\nUne fois le squelette crÃ©Ã©, on peut crÃ©er un nouvel utilisateur :\r\n\r\n# useradd -g www-data -m test1\r\n\r\nOn crÃ©e un nouveau fichier /etc/apache2/sites-available/test1.com\r\n\r\n# nano /etc/apache2/sites-available/test1.com\r\n\r\nEt on y enregistre :\r\n\r\n&lt;VirtualHost *:80&gt;\r\n        ServerAdmin postmaster@test1.com\r\n        ServerName www.test1.com\r\n        ServerAlias test1.com\r\n        DocumentRoot /home/test1/public_html/\r\n        &lt;Directory /home/test1/public_html/&gt;\r\n                Options -Indexes FollowSymLinks MultiViews\r\n                AllowOverride All\r\n        &lt;/Directory&gt;\r\n        ErrorLog /home/test1/logs/error.log\r\n        LogLevel warn\r\n        CustomLog /home/test1/logs/access.log combined\r\n        ServerSignature Off\r\n&lt;/VirtualHost&gt;\r\n\r\nOn valide et on ferme le fichier. On rend le domaine crÃ©Ã© disponible.\r\n\r\n# ln -s /etc/apache2/sites-available/test1.com /etc/apache2/sites-enabled/test1.com\r\n\r\nOn vÃ©rifie que la syntax est bonne :\r\n\r\n# apache2ctl -t\r\n\r\nSi en retour on obtient un Â« Syntax OK Â», on redÃ©mare apache2 :\r\n\r\n# /etc/init.d/apache2 restart\r\n\r\nNormalement vous devriez pouvoir acceder Ã  http://IP_DE_VOTRE_SERVEUR/~test1/ et y voir Nouvel espace web crÃ©e\r\n",
        "motscles": "virtualhosts"
      },
      {
        "0": "16102016",
        "1": "2016-10-16",
        "2": "IL faut Ã©diter le fichier de grub avec les droits d'admin:\r\n\r\ngksudo gedit /etc/default/grub\r\n\r\nEnsuite tu modifie cette ligne:\r\n\r\n#GRUB_HIDDEN_TIMEOUT=0\r\n\r\nSi tu veut ne plus voir du tout Grub au lancement du PC tu enlÃ¨ve simplement le # de cette ligne et le tour est jouÃ©, si tu veut que Grub ne s'affiche pas mais que tu est 5 seconde de dÃ©lai pour l'afficher avec la touche echap alors tu peut metre 5 a la place de 0.\r\n\r\nSi tu souhaite simplement changer le temps d'affichage de Grub alors il faut modifier cette ligne:\r\n\r\nGRUB_TIMEOUT=10\r\n\r\nPour valider tes changement tu fait un\r\n\r\nupdate-grub",
        "3": "Grub delai",
        "id": "16102016",
        "date": "2016-10-16",
        "texte": "IL faut Ã©diter le fichier de grub avec les droits d'admin:\r\n\r\ngksudo gedit /etc/default/grub\r\n\r\nEnsuite tu modifie cette ligne:\r\n\r\n#GRUB_HIDDEN_TIMEOUT=0\r\n\r\nSi tu veut ne plus voir du tout Grub au lancement du PC tu enlÃ¨ve simplement le # de cette ligne et le tour est jouÃ©, si tu veut que Grub ne s'affiche pas mais que tu est 5 seconde de dÃ©lai pour l'afficher avec la touche echap alors tu peut metre 5 a la place de 0.\r\n\r\nSi tu souhaite simplement changer le temps d'affichage de Grub alors il faut modifier cette ligne:\r\n\r\nGRUB_TIMEOUT=10\r\n\r\nPour valider tes changement tu fait un\r\n\r\nupdate-grub",
        "motscles": "Grub delai"
      },
      {
        "0": "16102017",
        "1": "2017-10-16",
        "2": "\r\n#linux ubuntu PATH\r\necho 'export PATH=$PATH:/home/user/mes_prog' &gt;&gt; /home/user/.bashrc",
        "3": "PATH Ubuntu",
        "id": "16102017",
        "date": "2017-10-16",
        "texte": "\r\n#linux ubuntu PATH\r\necho 'export PATH=$PATH:/home/user/mes_prog' &gt;&gt; /home/user/.bashrc",
        "motscles": "PATH Ubuntu"
      },
      {
        "0": "14062018",
        "1": "2018-06-14",
        "2": "// DÃ©claration des variables\r\nNomCheminFichier est une chaÃ®ne\r\nIDFichier est un entier\r\nLigneLue est une chaÃ®ne\r\n\r\n// SÃ©lection du nom et du chemin du fichier\r\nNomCheminFichier =\"contact.txt\"\r\n// Ouverture du fichier\r\nIDFichier = fOuvre(NomCheminFichier)\r\n// Affichage du message d'erreur si l'ouverture n'a pas Ã©tÃ© effectuÃ©e\r\nSI IDFichier = -1 ALORS\r\n\tErreur(ErreurInfo(errMessage))\r\nSINON\r\n\tBOUCLE\r\n\t\t// Lecture de la premiÃ¨re ligne du fichier\r\n\t\tLigneLue = fLitLigne(IDFichier)\r\n\t\tSI ErreurDÃ©tectÃ©e ALORS\r\n\t\t\tErreur(ErreurInfo())\r\n\t\t\tSORTIR\r\n\t\tFIN\r\n\t\t// Fin de fichier ?\r\n\t\tSI LigneLue = EOT ALORS SORTIR\r\n\t\t// Traitement de la ligne lue\r\n\t\t// Ici ajout Ã  la fin d'un champ de saisie\r\n\t\tSAI_texte += [RC] + LigneLue\r\n\tFIN\r\n\t// Fermeture du fichier\r\n\tfFerme(IDFichier)\r\n\tToastAffiche(\"Lecture du fichier terminÃ©e\")\r\nFIN\r\n//LIRE DANS UN FICHIER TXT\r\n\r\nidfile est un entier = fOuvre(\"contact.txt\")\r\nligne est une chaÃ®ne = fLitLigne(idfile)\r\n\r\n\r\nTANTQUE ligne&lt;&gt;EOT ET ligne&lt;&gt;\"\"\r\n\tTableAjouteLigne(TABLE_import,ExtraitChaÃ®ne(ligne,1),ExtraitChaÃ®ne(ligne,2))\t\r\n\t\r\n\tligne=fLitLigne(idfile)\t\r\nFIN\r\n\r\n\r\n//FIN",
        "3": "Windev Importation",
        "id": "14062018",
        "date": "2018-06-14",
        "texte": "// DÃ©claration des variables\r\nNomCheminFichier est une chaÃ®ne\r\nIDFichier est un entier\r\nLigneLue est une chaÃ®ne\r\n\r\n// SÃ©lection du nom et du chemin du fichier\r\nNomCheminFichier =\"contact.txt\"\r\n// Ouverture du fichier\r\nIDFichier = fOuvre(NomCheminFichier)\r\n// Affichage du message d'erreur si l'ouverture n'a pas Ã©tÃ© effectuÃ©e\r\nSI IDFichier = -1 ALORS\r\n\tErreur(ErreurInfo(errMessage))\r\nSINON\r\n\tBOUCLE\r\n\t\t// Lecture de la premiÃ¨re ligne du fichier\r\n\t\tLigneLue = fLitLigne(IDFichier)\r\n\t\tSI ErreurDÃ©tectÃ©e ALORS\r\n\t\t\tErreur(ErreurInfo())\r\n\t\t\tSORTIR\r\n\t\tFIN\r\n\t\t// Fin de fichier ?\r\n\t\tSI LigneLue = EOT ALORS SORTIR\r\n\t\t// Traitement de la ligne lue\r\n\t\t// Ici ajout Ã  la fin d'un champ de saisie\r\n\t\tSAI_texte += [RC] + LigneLue\r\n\tFIN\r\n\t// Fermeture du fichier\r\n\tfFerme(IDFichier)\r\n\tToastAffiche(\"Lecture du fichier terminÃ©e\")\r\nFIN\r\n//LIRE DANS UN FICHIER TXT\r\n\r\nidfile est un entier = fOuvre(\"contact.txt\")\r\nligne est une chaÃ®ne = fLitLigne(idfile)\r\n\r\n\r\nTANTQUE ligne&lt;&gt;EOT ET ligne&lt;&gt;\"\"\r\n\tTableAjouteLigne(TABLE_import,ExtraitChaÃ®ne(ligne,1),ExtraitChaÃ®ne(ligne,2))\t\r\n\t\r\n\tligne=fLitLigne(idfile)\t\r\nFIN\r\n\r\n\r\n//FIN",
        "motscles": "Windev Importation"
      },
      {
        "0": "15062018",
        "1": "2018-06-15",
        "2": "PROCEDURE lecture_config()\r\n\r\n\r\n// on lit le fichier \r\nNumFic est un entier\t\t\t\t// identifiant de manipulation du fichier de test\r\nLigne est une chaÃ®ne\t\t\t\t// Ligne en cours de lecture\r\nicompt est un entier\r\n\r\nchaine1,chaine1b,chaine2,Chaine3,chaine4,chaine5,chaine6,chaine7,Chaine10,chaine11,chaine14,chaine15,chaine16 sont des chaÃ®nes\r\nentier01, entier02,entier03 sont des entiers\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// ouverture du fichier de config \r\n\r\nNomFic0 est une chaÃ®ne = \"configarticles.txt\"\t\t// Nom du fichier dont on teste l'existence\r\n\r\n// si le fichier n'existe pas l'application ne demarre pas\r\n\r\n// On teste l'existence du fichier \r\nSI fFichierExiste(NomFic0) = Faux ALORS\r\n\t// Le fichier n'existe pas\r\n\tDÃ©laiAvantFermeture(1000)\r\n\tInfo(ChaÃ®neConstruit(\"Le fichier %1 n'existe pas\", NomFic0))\r\n\t\r\nSINON\r\n\t\r\n\t// Le fichier existe dans le rÃ©pertoire spÃ©cifiÃ©\r\n\t// Info(ChaÃ®neConstruit(\"Le fichier %1 existe\", NomFic0))\r\n\t\r\n\t// Ouverture du fichier de test en lecture\r\n\tNumFic = fOuvre(NomFic0,foLecture)\r\n\t\r\n\tSI NumFic = -1 ALORS\r\n\t\t// Une erreur a Ã©tÃ© dÃ©tectÃ©e pendant l'ouverture du fichier\r\n\t\tErreur(ChaÃ®neConstruit(\"Erreur d'ouverture du fichier %1\",NomFic0),ErreurInfo())\r\n\tSINON\r\n\t\t// on reintialise le nom du fichier employe\r\n\t\tgsfichieremployes=\"\" \r\n\t\tgsreperfichieremploye=\"\"\r\n\t\tgsfichiermetiers=\"\"\r\n\t\ticompt = 0 \r\n\t\t\r\n\t\t// Lecture ligne par ligne du fichier\r\n\t\tBOUCLE\r\n\t\t\t// Lecture de la ligne suivante du fichier\r\n\t\t\ticompt++ \r\n\t\t\tLigne=fLitLigne(NumFic)\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t// Est-ce que la fin du fichier a Ã©tÃ© atteinte ?\t\r\n\t\t\tSI Ligne = EOT ALORS SORTIR\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t// on lit la 1ere ligne pour avoir le nom du fichier des employes  \r\n\t\t\tSI icompt = 1 ALORS\r\n\t\t\t\t// Decodage de ligne pour obtenir le chemin base \r\n\t\t\t\tchaine1 = ExtraitChaÃ®ne(Ligne,1,TAB)\r\n\t\t\t\t\r\n\t\t\t\t// ecriture des donnÃ©es en tant qu'enregistrement\r\n\t\t\t\tgsfichieremployes = chaine1\r\n\t\t\t\t\r\n\t\t\tFIN \t\r\n\t\t\t\r\n\t\t\t// on lit la 1ere ligne pour avoir le nom du fichier des catÃ©gores de matÃ©riels  \r\n\t\t\tSI icompt = 2 ALORS\r\n\t\t\t\t// Decodage de ligne pour obtenir le chemin base \r\n\t\t\t\tchaine1b = ExtraitChaÃ®ne(Ligne,1,TAB)\r\n\t\t\t\t\r\n\t\t\t\t// ecriture des donnÃ©es en tant qu'enregistrement\r\n\t\t\t\tgsfichiercategorie = chaine1b\r\n\t\t\t\t\r\n\t\t\tFIN \r\n\t\t\t\r\n\t\t\t// on lit la2eme ligne pour avoir le nom du repertoire du fichier des employes  \r\n\t\t\tSI icompt = 3 ALORS\r\n\t\t\t\t// Decodage de ligne pour obtenir le chemin base \r\n\t\t\t\tchaine2 = ExtraitChaÃ®ne(Ligne,1,TAB)\r\n\t\t\t\t\r\n\t\t\t\t// ecriture des donnÃ©es en tant qu'enregistrement\r\n\t\t\t\tgsreperfichieremploye = chaine2\r\n\t\t\t\t\r\n\t\t\tFIN \t\r\n\t\t\t\r\n\t\t\t// on lit la 3eme ligne pour avoir le nom du fichier des metiers  \r\n\t\t\tSI icompt = 4 ALORS\r\n\t\t\t\t// Decodage de ligne pour obtenir le chemin base \r\n\t\t\t\tChaine3 = ExtraitChaÃ®ne(Ligne,1,TAB)\r\n\t\t\t\t\r\n\t\t\t\t// ecriture des donnÃ©es en tant qu'enregistrement\r\n\t\t\t\tgsfichiermetiers = Chaine3\r\n\t\t\t\t\r\n\t\t\tFIN \r\n\t\t\t\r\n\t\t\t// on lit la 4eme ligne pour avoir le nom des depot lu dans le fichier sitegeo  \r\n\t\t\tSI icompt = 5 ALORS\r\n\t\t\t\t// Decodage de ligne pour obtenir le chemin base \r\n\t\t\t\tchaine4 = ExtraitChaÃ®ne(Ligne,1,TAB)\r\n\t\t\t\t\r\n\t\t\t\t// ecriture des donnÃ©es en tant qu'enregistrement\r\n\t\t\t\tgsfichierdepot = chaine4\r\n\t\t\t\t\r\n\t\t\tFIN \t\t\t\r\n\t\t\t\r\n\t\t\t// on lit la 5eme ligne pour avoir le nom du repertoire de mise a jour de version  \r\n\t\t\tSI icompt = 6 ALORS\r\n\t\t\t\t// Decodage de ligne pour obtenir le chemin base \r\n\t\t\t\tchaine5 = ExtraitChaÃ®ne(Ligne,1,TAB)\r\n\t\t\t\t\r\n\t\t\t\t// ecriture des donnÃ©es en tant qu'enregistrement\r\n\t\t\t\tgsrepermaj = chaine5\r\n\t\t\t\t\r\n\t\t\tFIN \r\n\t\t\t\r\n\t\t\t\r\n\t\t\t// on lit la 6eme  ligne pour avoir le nom du repertoire du serveur  \r\n\t\t\tSI icompt = 7 ALORS\r\n\t\t\t\t// Decodage de ligne pour obtenir le chemin base \r\n\t\t\t\tchaine6 = ExtraitChaÃ®ne(Ligne,1,TAB)\r\n\t\t\t\t\r\n\t\t\t\t// ecriture des donnÃ©es en tant qu'enregistrement\r\n\t\t\t\tgsserveur = chaine6\r\n\t\t\t\t\r\n\t\t\tFIN\t\t\t\r\n\t\t\t\r\n\t\t\t// on lit la 7eme  ligne pour avoir le nom de base du repertoire pour maj des donnÃ©es   \r\n\t\t\tSI icompt = 8 ALORS\r\n\t\t\t\t// Decodage de ligne pour obtenir le chemin base \r\n\t\t\t\tchaine7 = ExtraitChaÃ®ne(Ligne,1,TAB)\r\n\t\t\t\t\r\n\t\t\t\t// ecriture des donnÃ©es en tant qu'enregistrement\r\n\t\t\t\tgsreperbase = chaine7\r\n\t\t\t\t\r\n\t\t\tFIN\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t// on lit la 8eme  ligne pour avoir le no initial des bornes pour la maj des donnÃ©es   \r\n\t\t\tSI icompt = 9 ALORS\r\n\t\t\t\t// Decodage de ligne pour obtenir le chemin base \r\n\t\t\t\tentier01 = ExtraitChaÃ®ne(Ligne,1,TAB)\r\n\t\t\t\t\r\n\t\t\t\t// ecriture des donnÃ©es en tant qu'enregistrement\r\n\t\t\t\tgsnoinitial = entier01\r\n\t\t\t\t\r\n\t\t\tFIN\t\t\t\t\r\n\t\t\t\r\n\t\t\t// on lit la 9eme  ligne pour avoir le no final des bornes pour la maj des donnÃ©es   \r\n\t\t\tSI icompt = 10 ALORS\r\n\t\t\t\t// Decodage de ligne pour obtenir le chemin base \r\n\t\t\t\tentier02 = ExtraitChaÃ®ne(Ligne,1,TAB)\r\n\t\t\t\t\r\n\t\t\t\t// ecriture des donnÃ©es en tant qu'enregistrement\r\n\t\t\t\tgsnofinal = entier02\r\n\t\t\t\t\r\n\t\t\tFIN\t\r\n\t\t\t\r\n\t\t\t// on lit la 10eme ligne pour avoir le nom du fichier des multi societes  \r\n\t\t\tSI icompt = 11 ALORS\r\n\t\t\t\t// Decodage de ligne pour obtenir le chemin base \r\n\t\t\t\tChaine10 = ExtraitChaÃ®ne(Ligne,1,TAB)\r\n\t\t\t\t\r\n\t\t\t\t// ecriture des donnÃ©es en tant qu'enregistrement\r\n\t\t\t\tgsfichiermultisoc = Chaine10\r\n\t\t\t\t\r\n\t\t\tFIN \r\n\t\t\t\r\n\t\t\t\r\n\t\t\t// on lit la 11eme ligne pour avoir le nom du fichier pour la borne 3 avec 3 positions de PR  \r\n\t\t\tSI icompt = 12 ALORS\r\n\t\t\t\t// Decodage de ligne pour obtenir le chemin base \r\n\t\t\t\tchaine11 = ExtraitChaÃ®ne(Ligne,1,TAB)\r\n\t\t\t\t\r\n\t\t\t\t// ecriture des donnÃ©es en tant qu'enregistrement\r\n\t\t\t\tgsfichierborne3 = chaine11\r\n\t\t\t\t\r\n\t\t\tFIN \r\n\t\t\t\r\n\t\t\t// on lit la 13eme ligne pour avoir le nombre maxi de jour possible pour exporter vers borne 3 : apres on n'exporte plus les employes  \r\n\t\t\tSI icompt = 13 ALORS\r\n\t\t\t\t// Decodage de ligne pour obtenir le chemin base \r\n\t\t\t\tentier03 = ExtraitChaÃ®ne(Ligne,1,TAB)\r\n\t\t\t\t\r\n\t\t\t\t// ecriture des donnÃ©es en tant qu'enregistrement\r\n\t\t\t\tgnnbjoursmaxi3 = entier03\r\n\t\t\t\t\r\n\t\t\tFIN \r\n\t\t\t\r\n\t\t\t\r\n\t\t\t// on lit la 14ere ligne pour avoir le nom du fichier des catÃ©gories de matÃ©riels  pour mngt\r\n\t\t\tSI icompt = 14 ALORS\r\n\t\t\t\t// Decodage de ligne pour obtenir le chemin base \r\n\t\t\t\tchaine14 = ExtraitChaÃ®ne(Ligne,1,TAB)\r\n\t\t\t\t\r\n\t\t\t\t// ecriture des donnÃ©es en tant qu'enregistrement\r\n\t\t\t\tgsfichiercategorie3 = chaine14\r\n\t\t\t\t\r\n\t\t\tFIN \t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t// on lit la 15eme ligne pour avoir l'expression reguliÃ¨re de l'id chronossat   \r\n\t\t\tSI icompt = 15 ALORS\r\n\t\t\t\t// Decodage de ligne pour obtenir le chemin base \r\n\t\t\t\tchaine15 = ExtraitChaÃ®ne(Ligne,1,TAB)\r\n\t\t\t\t\r\n\t\t\t\t// ecriture des donnÃ©es en tant qu'enregistrement\r\n\t\t\t\tgsexpressionregid = chaine15\r\n\t\t\t\tgsexpressionregfullid = \"regexp:\" + gsexpressionregid\t\t\t\t\r\n\t\t\t\t\r\n\t\t\tFIN \r\n\t\t\t\r\n\t\t\t\r\n\t\t\t// on lit la 16eme ligne pour avoir l'expression reguliÃ¨re du code sdc chronossat  \r\n\t\t\tSI icompt = 16 ALORS\r\n\t\t\t\t// Decodage de ligne pour obtenir le chemin base \r\n\t\t\t\tchaine16 = ExtraitChaÃ®ne(Ligne,1,TAB)\r\n\t\t\t\t\r\n\t\t\t\t// ecriture des donnÃ©es en tant qu'enregistrement\r\n\t\t\t\tgsexpressionregsdc = chaine16\r\n\t\t\t\tgsexpressionregfullsdc = \"regexp:\" + gsexpressionregsdc\t\r\n\t\t\t\t\r\n\t\t\tFIN \r\n\t\t\t\r\n\t\t\t//MAJ ID2C 01/04/2015\r\n\t\t\tSI icompt = 17 ALORS\r\n\t\t\t\tgbSynchronisationID2C = ExtraitChaÃ®ne(Ligne,1,TAB)\r\n\t\t\tFIN\r\n\t\t\t//Valeurs par dÃ©faut ID2C\r\n\t\t\tSI icompt = 18 ALORS\r\n\t\t\t\tgsCategorie = ExtraitChaÃ®ne(Ligne,1,TAB)\r\n\t\t\tFIN\r\n\t\t\tSI icompt = 19 ALORS\r\n\t\t\t\tgbActif = ExtraitChaÃ®ne(Ligne,1,TAB)\r\n\t\t\tFIN\r\n\t\t\tSI icompt = 20 ALORS\r\n\t\t\t\tgsMetier = ExtraitChaÃ®ne(Ligne,1,TAB)\r\n\t\t\tFIN\r\n\t\t\tSI icompt = 21 ALORS\r\n\t\t\t\tgsUnite = ExtraitChaÃ®ne(Ligne,1,TAB)\r\n\t\t\tFIN\r\n\t\t\tSI icompt = 22 ALORS\r\n\t\t\t\tgnMini = ExtraitChaÃ®ne(Ligne,1,TAB)\r\n\t\t\tFIN\r\n\t\t\tSI icompt = 23 ALORS\r\n\t\t\t\tgnMaxi = ExtraitChaÃ®ne(Ligne,1,TAB)\r\n\t\t\tFIN\r\n\t\t\tSI icompt = 24 ALORS\r\n\t\t\t\tgxpas = ExtraitChaÃ®ne(Ligne,1,TAB)\r\n\t\t\tFIN\r\n\t\t\tSI icompt = 25 ALORS\r\n\t\t\t\tgnDefaut = ExtraitChaÃ®ne(Ligne,1,TAB)\r\n\t\t\tFIN\r\n\t\t\tSI icompt = 26 ALORS \r\n\t\t\t\tgsDepot = ExtraitChaÃ®ne(Ligne,1,TAB)\r\n\t\t\tFIN\r\n\t\t\tSI icompt = 27 ALORS \r\n\t\t\t\tgsSociete = ExtraitChaÃ®ne(Ligne,1,TAB)\r\n\t\t\tFIN\r\n\t\t\tSI icompt = 28 ALORS \r\n\t\t\t\tgsAdresseFichierID2C = ExtraitChaÃ®ne(Ligne,1,TAB)\r\n\t\t\tFIN\r\n\t\t\tSI icompt = 29 ALORS\r\n\t\t\t\tgnStandByExpire = ExtraitChaÃ®ne(Ligne,1,TAB)\r\n\t\t\tFIN\r\n\t\t\tSI icompt = 30 ALORS\r\n\t\t\t\tgnHistoExpire = ExtraitChaÃ®ne(Ligne,1,TAB)\r\n\t\t\tFIN\r\n\t\t\tSI icompt = 31 ALORS\r\n\t\t\t\tgbDatebassehautefermeeobligatoire = ExtraitChaÃ®ne(Ligne,1,TAB)\r\n\t\t\tFIN\t\t\t\r\n\t\t\tSI icompt = 32 ALORS\r\n\t\t\tgnQuantitÃ©Rouge = ExtraitChaÃ®ne(Ligne,1,TAB)\r\n\t\t\tgnQuantitÃ©Vert = ExtraitChaÃ®ne(Ligne,2,TAB)\r\n\t\t\tgnQuantitÃ©Bleu = ExtraitChaÃ®ne(Ligne,3,TAB)\r\n\t\t\tFIN\t\r\n\t\t\t\r\n\t\tFIN  // fin de BOUCLE \r\n\t\t// Info(\"Lecture du fichier CONFIGMATERIELS.TXT OK\")\r\n\t\t\r\n\t\t\r\n\t\t// Fermeture du fichier\r\n\t\tfFerme(NumFic)\t\t\r\n\t\t\r\n\tFIN // fin de test Ã  l'ouverture\r\nFIN // fin du test d'exsitence",
        "3": "WINDEV Lecture Config",
        "id": "15062018",
        "date": "2018-06-15",
        "texte": "PROCEDURE lecture_config()\r\n\r\n\r\n// on lit le fichier \r\nNumFic est un entier\t\t\t\t// identifiant de manipulation du fichier de test\r\nLigne est une chaÃ®ne\t\t\t\t// Ligne en cours de lecture\r\nicompt est un entier\r\n\r\nchaine1,chaine1b,chaine2,Chaine3,chaine4,chaine5,chaine6,chaine7,Chaine10,chaine11,chaine14,chaine15,chaine16 sont des chaÃ®nes\r\nentier01, entier02,entier03 sont des entiers\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// ouverture du fichier de config \r\n\r\nNomFic0 est une chaÃ®ne = \"configarticles.txt\"\t\t// Nom du fichier dont on teste l'existence\r\n\r\n// si le fichier n'existe pas l'application ne demarre pas\r\n\r\n// On teste l'existence du fichier \r\nSI fFichierExiste(NomFic0) = Faux ALORS\r\n\t// Le fichier n'existe pas\r\n\tDÃ©laiAvantFermeture(1000)\r\n\tInfo(ChaÃ®neConstruit(\"Le fichier %1 n'existe pas\", NomFic0))\r\n\t\r\nSINON\r\n\t\r\n\t// Le fichier existe dans le rÃ©pertoire spÃ©cifiÃ©\r\n\t// Info(ChaÃ®neConstruit(\"Le fichier %1 existe\", NomFic0))\r\n\t\r\n\t// Ouverture du fichier de test en lecture\r\n\tNumFic = fOuvre(NomFic0,foLecture)\r\n\t\r\n\tSI NumFic = -1 ALORS\r\n\t\t// Une erreur a Ã©tÃ© dÃ©tectÃ©e pendant l'ouverture du fichier\r\n\t\tErreur(ChaÃ®neConstruit(\"Erreur d'ouverture du fichier %1\",NomFic0),ErreurInfo())\r\n\tSINON\r\n\t\t// on reintialise le nom du fichier employe\r\n\t\tgsfichieremployes=\"\" \r\n\t\tgsreperfichieremploye=\"\"\r\n\t\tgsfichiermetiers=\"\"\r\n\t\ticompt = 0 \r\n\t\t\r\n\t\t// Lecture ligne par ligne du fichier\r\n\t\tBOUCLE\r\n\t\t\t// Lecture de la ligne suivante du fichier\r\n\t\t\ticompt++ \r\n\t\t\tLigne=fLitLigne(NumFic)\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t// Est-ce que la fin du fichier a Ã©tÃ© atteinte ?\t\r\n\t\t\tSI Ligne = EOT ALORS SORTIR\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t// on lit la 1ere ligne pour avoir le nom du fichier des employes  \r\n\t\t\tSI icompt = 1 ALORS\r\n\t\t\t\t// Decodage de ligne pour obtenir le chemin base \r\n\t\t\t\tchaine1 = ExtraitChaÃ®ne(Ligne,1,TAB)\r\n\t\t\t\t\r\n\t\t\t\t// ecriture des donnÃ©es en tant qu'enregistrement\r\n\t\t\t\tgsfichieremployes = chaine1\r\n\t\t\t\t\r\n\t\t\tFIN \t\r\n\t\t\t\r\n\t\t\t// on lit la 1ere ligne pour avoir le nom du fichier des catÃ©gores de matÃ©riels  \r\n\t\t\tSI icompt = 2 ALORS\r\n\t\t\t\t// Decodage de ligne pour obtenir le chemin base \r\n\t\t\t\tchaine1b = ExtraitChaÃ®ne(Ligne,1,TAB)\r\n\t\t\t\t\r\n\t\t\t\t// ecriture des donnÃ©es en tant qu'enregistrement\r\n\t\t\t\tgsfichiercategorie = chaine1b\r\n\t\t\t\t\r\n\t\t\tFIN \r\n\t\t\t\r\n\t\t\t// on lit la2eme ligne pour avoir le nom du repertoire du fichier des employes  \r\n\t\t\tSI icompt = 3 ALORS\r\n\t\t\t\t// Decodage de ligne pour obtenir le chemin base \r\n\t\t\t\tchaine2 = ExtraitChaÃ®ne(Ligne,1,TAB)\r\n\t\t\t\t\r\n\t\t\t\t// ecriture des donnÃ©es en tant qu'enregistrement\r\n\t\t\t\tgsreperfichieremploye = chaine2\r\n\t\t\t\t\r\n\t\t\tFIN \t\r\n\t\t\t\r\n\t\t\t// on lit la 3eme ligne pour avoir le nom du fichier des metiers  \r\n\t\t\tSI icompt = 4 ALORS\r\n\t\t\t\t// Decodage de ligne pour obtenir le chemin base \r\n\t\t\t\tChaine3 = ExtraitChaÃ®ne(Ligne,1,TAB)\r\n\t\t\t\t\r\n\t\t\t\t// ecriture des donnÃ©es en tant qu'enregistrement\r\n\t\t\t\tgsfichiermetiers = Chaine3\r\n\t\t\t\t\r\n\t\t\tFIN \r\n\t\t\t\r\n\t\t\t// on lit la 4eme ligne pour avoir le nom des depot lu dans le fichier sitegeo  \r\n\t\t\tSI icompt = 5 ALORS\r\n\t\t\t\t// Decodage de ligne pour obtenir le chemin base \r\n\t\t\t\tchaine4 = ExtraitChaÃ®ne(Ligne,1,TAB)\r\n\t\t\t\t\r\n\t\t\t\t// ecriture des donnÃ©es en tant qu'enregistrement\r\n\t\t\t\tgsfichierdepot = chaine4\r\n\t\t\t\t\r\n\t\t\tFIN \t\t\t\r\n\t\t\t\r\n\t\t\t// on lit la 5eme ligne pour avoir le nom du repertoire de mise a jour de version  \r\n\t\t\tSI icompt = 6 ALORS\r\n\t\t\t\t// Decodage de ligne pour obtenir le chemin base \r\n\t\t\t\tchaine5 = ExtraitChaÃ®ne(Ligne,1,TAB)\r\n\t\t\t\t\r\n\t\t\t\t// ecriture des donnÃ©es en tant qu'enregistrement\r\n\t\t\t\tgsrepermaj = chaine5\r\n\t\t\t\t\r\n\t\t\tFIN \r\n\t\t\t\r\n\t\t\t\r\n\t\t\t// on lit la 6eme  ligne pour avoir le nom du repertoire du serveur  \r\n\t\t\tSI icompt = 7 ALORS\r\n\t\t\t\t// Decodage de ligne pour obtenir le chemin base \r\n\t\t\t\tchaine6 = ExtraitChaÃ®ne(Ligne,1,TAB)\r\n\t\t\t\t\r\n\t\t\t\t// ecriture des donnÃ©es en tant qu'enregistrement\r\n\t\t\t\tgsserveur = chaine6\r\n\t\t\t\t\r\n\t\t\tFIN\t\t\t\r\n\t\t\t\r\n\t\t\t// on lit la 7eme  ligne pour avoir le nom de base du repertoire pour maj des donnÃ©es   \r\n\t\t\tSI icompt = 8 ALORS\r\n\t\t\t\t// Decodage de ligne pour obtenir le chemin base \r\n\t\t\t\tchaine7 = ExtraitChaÃ®ne(Ligne,1,TAB)\r\n\t\t\t\t\r\n\t\t\t\t// ecriture des donnÃ©es en tant qu'enregistrement\r\n\t\t\t\tgsreperbase = chaine7\r\n\t\t\t\t\r\n\t\t\tFIN\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t// on lit la 8eme  ligne pour avoir le no initial des bornes pour la maj des donnÃ©es   \r\n\t\t\tSI icompt = 9 ALORS\r\n\t\t\t\t// Decodage de ligne pour obtenir le chemin base \r\n\t\t\t\tentier01 = ExtraitChaÃ®ne(Ligne,1,TAB)\r\n\t\t\t\t\r\n\t\t\t\t// ecriture des donnÃ©es en tant qu'enregistrement\r\n\t\t\t\tgsnoinitial = entier01\r\n\t\t\t\t\r\n\t\t\tFIN\t\t\t\t\r\n\t\t\t\r\n\t\t\t// on lit la 9eme  ligne pour avoir le no final des bornes pour la maj des donnÃ©es   \r\n\t\t\tSI icompt = 10 ALORS\r\n\t\t\t\t// Decodage de ligne pour obtenir le chemin base \r\n\t\t\t\tentier02 = ExtraitChaÃ®ne(Ligne,1,TAB)\r\n\t\t\t\t\r\n\t\t\t\t// ecriture des donnÃ©es en tant qu'enregistrement\r\n\t\t\t\tgsnofinal = entier02\r\n\t\t\t\t\r\n\t\t\tFIN\t\r\n\t\t\t\r\n\t\t\t// on lit la 10eme ligne pour avoir le nom du fichier des multi societes  \r\n\t\t\tSI icompt = 11 ALORS\r\n\t\t\t\t// Decodage de ligne pour obtenir le chemin base \r\n\t\t\t\tChaine10 = ExtraitChaÃ®ne(Ligne,1,TAB)\r\n\t\t\t\t\r\n\t\t\t\t// ecriture des donnÃ©es en tant qu'enregistrement\r\n\t\t\t\tgsfichiermultisoc = Chaine10\r\n\t\t\t\t\r\n\t\t\tFIN \r\n\t\t\t\r\n\t\t\t\r\n\t\t\t// on lit la 11eme ligne pour avoir le nom du fichier pour la borne 3 avec 3 positions de PR  \r\n\t\t\tSI icompt = 12 ALORS\r\n\t\t\t\t// Decodage de ligne pour obtenir le chemin base \r\n\t\t\t\tchaine11 = ExtraitChaÃ®ne(Ligne,1,TAB)\r\n\t\t\t\t\r\n\t\t\t\t// ecriture des donnÃ©es en tant qu'enregistrement\r\n\t\t\t\tgsfichierborne3 = chaine11\r\n\t\t\t\t\r\n\t\t\tFIN \r\n\t\t\t\r\n\t\t\t// on lit la 13eme ligne pour avoir le nombre maxi de jour possible pour exporter vers borne 3 : apres on n'exporte plus les employes  \r\n\t\t\tSI icompt = 13 ALORS\r\n\t\t\t\t// Decodage de ligne pour obtenir le chemin base \r\n\t\t\t\tentier03 = ExtraitChaÃ®ne(Ligne,1,TAB)\r\n\t\t\t\t\r\n\t\t\t\t// ecriture des donnÃ©es en tant qu'enregistrement\r\n\t\t\t\tgnnbjoursmaxi3 = entier03\r\n\t\t\t\t\r\n\t\t\tFIN \r\n\t\t\t\r\n\t\t\t\r\n\t\t\t// on lit la 14ere ligne pour avoir le nom du fichier des catÃ©gories de matÃ©riels  pour mngt\r\n\t\t\tSI icompt = 14 ALORS\r\n\t\t\t\t// Decodage de ligne pour obtenir le chemin base \r\n\t\t\t\tchaine14 = ExtraitChaÃ®ne(Ligne,1,TAB)\r\n\t\t\t\t\r\n\t\t\t\t// ecriture des donnÃ©es en tant qu'enregistrement\r\n\t\t\t\tgsfichiercategorie3 = chaine14\r\n\t\t\t\t\r\n\t\t\tFIN \t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t// on lit la 15eme ligne pour avoir l'expression reguliÃ¨re de l'id chronossat   \r\n\t\t\tSI icompt = 15 ALORS\r\n\t\t\t\t// Decodage de ligne pour obtenir le chemin base \r\n\t\t\t\tchaine15 = ExtraitChaÃ®ne(Ligne,1,TAB)\r\n\t\t\t\t\r\n\t\t\t\t// ecriture des donnÃ©es en tant qu'enregistrement\r\n\t\t\t\tgsexpressionregid = chaine15\r\n\t\t\t\tgsexpressionregfullid = \"regexp:\" + gsexpressionregid\t\t\t\t\r\n\t\t\t\t\r\n\t\t\tFIN \r\n\t\t\t\r\n\t\t\t\r\n\t\t\t// on lit la 16eme ligne pour avoir l'expression reguliÃ¨re du code sdc chronossat  \r\n\t\t\tSI icompt = 16 ALORS\r\n\t\t\t\t// Decodage de ligne pour obtenir le chemin base \r\n\t\t\t\tchaine16 = ExtraitChaÃ®ne(Ligne,1,TAB)\r\n\t\t\t\t\r\n\t\t\t\t// ecriture des donnÃ©es en tant qu'enregistrement\r\n\t\t\t\tgsexpressionregsdc = chaine16\r\n\t\t\t\tgsexpressionregfullsdc = \"regexp:\" + gsexpressionregsdc\t\r\n\t\t\t\t\r\n\t\t\tFIN \r\n\t\t\t\r\n\t\t\t//MAJ ID2C 01/04/2015\r\n\t\t\tSI icompt = 17 ALORS\r\n\t\t\t\tgbSynchronisationID2C = ExtraitChaÃ®ne(Ligne,1,TAB)\r\n\t\t\tFIN\r\n\t\t\t//Valeurs par dÃ©faut ID2C\r\n\t\t\tSI icompt = 18 ALORS\r\n\t\t\t\tgsCategorie = ExtraitChaÃ®ne(Ligne,1,TAB)\r\n\t\t\tFIN\r\n\t\t\tSI icompt = 19 ALORS\r\n\t\t\t\tgbActif = ExtraitChaÃ®ne(Ligne,1,TAB)\r\n\t\t\tFIN\r\n\t\t\tSI icompt = 20 ALORS\r\n\t\t\t\tgsMetier = ExtraitChaÃ®ne(Ligne,1,TAB)\r\n\t\t\tFIN\r\n\t\t\tSI icompt = 21 ALORS\r\n\t\t\t\tgsUnite = ExtraitChaÃ®ne(Ligne,1,TAB)\r\n\t\t\tFIN\r\n\t\t\tSI icompt = 22 ALORS\r\n\t\t\t\tgnMini = ExtraitChaÃ®ne(Ligne,1,TAB)\r\n\t\t\tFIN\r\n\t\t\tSI icompt = 23 ALORS\r\n\t\t\t\tgnMaxi = ExtraitChaÃ®ne(Ligne,1,TAB)\r\n\t\t\tFIN\r\n\t\t\tSI icompt = 24 ALORS\r\n\t\t\t\tgxpas = ExtraitChaÃ®ne(Ligne,1,TAB)\r\n\t\t\tFIN\r\n\t\t\tSI icompt = 25 ALORS\r\n\t\t\t\tgnDefaut = ExtraitChaÃ®ne(Ligne,1,TAB)\r\n\t\t\tFIN\r\n\t\t\tSI icompt = 26 ALORS \r\n\t\t\t\tgsDepot = ExtraitChaÃ®ne(Ligne,1,TAB)\r\n\t\t\tFIN\r\n\t\t\tSI icompt = 27 ALORS \r\n\t\t\t\tgsSociete = ExtraitChaÃ®ne(Ligne,1,TAB)\r\n\t\t\tFIN\r\n\t\t\tSI icompt = 28 ALORS \r\n\t\t\t\tgsAdresseFichierID2C = ExtraitChaÃ®ne(Ligne,1,TAB)\r\n\t\t\tFIN\r\n\t\t\tSI icompt = 29 ALORS\r\n\t\t\t\tgnStandByExpire = ExtraitChaÃ®ne(Ligne,1,TAB)\r\n\t\t\tFIN\r\n\t\t\tSI icompt = 30 ALORS\r\n\t\t\t\tgnHistoExpire = ExtraitChaÃ®ne(Ligne,1,TAB)\r\n\t\t\tFIN\r\n\t\t\tSI icompt = 31 ALORS\r\n\t\t\t\tgbDatebassehautefermeeobligatoire = ExtraitChaÃ®ne(Ligne,1,TAB)\r\n\t\t\tFIN\t\t\t\r\n\t\t\tSI icompt = 32 ALORS\r\n\t\t\tgnQuantitÃ©Rouge = ExtraitChaÃ®ne(Ligne,1,TAB)\r\n\t\t\tgnQuantitÃ©Vert = ExtraitChaÃ®ne(Ligne,2,TAB)\r\n\t\t\tgnQuantitÃ©Bleu = ExtraitChaÃ®ne(Ligne,3,TAB)\r\n\t\t\tFIN\t\r\n\t\t\t\r\n\t\tFIN  // fin de BOUCLE \r\n\t\t// Info(\"Lecture du fichier CONFIGMATERIELS.TXT OK\")\r\n\t\t\r\n\t\t\r\n\t\t// Fermeture du fichier\r\n\t\tfFerme(NumFic)\t\t\r\n\t\t\r\n\tFIN // fin de test Ã  l'ouverture\r\nFIN // fin du test d'exsitence",
        "motscles": "WINDEV Lecture Config"
      },
      {
        "0": "16062018",
        "1": "2018-06-16",
        "2": "https://doc.ubuntu-fr.org/programmation",
        "3": "Programmation linux doc",
        "id": "16062018",
        "date": "2018-06-16",
        "texte": "https://doc.ubuntu-fr.org/programmation",
        "motscles": "Programmation linux doc"
      },
      {
        "0": "24062018",
        "1": "2018-06-24",
        "2": "\r\n********************************\r\n//Bouton Valider avec test version longue\r\n// MÃ©morise les informations dans les rubriques du fichier\r\nEcranVersFichier()\r\n\r\n// S'il s'agit d'un nouvel enregistrement \r\n//TEST si la fonction HRAZ a Ã©tÃ© appelÃ©e avant\r\nSI EXPRESS_Fournisseur..NouvelEnregistrement ALORS\r\n\t\r\n\t// Ajoute le produit\r\n\tHAjoute(EXPRESS_Fournisseur)\r\n\t\r\nSINON\r\n\t\r\n\t// Modifie le produit\r\n\tHModifie(EXPRESS_Fournisseur)\r\n\t\r\nFIN\r\nRAZ()\r\nHRAZ(EXPRESS_Fournisseur)\r\n// Ferme la fenÃªtre\r\nFerme()\r\n**************************************\r\n//Bouton Valider test version courte\r\n// MÃ©morise les informations dans les rubriques du fichier\r\nEcranVersFichier()\r\n//Remplace le test detaillÃ© au dessus\r\nHEnregistre(produit)\r\n// Ferme la fenÃªtre\r\nFerme()\r\n********************************\r\n//Bouton modifier\r\n//Ouvrir la fenetre\r\nOuvre(FEN_Exemple)\r\n//Mettre a jour le champ table \r\n//a partir de la position du bandeau de selection\r\nTableAffiche(TABLE_Exemple, taCourantBandeau)\r\n**********************************\r\n//Bouton Nouveau\r\n//initalisation des variables\r\nHRAZ(Produit)\r\n// ouvre la fenetre\r\nOuvre(FEN_Fiche_Produit)\r\n//reaffiche le champ table\r\n// a partir de l'enregistrement courant\r\nTableAffiche(TABLE_Produit, taCourantEnreg)\r\n******************************************\r\n//Recherche a l'identique\r\n// COMBO\r\n//recherche le client par son ID\r\nHLitRecherchePremier(Client,IDClient,COMBO_Client)\r\nsi HTrouve(Client) ALORS\r\n\tFichierversEcran()\r\nFIN\r\n*******************************************\r\n// CrÃ©ation d'un nouvel enregistrement\r\nHRAZ(EXPRESS_OpÃ©rateur)\r\n\r\n// Ouverture de la fiche du fichier EXPRESS_OpÃ©rateur en mode crÃ©ation\r\nSI Ouvre(EXPRESS_FEN_Fiche_EXPRESS_OpÃ©rateur) ALORS\r\n\r\n\t// Rafraichissement de la table\r\n\tTableAffiche(TABLE_EXPRESS_OpÃ©rateur,taCourantPremier)\r\n\t\r\nFIN\r\n**********************************************\r\n// Une ligne est-elle sÃ©lectionnÃ© ?\r\nSI TableSelect(TABLE_EXPRESS_OpÃ©rateur)=-1 ALORS RETOUR\r\n\r\n// Ouverture de la fiche du fichier EXPRESS_OpÃ©rateur en mode modification\r\nOuvre(EXPRESS_FEN_Fiche_EXPRESS_OpÃ©rateur)\r\n\r\n// Rafraichissement de la table\r\nTableAffiche(TABLE_EXPRESS_OpÃ©rateur,taCourantBandeau)\r\n**********************************************\r\n// Une ligne est-elle sÃ©lectionnÃ©e ?\r\nSI TableSelect(TABLE_EXPRESS_OpÃ©rateur) = -1 ALORS RETOUR\r\n\r\n//1 : &amp;Supprimer\r\n//2 : &amp;Ne pas supprimer\r\nSELON Dialogue(\"ÃŠtes-vous sÃ»r de vouloir supprimer l'enregistrement ?\")\r\n\t// &amp;Supprimer\r\n\tCAS 1\r\n\t\t// Suppression de l'enregistrement EXPRESS_OpÃ©rateur Ã  partir de la table\r\n\t\tTableSupprime(TABLE_EXPRESS_OpÃ©rateur)\r\n\t\t\r\n\t\t// Positionnement sur l'enregistrement courant\r\n\t\tTableAffiche(TABLE_EXPRESS_OpÃ©rateur, taCourantPremier)\r\n\t\t\r\n\t// &amp;Ne pas supprimer\r\n\tCAS 2\r\n\t\t\r\nFIN\r\n************************************************\r\n// AperÃ§u avant impression\r\niAperÃ§u()\r\n// Impression de l'Ã©tat Liste EXPRESS_OpÃ©rateur\r\niImprimeEtat(EXPRESS_ETAT_Liste_EXPRESS_OpÃ©rateur)\r\n**********************************************\r\n// Mise en place du filtre sur la clÃ© de liaison (filtre les EXPRESS_Tickets)\r\nHFiltre(EXPRESS_Tickets,IDOpÃ©rateur,EXPRESS_OpÃ©rateur.IDOpÃ©rateur)\r\n\r\n// Ouverture de la fenÃªtre table des EXPRESS_Tickets\r\nOuvre(EXPRESS_FEN_Table_EXPRESS_Tickets)\r\n\r\n// DÃ©sactivation du filtre sur les EXPRESS_Tickets\r\nHDÃ©sactiveFiltre(EXPRESS_Tickets)\r\n**********************************************\r\n",
        "3": "Windev les bases",
        "id": "24062018",
        "date": "2018-06-24",
        "texte": "\r\n********************************\r\n//Bouton Valider avec test version longue\r\n// MÃ©morise les informations dans les rubriques du fichier\r\nEcranVersFichier()\r\n\r\n// S'il s'agit d'un nouvel enregistrement \r\n//TEST si la fonction HRAZ a Ã©tÃ© appelÃ©e avant\r\nSI EXPRESS_Fournisseur..NouvelEnregistrement ALORS\r\n\t\r\n\t// Ajoute le produit\r\n\tHAjoute(EXPRESS_Fournisseur)\r\n\t\r\nSINON\r\n\t\r\n\t// Modifie le produit\r\n\tHModifie(EXPRESS_Fournisseur)\r\n\t\r\nFIN\r\nRAZ()\r\nHRAZ(EXPRESS_Fournisseur)\r\n// Ferme la fenÃªtre\r\nFerme()\r\n**************************************\r\n//Bouton Valider test version courte\r\n// MÃ©morise les informations dans les rubriques du fichier\r\nEcranVersFichier()\r\n//Remplace le test detaillÃ© au dessus\r\nHEnregistre(produit)\r\n// Ferme la fenÃªtre\r\nFerme()\r\n********************************\r\n//Bouton modifier\r\n//Ouvrir la fenetre\r\nOuvre(FEN_Exemple)\r\n//Mettre a jour le champ table \r\n//a partir de la position du bandeau de selection\r\nTableAffiche(TABLE_Exemple, taCourantBandeau)\r\n**********************************\r\n//Bouton Nouveau\r\n//initalisation des variables\r\nHRAZ(Produit)\r\n// ouvre la fenetre\r\nOuvre(FEN_Fiche_Produit)\r\n//reaffiche le champ table\r\n// a partir de l'enregistrement courant\r\nTableAffiche(TABLE_Produit, taCourantEnreg)\r\n******************************************\r\n//Recherche a l'identique\r\n// COMBO\r\n//recherche le client par son ID\r\nHLitRecherchePremier(Client,IDClient,COMBO_Client)\r\nsi HTrouve(Client) ALORS\r\n\tFichierversEcran()\r\nFIN\r\n*******************************************\r\n// CrÃ©ation d'un nouvel enregistrement\r\nHRAZ(EXPRESS_OpÃ©rateur)\r\n\r\n// Ouverture de la fiche du fichier EXPRESS_OpÃ©rateur en mode crÃ©ation\r\nSI Ouvre(EXPRESS_FEN_Fiche_EXPRESS_OpÃ©rateur) ALORS\r\n\r\n\t// Rafraichissement de la table\r\n\tTableAffiche(TABLE_EXPRESS_OpÃ©rateur,taCourantPremier)\r\n\t\r\nFIN\r\n**********************************************\r\n// Une ligne est-elle sÃ©lectionnÃ© ?\r\nSI TableSelect(TABLE_EXPRESS_OpÃ©rateur)=-1 ALORS RETOUR\r\n\r\n// Ouverture de la fiche du fichier EXPRESS_OpÃ©rateur en mode modification\r\nOuvre(EXPRESS_FEN_Fiche_EXPRESS_OpÃ©rateur)\r\n\r\n// Rafraichissement de la table\r\nTableAffiche(TABLE_EXPRESS_OpÃ©rateur,taCourantBandeau)\r\n**********************************************\r\n// Une ligne est-elle sÃ©lectionnÃ©e ?\r\nSI TableSelect(TABLE_EXPRESS_OpÃ©rateur) = -1 ALORS RETOUR\r\n\r\n//1 : &amp;Supprimer\r\n//2 : &amp;Ne pas supprimer\r\nSELON Dialogue(\"ÃŠtes-vous sÃ»r de vouloir supprimer l'enregistrement ?\")\r\n\t// &amp;Supprimer\r\n\tCAS 1\r\n\t\t// Suppression de l'enregistrement EXPRESS_OpÃ©rateur Ã  partir de la table\r\n\t\tTableSupprime(TABLE_EXPRESS_OpÃ©rateur)\r\n\t\t\r\n\t\t// Positionnement sur l'enregistrement courant\r\n\t\tTableAffiche(TABLE_EXPRESS_OpÃ©rateur, taCourantPremier)\r\n\t\t\r\n\t// &amp;Ne pas supprimer\r\n\tCAS 2\r\n\t\t\r\nFIN\r\n************************************************\r\n// AperÃ§u avant impression\r\niAperÃ§u()\r\n// Impression de l'Ã©tat Liste EXPRESS_OpÃ©rateur\r\niImprimeEtat(EXPRESS_ETAT_Liste_EXPRESS_OpÃ©rateur)\r\n**********************************************\r\n// Mise en place du filtre sur la clÃ© de liaison (filtre les EXPRESS_Tickets)\r\nHFiltre(EXPRESS_Tickets,IDOpÃ©rateur,EXPRESS_OpÃ©rateur.IDOpÃ©rateur)\r\n\r\n// Ouverture de la fenÃªtre table des EXPRESS_Tickets\r\nOuvre(EXPRESS_FEN_Table_EXPRESS_Tickets)\r\n\r\n// DÃ©sactivation du filtre sur les EXPRESS_Tickets\r\nHDÃ©sactiveFiltre(EXPRESS_Tickets)\r\n**********************************************\r\n",
        "motscles": "Windev les bases"
      },
      {
        "0": "11102018",
        "1": "2018-10-11",
        "2": "//VerrNum Actif au demarrage Windows\r\n\r\nREGEDIT\r\nHKEY_USERS\\.DEFAULT\\Control Panel\\Keyboard\\InitialKeyboardIndicators\\2\r\n\r\nOPTION D'ALIMENTATION\r\nDÃ©coche ACTIVER le demarrage rapide\r\n\r\nETEINDRE PC",
        "3": "VerrNum",
        "id": "11102018",
        "date": "2018-10-11",
        "texte": "//VerrNum Actif au demarrage Windows\r\n\r\nREGEDIT\r\nHKEY_USERS\\.DEFAULT\\Control Panel\\Keyboard\\InitialKeyboardIndicators\\2\r\n\r\nOPTION D'ALIMENTATION\r\nDÃ©coche ACTIVER le demarrage rapide\r\n\r\nETEINDRE PC",
        "motscles": "VerrNum"
      },
      {
        "0": "3012019",
        "1": "2019-01-03",
        "2": "enablecredsspsupport:i:0\r\n\r\npour se connecter direct au serveur et voir les login utilisÃ©\r\n\r\nContre-mesures et prÃ©ventions :\r\n\r\n    On peut dans un premier temps dÃ©sactiver lâ€™affichage des derniers utilisateurs connectÃ©s par la configuration des Local Security Policies du serveur. Cela sâ€™effectue par exemple en activant la policy Â« Do not display last user name Â» (Local Security Policy &gt; Local Policies &gt; Security Options)\r\n    Forcer la sÃ©curitÃ© NLA par GPO, en activant la rÃ¨gle Â« Require user authentication for remote connections by using Network Level Authentication Â» (dans Computer Configuration\\Administrative Templates\\Windows Components\\Remote Desktop Services\\Remote Desktop Session Host\\Security), ce qui Â« bloque Â» lâ€™attaque.\r\n    Configurer la redirection de port conditionnelle (via un pare-feu StormShield), le port nâ€™est alors ouvert que si lâ€™utilisateur sâ€™est authentifiÃ© sur le firewall depuis lâ€™IP Source. Cela ne chiffre pas la communication, mais rÃ©duit grandement la surface dâ€™attaque.\r\n    On peut aussi configurer un portail VPN SSL basÃ© sur une applet Java, ou utiliser un client VPN SSL Â« lourd Â» type OpenVPN, qui permettra Ã  lâ€™utilisateur dâ€™avoir accÃ¨s Ã  tout ou partie du rÃ©seau selon les rÃ¨gles de filtrages dÃ©finis sur le pare-feu Stormshield.\r\n",
        "3": "RDP",
        "id": "3012019",
        "date": "2019-01-03",
        "texte": "enablecredsspsupport:i:0\r\n\r\npour se connecter direct au serveur et voir les login utilisÃ©\r\n\r\nContre-mesures et prÃ©ventions :\r\n\r\n    On peut dans un premier temps dÃ©sactiver lâ€™affichage des derniers utilisateurs connectÃ©s par la configuration des Local Security Policies du serveur. Cela sâ€™effectue par exemple en activant la policy Â« Do not display last user name Â» (Local Security Policy &gt; Local Policies &gt; Security Options)\r\n    Forcer la sÃ©curitÃ© NLA par GPO, en activant la rÃ¨gle Â« Require user authentication for remote connections by using Network Level Authentication Â» (dans Computer Configuration\\Administrative Templates\\Windows Components\\Remote Desktop Services\\Remote Desktop Session Host\\Security), ce qui Â« bloque Â» lâ€™attaque.\r\n    Configurer la redirection de port conditionnelle (via un pare-feu StormShield), le port nâ€™est alors ouvert que si lâ€™utilisateur sâ€™est authentifiÃ© sur le firewall depuis lâ€™IP Source. Cela ne chiffre pas la communication, mais rÃ©duit grandement la surface dâ€™attaque.\r\n    On peut aussi configurer un portail VPN SSL basÃ© sur une applet Java, ou utiliser un client VPN SSL Â« lourd Â» type OpenVPN, qui permettra Ã  lâ€™utilisateur dâ€™avoir accÃ¨s Ã  tout ou partie du rÃ©seau selon les rÃ¨gles de filtrages dÃ©finis sur le pare-feu Stormshield.\r\n",
        "motscles": "RDP"
      },
      {
        "0": "4012019",
        "1": "2019-01-04",
        "2": "https://initscreen.developpez.com/tutoriels/batch/apprendre-la-programmation-de-script-batch/\r\n\r\n\r\n\r\n    Forums\r\n    Tutoriels\r\n    Magazine\r\n    FAQ\r\n    Blogs\r\n    Chat\r\n    Newsletter\r\n    Ã‰tudes\r\n    Emploi\r\n    Club\r\n\r\n    Accueil\r\n    ALM\r\n    Java\r\n    .NET\r\n    DÃ©v. Web\r\n    EDI\r\n    Programmation\r\n    SGBD\r\n    Office\r\n    Solutions d'entreprise\r\n    Applications\r\n    Mobiles\r\n    SystÃ¨mes\r\n\r\n    SystÃ¨mes\r\n    Windows\r\n    Linux\r\n    Arduino\r\n    SÃ©curitÃ©\r\n    Hardware\r\n    HPC\r\n    Mac\r\n    Raspberry Pi\r\n    RÃ©seau\r\n    Green IT\r\n    SystÃ¨mes EmbarquÃ©s\r\n    Virtualisation\r\n\r\n    FORUM WINDOWS\r\n    FORUM PROGRAMMATION\r\n    FAQ WINDOWS\r\n    TUTORIELS WINDOWS\r\n    QUIZ WINDOWS\r\n    LOGICIELS &amp; SOURCES WINDOWS\r\n    LIVRES\r\n\r\nTraduire cette page\r\nMicrosoftÂ® Translator\r\nApprendre la programmation de script batch\r\nTable des matiÃ¨resPlier\r\n\r\n    Remerciements\r\n    I. Introduction\r\n        I-A. L'Ã©diteur de texte\r\n        I-B. Encodage des caractÃ¨res\r\n        I-C. Hello World\r\n        I-D. DiffÃ©rence entre la commande Â« rem Â» et le prÃ©fixe Â« :: Â»\r\n        I-E. Les Ã©chappements de caractÃ¨res\r\n        I-F. Les bogues de la commande Â« rem Â» et du prÃ©fixe Â« :: Â»\r\n    II. Les variables\r\n        II-A. Les variables d'environnement\r\n        II-B. La commande Â« set Â»\r\n        II-C. Les variables de type chaÃ®ne de caractÃ¨res\r\n        II-D. Les variables de type nombre entier signÃ©\r\n            II-D-1. Les opÃ©rations arithmÃ©tiques\r\n            II-D-2. Les opÃ©rations logiques\r\n            II-D-3. Les opÃ©rateurs unaires\r\n        II-E. Les nombres entiers signÃ©s en notation hexadÃ©cimale\r\n        II-F. Les nombres entiers signÃ©s en notation octale\r\n    III. Les conditions\r\n        III-A. If, else, else if, not et /i\r\n        III-B. La condition Â« exist &lt;path&gt; Â»\r\n        III-C. La condition Â« defined &lt;variable&gt; Â»\r\n        III-D. La condition Â« errorlevel &lt;opÃ©rande&gt; Â»\r\n        III-E. La condition Â« cmdextversion &lt;opÃ©rande&gt; Â»\r\n        III-F. La condition Â« &lt;chaÃ®ne1&gt; &lt;comparateur&gt; &lt;chaÃ®ne2&gt; Â»\r\n        III-G. La condition Â« \"&lt;chaÃ®ne1&gt;\"==\"&lt;chaÃ®ne2&gt;\" Â»\r\n        III-H. Mise en application de la commande Â« if Â»\r\n    IV. Tout dÃ©pend du contexte\r\n        IV-A. Les labels\r\n        IV-B. Les sauts\r\n        IV-C. Contexte de commande\r\n            IV-C-1. La portÃ©e des variables\r\n        IV-D. Les fonctions\r\n            IV-D-1. L'appel de fonction\r\n            IV-D-2. Sortie de fonction\r\n        IV-E. Les paramÃ¨tres de commande\r\n            IV-E-1. Les modificateurs de paramÃ¨tres de commande\r\n            IV-E-2. La commande shift\r\n        IV-F. Les sorties\r\n        IV-G. Code de sortie\r\n        IV-H. Script batch et adresse de retour\r\n        IV-I. La commande start\r\n        IV-J. La commande setlocal\r\n        IV-K. La commande endlocal\r\n        IV-L. Mise en application des contextes\r\n    V. Les boucles\r\n        V-A. Les boucles pour chemin d'accÃ¨s\r\n        V-B. Les boucles pour compteurs\r\n        V-C. Les boucles de recherche\r\n        V-D. Les Ã©chappements propres Ã  la boucle for\r\n        V-E. Mise en application des boucles\r\n    VI. L'expansion retardÃ©e des variables\r\n        VI-A. Cas de la boucle for\r\n        VI-B. GÃ©nÃ©rer dynamiquement des noms de variables\r\n        VI-C. Parcourir une chaÃ®ne\r\n        VI-D. Mise en application de l'expansion retardÃ©e\r\n    VII. La gestion des flux\r\n        VII-A. Le canal standard\r\n        VII-B. Les opÃ©rateurs de redirection\r\n        VII-C. L'opÃ©rateur &amp;\r\n        VII-D. La sortie standard\r\n        VII-E. Les opÃ©rateurs &gt; et &gt;&gt;\r\n        VII-F. L'erreur standard\r\n        VII-G. L'entrÃ©e standard\r\n        VII-H. Le pseudo-pÃ©riphÃ©rique NUL\r\n        VII-I. L'opÃ©rateur |\r\n            VII-I-1. Les filtres\r\n            VII-I-2. Le filtre find\r\n            VII-I-3. Le filtre sort\r\n            VII-I-4. Le filtre more\r\n            VII-I-5. Le filtre findstr\r\n        VII-J. L'opÃ©rateur &lt;\r\n        VII-K. Le point sur Â« set /p Â» et Â« type Â»\r\n        VII-L. Les opÃ©rateurs &amp;&amp; et ||\r\n            VII-L-1. Tester les deux Ã©tats d'erreurs\r\n        VII-M. Les opÃ©rateurs &lt;&amp; et &gt;&amp;\r\n        VII-N. Les handles pour tampon utilisateur\r\n        VII-O. Les pseudo-fichiers de pÃ©riphÃ©rique\r\n            VII-O-1. Le pseudo-fichier CON\r\n            VII-O-2. Les pseudo-fichiers COMx\r\n            VII-O-3. Les pseudo-fichiers LTPx\r\n            VII-O-4. Le pseudo-fichier PRN\r\n            VII-O-5. Le pseudo-fichier AUX\r\n    VIII. Les fichiers de rÃ©ponse\r\n        VIII-A. La syntaxe des fichiers Â« *.ini Â»\r\n        VIII-B. Lecture d'un fichier Â« *.ini Â»\r\n    IX. SÃ©curitÃ© et script batch\r\n        IX-A. Les variables\r\n        IX-B. L'injection de commandes\r\n    Annexe A. Les caractÃ¨res\r\n        A.1. Affichage des caractÃ¨res de contrÃ´le\r\n        A.2. Insertion de caractÃ¨res de contrÃ´le et de signaux\r\n\r\nCe cours a pour but de vous apprendre la programmation de script batch. TombÃ©s en dÃ©suÃ©tude, ils reviennent forts depuis Windows Server 2012 du fait que celui-ci utilise une interface en ligne de commande aussi appelÃ©e CLI (Command Line Interface) ou CUI (Console User Interface).\r\n\r\n4 commentaires Donner une note Ã  l'article (5)\r\n\r\nArticle lu 168247 fois.\r\nL'auteur\r\n\r\nJuillard Jean-Baptiste\r\nL'article\r\n\r\nPubliÃ© le 13 avril 2015 \r\n\r\nPublic visÃ© : tout le monde\r\n\r\nDurÃ©e : 15-20 heures\r\n\r\nVersion PDF Version hors-ligne\r\n\r\nePub, Azw et Mobi\r\nLiens sociaux\r\nViadeo Twitter Facebook Share on Google+  inPartager \r\nRemerciements\r\nâ–²\r\n\r\nJe tiens Ã  remercier gangsoleil et djibril pour leurs relectures techniques attentives ; ainsi que f-leb, FRANOUCH et milkoseck pour leurs relectures orthographiques assidues.\r\nI. Introduction\r\nâ–²\r\n\r\nLes fichiers batch sont des scripts de commandes qui s'exÃ©cutent dans l'interprÃ©teur de commande Windows. Alors quelle pourrait Ãªtre l'utilitÃ© d'Ã©crire ces lignes de commande dans un script ? En fait, il y a plusieurs raisons :\r\n\r\n    Ã©viter d'avoir Ã  rÃ©Ã©crire sans cesse les mÃªmes commandes lors de tÃ¢ches rÃ©pÃ©titives ;\r\n    possibilitÃ© de crÃ©er de vrais petits Â« programmes Â» facilitant les tÃ¢ches qui doivent Ãªtre rÃ©alisÃ©es via l'interprÃ©teur de commande.\r\n\r\nNous allons Ã©tudier les mÃ©thodes permettant de concevoir ces programmes. Dans la suite de ce document, nous utiliserons la convention suivante :\r\n\r\n    les termes Â« interprÃ©teur de commande Â» ou Â« interprÃ©teur Â» dÃ©signent l'exÃ©cutable Â« cmd.exe Â» ;\r\n    dans les syntaxes de commande, les parties encadrÃ©es avec les caractÃ¨res [ et ] sont optionnelles, les parties encadrÃ©es avec les caractÃ¨res &lt; et &gt; sont Ã  remplacer par diffÃ©rentes informations Ã  fournir (celles-ci seront prÃ©cisÃ©es avec la syntaxe) et les parties encadrÃ©es avec les caractÃ¨res { et } sont des parties Ã  choix multiple oÃ¹ chaque choix est sÃ©parÃ© des autres avec le caractÃ¨re |.\r\n\r\nLa convention syntaxique est la mÃªme que celle pour l'aide en ligne de commande, ainsi il vous sera plus facile de la comprendre.\r\nI-A. L'Ã©diteur de texte\r\nâ–²\r\n\r\nUn simple Ã©diteur de texte, tel que le notepad fourni avec Windows, s'avÃ¨re peu pratique pour Ã©crire des scripts batch. Pour exploiter pleinement les capacitÃ©s de ces scripts, il faut pouvoir encoder les caractÃ¨res non anglophones comme les accents ou le Â« Ã§ Â» afin de pouvoir accÃ©der aux fichiers dont les noms comportent ce genre de caractÃ¨res exotiques. La plupart des Ã©diteurs de texte encodent les fichiers avec le jeu de caractÃ¨res de la norme ANSI qui correspond Ã  la langue d'installation du systÃ¨me d'exploitation alors que l'interprÃ©teur de commande utilise une Ã©tendue de page de code (aussi appelÃ©e Code Page) comme CP-850 qui est l'encodage par dÃ©faut de l'interprÃ©teur pour les systÃ¨mes Windows installÃ©s en franÃ§ais (France).\r\n\r\nSous Windows, il y a un Ã©diteur de texte que vous possÃ©dez peut-Ãªtre dÃ©jÃ , c'est Notepad++ (la version 5.9.x ou supÃ©rieure est nÃ©cessaire) ; si ce n'est pas le cas, vous pouvez le tÃ©lÃ©charger ici : http://notepad-plus-plus.org/fr/\r\n\r\nDans ce dernier, vous pourrez sÃ©lectionner l'encodage dans le menu Â« Encodage &gt; Codage de caractÃ¨res Â», puis si vous voulez le franÃ§ais par exemple : sÃ©lectionnez Â« Langues d'Europe occidentale&gt;OEM-850 Â». Dans Notepad++, les code pages sont appelÃ©s OEM-XXX, au lieu de CP-XXX, mais ce sont les mÃªmes encodages. Il faut aussi noter que dans le mÃªme menu que OEM-850, il y a OEM-863 : franÃ§ais ; c'est bien du franÃ§ais, mais pour le QuÃ©bec. Cette manipulation sera Ã  effectuer pour chaque script afin d'utiliser le bon encodage, il n'est pas possible d'effectuer cette opÃ©ration de faÃ§on automatique dans Notepad++.\r\nNotepad++\r\nI-B. Encodage des caractÃ¨res\r\nâ–²\r\n\r\nLa gestion des pages de code dans l'interprÃ©teur se fait via les commandes mode et chcp, ces commandes permettent d'afficher le code page utilisÃ© ou de le modifier en utilisant l'une des syntaxes suivantes.\r\n\r\nDÃ©finir le code page Ã  utiliser (oÃ¹ &lt;XXX&gt; est le numÃ©ro de code page).\r\n\r\nmode con cp select=&lt;XXX&gt; \r\n\r\nchcp &lt;XXX&gt; \r\n\r\nAfficher le code page utilisÃ©.\r\n\r\nmode con cp [/status] \r\n\r\nchcp\r\n\r\nLe tableau 1 fournit une liste non exhaustive des diffÃ©rents code pages utilisÃ©s par l'interprÃ©teur de commande.\r\n\r\nCode Page\r\n\t\r\n\r\nDescription\r\n\r\nCP-437\r\n\t\r\n\r\npour le support des langues anglophones.\r\n\r\nCP-720\r\n\t\r\n\r\npour le support des langues arabes.\r\n\r\nCP-737\r\n\t\r\n\r\npour le support du grec.\r\n\r\nCP-775\r\n\t\r\n\r\npour le support des langues baltes.\r\n\r\nCP-850\r\n\t\r\n\r\npour le support des langues d'Europe occidentale (mis Ã  jour par CP 858) dont le franÃ§ais (France), mais aussi l'allemand, le basque, le catalan, le danois, l'espagnol, le finnois, l'italien, le nÃ©erlandais, le norvÃ©gien, le portugais, le suÃ©dois, l'afrikaans, le faeroese, le flamand et l'irlandais.\r\n\r\nCP-852\r\n\t\r\n\r\npour le support des langues d'Europe centrale.\r\n\r\nCP-855\r\n\t\r\n\r\npour le support de l'alphabet cyrillique.\r\n\r\nCP-857\r\n\t\r\n\r\npour le support du turc.\r\n\r\nCP-858\r\n\t\r\n\r\npour le support des langues d'Europe occidentale, dont le franÃ§ais (France), il s'agit d'une mise Ã  jour de 1998 basÃ©e sur CP-850 ou seul le symbole Â« â‚¬ Â» a Ã©tÃ© ajoutÃ© au point de code 0xD5.\r\n\r\nCP-861\r\n\t\r\n\r\npour le support de l'islandais.\r\n\r\nCP-863\r\n\t\r\n\r\npour le support du franÃ§ais (QuÃ©bec).\r\n\r\nCP-864\r\n\t\r\n\r\npour le support des langues arabes.\r\n\r\nCP-866\r\n\t\r\n\r\npour le support de l'alphabet cyrillique.\r\n\r\nCP-869\r\n\t\r\n\r\npour le support du grec.\r\n\r\nTableau 1 : Code Page\r\n\r\nIl faut noter que malgrÃ© la mise Ã  jour de CP-850 par CP-858, l'encodage par dÃ©faut pour l'interprÃ©teur sous Windows installÃ© en franÃ§ais (France) reste CP-850. Il est donc prÃ©fÃ©rable d'utiliser CP-850. La liste des code pages supportÃ©s par un systÃ¨me Windows est disponible dans le registre sous la clÃ© : HKLM\\SYSTEM\\CurrentControlSet\\Control\\Nls\\CodePage. Vous noterez la prÃ©sence de 1252 dans la clÃ© prÃ©cÃ©demment mentionnÃ©e, il s'agit de l'encodage Windows-1252 utilisÃ© par les API Windows et donc par la plupart des blocs-notes sur les systÃ¨mes installÃ©s en franÃ§ais (France) ; cependant il n'est pas recommandÃ© de l'utiliser dans l'interprÃ©teur de commande du fait que les commandes ne sont pas faites pour le supporter, il peut mÃªme provoquer des bogues dans certains cas. L'encodage par dÃ©faut pour l'interprÃ©teur peut Ãªtre trouvÃ© via la valeur OEMCP de type REG_SZ toujours dans la clÃ© prÃ©cÃ©demment mentionnÃ©e.\r\n\r\nIl est possible d'ajouter les Code Pages manquants (par dÃ©faut, seuls les code pages correspondant Ã  la langue d'installation sont disponibles) en installant le pack de langue correspondant Ã  l'encodage voulu. Chaque pack de langue comprend une table de conversion permettant Ã  Windows de convertir un point de code en sa reprÃ©sentation graphique et donc de l'afficher. Il est aussi possible d'utiliser l'Unicode (UCS-2 seulement) avec les sorties de commandes internes de l'interprÃ©teur pour permettre l'interaction avec les programmes qui utilisent Unicode de maniÃ¨re Â« native Â» (pour Perl par exemple) en appelant l'interprÃ©teur via la commande suivante (oÃ¹ &lt;commande&gt; est la commande Ã  exÃ©cuter).\r\n\r\ncmd /u &lt;commande&gt; \r\n\r\nDans Notepad++, les caractÃ¨res absents du clavier peuvent Ãªtres rajoutÃ©s via le menu Â« Ã‰dition&gt;Panneau des caractÃ¨res ASCII Â» puis double-clic sur le caractÃ¨re voulu.\r\nI-C. Hello World\r\nâ–²\r\n\r\nNous allons commencer par le traditionnel Â« hello world Â», dont voici le code (Script 1). Copiez le code dans Notepad++, puis enregistrez-le avec l'encodage OEM-850 et l'extension Â« .bat Â» ou Â« .cmd Â» (seulement sur les systÃ¨mes Vista et supÃ©rieur).\r\n\r\nLa diffÃ©rence entre fichier Â« .bat Â» et fichier Â« .cmd Â» tient dans l'interprÃ©teur de commande, en effet sur les systÃ¨mes Windows XP, il y avait deux interprÃ©teurs de commande : Â« cmd.exe Â» et Â« COMMAND.COM Â». Les fichiers avec l'extension Â« .bat Â» Ã©taient exÃ©cutÃ©s par Â« cmd.exe Â» et les fichiers avec l'extension Â« .cmd Â» Ã©taient exÃ©cutÃ©s par Â« COMMAND.COM Â», les deux types de fichiers avaient des spÃ©cificitÃ©s diffÃ©rentes. Cependant sur les systÃ¨mes Windows Vista et supÃ©rieur, seul subsiste Â« cmd.exe Â», tous les scripts Â« .bat Â» et Â« .cmd Â» sont exÃ©cutÃ©s par Â« cmd.exe Â» et ont les mÃªmes spÃ©cificitÃ©s.\r\nScript 1\r\nSÃ©lectionnez\r\n1.\r\n2.\r\n3.\r\n4.\r\n5.\r\n6.\r\n7.\r\n8.\r\n9.\r\n\r\n@echo off\r\ncls\r\n\r\nrem Ceci est une remarque.\r\n:: Ceci est un commentaire.\r\n\r\necho Hello World !!!! DÃ©jÃ  lÃ  ?\r\necho.\r\npause\r\n\r\nLorsqu'on exÃ©cute ce script en cliquant dessus, on obtient l'affichage suivant.\r\nScript_Hello_World\r\n\r\nÃ‰tudions la composition du script 1. La premiÃ¨re ligne, @echo off, est dÃ©jÃ  intÃ©ressante, elle est composÃ©e :\r\n\r\n    du prÃ©fixe @ qui sert Ã  inverser l'Ã©tat de l'affichage standard ;\r\n    de la commande echo qui sert Ã  gÃ©rer l'affichage en ligne de commande ;\r\n    et du paramÃ¨tre off qui sert Ã  dÃ©sactiver l'affichage standard.\r\n\r\nL'affichage standard dÃ©finit ce que l'interprÃ©teur de commande affiche par dÃ©faut. Par exemple lors du lancement de l'interprÃ©teur de commande ci-dessous ; l'affichage standard renvoie le chemin d'accÃ¨s du rÃ©pertoire courant, soit C:\\Users\\Portable&gt;.\r\nSTD_Prompt\r\n\r\nLors de l'exÃ©cution d'un script, l'affichage standard renvoie, par dÃ©faut, le chemin d'accÃ¨s du rÃ©pertoire courant suivi de la commande en cours d'exÃ©cution comme dans l'exemple ci-dessous.\r\nImage non disponible\r\n\r\nLe prÃ©fixe @, quand il est placÃ© en dÃ©but de ligne, sert Ã  inverser l'Ã©tat de l'affichage standard (activÃ© ou dÃ©sactivÃ©) pour l'exÃ©cution de la commande qui le suit (pas seulement pour la commande echo). Ce comportement prend fin une fois la commande exÃ©cutÃ©e. Ainsi la commande @cd /d \"C:\\Users\\Portable\\\" ne sera affichÃ©e que si l'affichage standard est dÃ©sactivÃ©. La syntaxe du prÃ©fixe @ est la suivante (oÃ¹ &lt;commande&gt; est la commande Ã  exÃ©cuter) :\r\n\r\n@&lt;commande&gt; \r\n\r\nLa commande echo gÃ¨re l'affichage dans l'interprÃ©teur, elle peut :\r\n\r\n    modifier l'Ã©tat de l'affichage standard ;\r\n    afficher l'Ã©tat de l'affichage standard ;\r\n    afficher un message ou une ligne vide dans l'interprÃ©teur.\r\n\r\nDÃ©sactiver l'affichage standard peut Ãªtre fait via la syntaxe suivante (seuls les erreurs et les messages de la commande echo sont affichÃ©s).\r\n\r\necho off \r\n\r\nActiver l'affichage standard peut Ãªtre fait via la syntaxe suivante (tout est affichÃ©).\r\n\r\necho on\r\n\r\nUtilisÃ©e sans paramÃ¨tre, la commande echo renvoie l'Ã©tat de l'affichage standard en cours.\r\n\r\necho \r\n\r\nSi l'on reprend le script 1, la ligne @echo off permet de dÃ©sactiver l'affichage standard sans que la commande soit affichÃ©e. Sur la deuxiÃ¨me ligne du script 1, la commande cls est utilisÃ©e pour vider la fenÃªtre de l'interprÃ©teur de son contenu, cette commande ne prend aucun paramÃ¨tre. Sa syntaxe est donc la suivante.\r\n\r\ncls\r\n\r\nLa ligne suivante du script 1 est vide, elle ne sera donc pas prise en compte lors de l'exÃ©cution du script permettant ainsi de le rendre plus lisible. La quatriÃ¨me ligne est composÃ©e de la commande rem et d'une chaÃ®ne de caractÃ¨res, cette commande permet d'insÃ©rer des remarques dans son script. Si et seulement si l'affichage standard est activÃ©, la commande rem sera affichÃ©e. La syntaxe de la commande rem est la suivante (oÃ¹ &lt;remarque&gt; est la chaÃ®ne de caractÃ¨res Ã  insÃ©rer en remarque).\r\n\r\nrem &lt;remarque&gt; \r\n\r\nLa cinquiÃ¨me ligne du script 1, :: Ceci est un commentaire., est composÃ©e du prÃ©fixe :: et d'une chaÃ®ne de caractÃ¨res. Le prÃ©fixe :: dÃ©finit la chaÃ®ne de caractÃ¨res qui le suit comme Ã©tant un commentaire ; ce comportement prend fin au premier retour Ã  la ligne. Quel que soit l'Ã©tat de l'affichage standard, la chaÃ®ne de caractÃ¨res prÃ©fixÃ©e par :: ne sera pas affichÃ©e. La syntaxe est la suivante (oÃ¹ &lt;commentaire&gt; est le commentaire Ã  insÃ©rer).\r\n\r\n::&lt;commentaire&gt; \r\n\r\nSuit une autre ligne vide puis la commande echo Hello World !!!! DÃ©jÃ  lÃ  ? qui affiche Hello World !!!! DÃ©jÃ  lÃ  ? dans la fenÃªtre de l'interprÃ©teur. La syntaxe suivante permet donc d'afficher un message mÃªme si l'affichage standard est dÃ©sactivÃ© (oÃ¹ &lt;message&gt; est le message Ã  afficher).\r\n\r\necho &lt;message&gt; \r\n\r\nVient ensuite la commande echo. qui permet d'afficher la ligne vide que l'on voit dans l'affichage obtenu. Si un point suit directement la commande echo et qu'aprÃ¨s le point il y a un retour Ã  la ligne, celle-ci affiche une ligne vide.\r\n\r\necho. \r\n\r\nSur la ligne suivante se trouve la commande pause qui met en pause l'exÃ©cution du script jusqu'Ã  ce que l'utilisateur appuie sur une touche quelconque du clavier, elle affiche le message Appuyez sur une touche pour continuerâ€¦ (quel que soit l'Ã©tat en cours de l'affichage standard) et ne prend aucun paramÃ¨tre. Dans le script 1, cette commande permet de visualiser le contenu de la fenÃªtre de l'interprÃ©teur avant que celle-ci ne se ferme.\r\n\r\npause \r\nI-D. DiffÃ©rence entre la commande Â« rem Â» et le prÃ©fixe Â« :: Â»\r\nâ–²\r\n\r\nPour mieux comprendre la diffÃ©rence entre la commande rem et le prÃ©fixe ::, Ã©tudions le script 2.\r\nScript 2\r\nSÃ©lectionnez\r\n1.\r\n2.\r\n3.\r\n4.\r\n5.\r\n6.\r\n7.\r\n\r\ncls\r\nrem Remarque 1\r\n:: Commentaire 1\r\n@echo off\r\nrem Remarque 2\r\n:: Commentaire 2\r\npause\r\n\r\nImage non disponible\r\n\r\nComme vous le voyez dans l'affichage du script 2, la commande rem Remarque 1, est prÃ©sente Ã  l'Ã©cran ; l'affichage standard Ã©tant activÃ©, les commandes exÃ©cutÃ©es sont toutes affichÃ©es. La chaÃ®ne :: Commentaire 1 n'est pas affichÃ©e, c'est dÃ» au fait que le prÃ©fixe :: n'est pas une commande et donc n'est pas renvoyÃ© par l'affichage standard. Vient ensuite la commande @echo off qui dÃ©sactive l'affichage standard sans que la commande ne soit affichÃ©e, suivie de la commande rem Remarque 2 qui n'est pas affichÃ©e (l'affichage standard Ã©tant Ã  prÃ©sent dÃ©sactivÃ©), pas plus que la chaÃ®ne :: Commentaire 2 qui est de toute faÃ§on exclue par l'affichage standard.\r\nI-E. Les Ã©chappements de caractÃ¨res\r\nâ–²\r\n\r\nLes caractÃ¨res spÃ©ciaux (aussi appelÃ© mÃ©ta-caractÃ¨res) sont des caractÃ¨res ayant une signification particuliÃ¨re pour l'interprÃ©teur de commande. Chaque fois que l'interprÃ©teur les rencontre, il leur applique le traitement correspondant, quelles que soient leurs positions dans la ligne de commande. En voici la liste :\r\n\r\n&amp; | ^ &lt; &gt; ( ) \r\n\r\nPour pouvoir les utiliser dans une chaÃ®ne de caractÃ¨res, il faut les Â« Ã©chapper Â» avec le caractÃ¨re ^, c'est-Ã -dire placer ce caractÃ¨re devant. Ainsi l'interprÃ©teur saura qu'ils font partie d'une chaÃ®ne et qu'ils n'ont rien Ã  voir avec la commande. Voir le script 3 comme exemple.\r\nScript 3\r\nSÃ©lectionnez\r\n1.\r\n2.\r\n3.\r\n\r\n@echo off\r\necho ^&amp; ^| ^^ ^&lt; ^&gt; ^( ^)\r\npause\r\n\r\nIl faut aussi noter que d'autres caractÃ¨res peuvent avoir besoin d'Ãªtre Ã©chappÃ©s, mais ils suivent d'autres rÃ¨gles. Le caractÃ¨re % doit Ãªtre Ã©chappÃ© par lui-mÃªme pour Ãªtre considÃ©rÃ© comme faisant partie d'une chaÃ®ne lorsqu'il est utilisÃ© dans un script comme le montre le script 4.\r\nScript 4\r\nSÃ©lectionnez\r\n1.\r\n2.\r\n3.\r\n\r\n@echo off\r\necho %%\r\npause\r\n\r\nUn autre cas est Ã  noter, il concerne les caractÃ¨res \" et \\ qui doivent Ãªtre Ã©chappÃ©s avec le caractÃ¨re \\ lorsqu'ils sont utilisÃ©s dans un paramÃ¨tre entre guillemets. Dans le script 5, si les caractÃ¨res \" et \\ n'avaient pas Ã©tÃ© Ã©chappÃ©s, le rÃ©sultat ne serait pas celui attendu. L'interprÃ©teur aurait compris qu'il y avait une chaÃ®ne \"cmd /c \"notepad et une chaÃ®ne \"%cd%\\%~nx0\"\", ce qui aurait conduit Ã  une erreur d'Ã©valuation de la commande.\r\nScript 5\r\nSÃ©lectionnez\r\n1.\r\n2.\r\n3.\r\n\r\n@echo off\r\nrunas /User:%UserName% \"cmd /c \\\"notepad \\\"%cd%\\\\%~nx0\\\"\"\r\npause\r\n\r\nLe caractÃ¨re d'Ã©chappement ^ peut aussi Ãªtre utilisÃ© afin d'Ã©crire une seule et mÃªme commande sur plusieurs lignes. Lorsque l'interprÃ©teur rencontre le caractÃ¨re ^ devant un retour Ã  la ligne, il supprime ce caractÃ¨re et le retour Ã  la ligne, puis continue Ã  lire les donnÃ©es fournies dans la ligne suivante. Exemple avec le script 6.\r\nScript 6\r\nSÃ©lectionnez\r\n1.\r\n2.\r\n3.\r\n4.\r\n\r\n@echo off\r\necho foo ^\r\nbar\r\npause\r\n\r\nImage non disponible\r\n\r\nD'autres Ã©chappements existent, cependant ils seront abordÃ©s plus loin dans ce document, car ils s'appliquent Ã  des commandes prÃ©cises et ne concernent pas les autres. Par exemple, la commande echo qui considÃ¨re le point comme un Ã©chappement de la chaÃ®ne qui le suit. Lorsque la commande echo est directement suivie d'un point, elle considÃ¨re la chaÃ®ne qui se trouve aprÃ¨s le point comme une chaÃ®ne Ã  afficher, retour Ã  la ligne compris. Cela permet d'utiliser en dÃ©but de chaÃ®ne un Â« mot Â» qu'elle aurait, dans le cas contraire, considÃ©rÃ© comme un paramÃ¨tre. Exemple avec le script 7.\r\nScript 7\r\nSÃ©lectionnez\r\n1.\r\n2.\r\n3.\r\n4.\r\n5.\r\n6.\r\n7.\r\n8.\r\n9.\r\n10.\r\n11.\r\n12.\r\n13.\r\n14.\r\n15.\r\n16.\r\n17.\r\n18.\r\n19.\r\n20.\r\n21.\r\n22.\r\n23.\r\n24.\r\n25.\r\n26.\r\n\r\n@echo off\r\n\r\necho Affichage d'une ligne vide sans le point:\r\necho\r\n\r\necho.\r\necho.\r\n\r\necho Affichage d'une ligne vide avec le point:\r\necho.\r\n\r\necho.\r\necho.\r\n\r\necho Affichage de la chaÃ®ne \"     /?  Print this help.\" sans le point:\r\necho     /?  Print this help.\r\n\r\necho.\r\necho.\r\n\r\necho Affichage de la chaÃ®ne \"     /?  Print this help.\" avec le point:\r\necho.    /?  Print this help.\r\n\r\necho.\r\necho.\r\npause\r\n\r\nDans l'affichage ci-dessous, on remarque que l'affichage d'une ligne vide sans le point renvoie l'Ã©tat de l'affichage standard contrairement Ã  celle avec un point. Si Ã  la place d'un retour Ã  la ligne, nous avions utilisÃ© plusieurs espaces, le rÃ©sultat aurait Ã©tÃ© le mÃªme, quel que soit le nombre d'espaces. En effet, l'interprÃ©teur n'Ã©value pas le nombre d'espaces entre deux constituantes d'une ligne de commande, il aurait donc considÃ©rÃ© qu'aucun paramÃ¨tre n'est fourni. Il en est de mÃªme avec la chaÃ®ne /? Print this help., l'interprÃ©teur considÃ¨re la sous-chaÃ®ne /? comme un paramÃ¨tre qui affiche l'aide en ligne de commande.\r\nEscape_str_in_echo_cmd\r\n\r\nLe tableau 2 rÃ©capitule les diffÃ©rents Ã©chappements que l'on vient de voir.\r\n\r\nÃ‰chappement\r\n\t\r\n\r\nDescription\r\n\r\n^\r\n\t\r\n\r\nPlacÃ© devant un des caractÃ¨res spÃ©ciaux, soit &amp;^|&lt;&gt;(), il signifie que le caractÃ¨re qui le suit fait partie de la chaÃ®ne et qu'il n'a rien Ã  voir avec la commande.\r\n\r\nPlacÃ© devant un retour Ã  la ligne, il signifie que la ligne suivante fait partie de la mÃªme commande.\r\n\r\n%\r\n\t\r\n\r\nPlacÃ© devant le caractÃ¨re % dans un script, il signifie que le caractÃ¨re qui le suit fait partie de la chaÃ®ne.\r\n\r\n\\\r\n\t\r\n\r\nPlacÃ© devant un des caractÃ¨res \\ et \" dans un paramÃ¨tre entre guillemets, il signifie que le caractÃ¨re qui le suit fait partie du paramÃ¨tre entre guillemets.\r\n\r\n.\r\n\t\r\n\r\nPlacÃ© immÃ©diatement aprÃ¨s la commande echo, il signifie que la chaÃ®ne qui le suit est une chaÃ®ne Ã  afficher et non un paramÃ¨tre de la commande echo.\r\n\r\nTableau 2 : Les Ã©chappements\r\nI-F. Les bogues de la commande Â« rem Â» et du prÃ©fixe Â« :: Â»\r\nâ–²\r\n\r\nUn problÃ¨me rÃ©current en batch scripting est que les remarques et commentaires (fournis via rem et ::) provoquent des bogues du fait d'une mauvaise utilisation. La commande rem et le prÃ©fixe :: prenant en paramÃ¨tre une chaÃ®ne de caractÃ¨res, ils attendent donc une chaÃ®ne de caractÃ¨res valide. Ainsi les Ã©chappements doivent Ãªtre utilisÃ©s pour les caractÃ¨res suivants : &amp; | ^ &lt; &gt; ( ) %.\r\nII. Les variables\r\nâ–²\r\n\r\nLes variables sont gÃ©rÃ©es via la commande set, il en existe deux types dont voici la liste :\r\n\r\n    les variables de type chaÃ®ne de caractÃ¨res ;\r\n    les variables de type nombre entier signÃ©.\r\n\r\nChaque type de variable est dÃ©clarÃ© et traitÃ© diffÃ©remment ; il est possible de les transtyper, c'est-Ã -dire de les passer d'un type Ã  l'autre, Ã  condition de respecter les rÃ¨gles suivantes :\r\n\r\n    une chaÃ®ne de caractÃ¨res ne pouvant Ãªtre transtypÃ©e en nombre que si elle ne contient que des chiffres ;\r\n    un nombre pourra toujours Ãªtre transtypÃ© en chaÃ®ne de caractÃ¨res (qui ne contiendra que des chiffres).\r\n\r\nLes variables sont accessibles via un identifiant qui leur est propre. Ainsi chaque fois qu'il sera fait mention de cet identifiant, l'interprÃ©teur sera capable de fournir la valeur associÃ©e. Cela peut Ãªtre fait en utilisant le caractÃ¨re % de part et d'autre de l'identifiant, on parle alors d'expansion de la variable. Par exemple avec la variable PATH (qui est une variable d'environnement : fournie par le systÃ¨me), pour obtenir sa valeur ; il faudrait utiliser la syntaxe %PATH% comme dans le script 8.\r\nScript 8\r\nSÃ©lectionnez\r\n1.\r\n2.\r\n3.\r\n\r\n@echo off\r\necho %PATH%\r\npause\r\n\r\nCe qui produirait un affichage similaire Ã  celui ci-dessous.\r\nPATH\r\n\r\nLes identifiants de variable ne sont pas sensibles Ã  la casse, c'est-Ã -dire que l'interprÃ©teur ne fait pas la diffÃ©rence entre majuscule et minuscule lorsqu'il expanse, crÃ©e ou modifie une variable. Ainsi les identifiants PATH, Path et path dÃ©signent une seule et mÃªme variable.\r\nII-A. Les variables d'environnement\r\nâ–²\r\n\r\nNous allons commencer par les variables d'environnement, elles sont toutes de type chaÃ®ne de caractÃ¨res. C'est le systÃ¨me d'exploitation qui dÃ©finit leurs valeurs soit parce que d'un systÃ¨me Ã  l'autre leurs valeurs peuvent Ãªtre diffÃ©rentes, soit parce que ces variables sont dÃ©finies dynamiquement lors de leur expansion. Cela permet d'accÃ©der Ã  des fichiers dont le chemin d'accÃ¨s pourrait ne pas Ãªtre le mÃªme d'une machine Ã  l'autre ou de pouvoir obtenir, par exemple, l'heure ou la date dont les valeurs sont modifiÃ©es en permanence.\r\n\r\nDans le tableau 3, vous trouverez la liste de ces variables. Dans la premiÃ¨re colonne, vous trouverez le nom de ces variables ; ces noms sont rÃ©servÃ©s par le systÃ¨me, et mÃªme s'il est possible de modifier leur valeur pendant l'exÃ©cution du script, les modifications apportÃ©es prendront fin en mÃªme temps que le script. De plus, dans certains cas, la modification de leur valeur peut entraÃ®ner une mauvaise Ã©valuation de l'environnement par le script. La deuxiÃ¨me colonne donne la description de la valeur renvoyÃ©e par la variable. Et enfin, la troisiÃ¨me colonne donne la compatibilitÃ© en fonction de la version du systÃ¨me. Dans cette colonne, il est fait mention de Â« systÃ¨mes NT Â», il s'agit de la Â« famille Â» du systÃ¨me d'exploitation. Les systÃ¨mes NT sont des systÃ¨mes reposant sur un noyau de type NT provenant du systÃ¨me Windows du mÃªme nom. Cette famille comprend au jour oÃ¹ sont Ã©crites ces lignes :\r\n\r\n    les systÃ¨mes Windows NT X.Y (oÃ¹ X est la rÃ©vision majeure et Y la rÃ©vision mineure) ;\r\n    les systÃ¨mes Windows 2000 ;\r\n    les systÃ¨mes Windows XP ;\r\n    les systÃ¨mes Windows Server 2003 ;\r\n    les systÃ¨mes Windows Vista ;\r\n    les systÃ¨mes Windows Server 2008 ;\r\n    les systÃ¨mes Windows 7 ;\r\n    les systÃ¨mes Windows Server 2012 ;\r\n    et les systÃ¨mes Windows 8.\r\n\r\nVariable\r\n\t\r\n\r\nDescription\r\n\t\r\n\r\nCompatibilitÃ©\r\n\r\nAllUsersProfile\r\n\t\r\n\r\nRenvoie le chemin d'accÃ¨s complet jusqu'au rÃ©pertoire des donnÃ©es utilisateurs communes Ã  tous les utilisateurs. Par dÃ©faut : %HomeDrive%\\ProgramData.\r\n\t\r\n\r\nDisponible sur tous les systÃ¨mes NT.\r\n\r\nAppData\r\n\t\r\n\r\nRenvoie le rÃ©pertoire commun des donnÃ©es d'application sous la forme\r\n%UserProfile%\\AppData\\Roaming.\r\n\t\r\n\r\nDisponible sur tous les systÃ¨mes NT.\r\n\r\nCD\r\n\t\r\n\r\nRenvoie le chemin d'accÃ¨s complet jusqu'au rÃ©pertoire dans lequel le script est en train de s'exÃ©cuter, ce rÃ©pertoire peut Ãªtre diffÃ©rent du rÃ©pertoire dans lequel le script s'est lancÃ© (si celui-ci a Ã©tÃ© Â« relocalisÃ© Â» au cours de son exÃ©cution).\r\n\t\r\n\r\nDisponible sur tous les systÃ¨mes NT.\r\n\r\nCmdCmdLine\r\n\t\r\n\r\nRenvoie la ligne de commande originale qui a appelÃ© l'interprÃ©teur de commande.\r\n\t\r\n\r\nDisponible sur tous les systÃ¨mes NT.\r\n\r\nCmdExtVersion\r\n\t\r\n\r\nRenvoie le numÃ©ro de version des extensions de commande du processeur de commande en cours.\r\n\t\r\n\r\nDisponible sur tous les systÃ¨mes NT.\r\n\r\nCommonProgramFiles\r\n\t\r\n\r\nRenvoie le chemin d'accÃ¨s complet jusqu'au rÃ©pertoire des fichiers communs aux applications 32bits sur les systÃ¨mes 32bits ou aux applications 64bits sur les systÃ¨mes 64bits, soit : %ProgramFiles%\\Common Files.\r\n\t\r\n\r\nDisponible sur tous les systÃ¨mes NT.\r\n\r\nCommonProgramFiles(x86)\r\n\t\r\n\r\nRenvoie le chemin d'accÃ¨s complet jusqu'au rÃ©pertoire des fichiers communs aux applications 32bits sur les systÃ¨mes 64bits :\r\n%ProgramFiles(x86)%\\Common Files.\r\n\t\r\n\r\nDisponible uniquement sur les systÃ¨mes NT 64bits.\r\n\r\nCommonProgramW6432\r\n\t\r\n\r\nRenvoie le chemin d'accÃ¨s complet jusqu'au rÃ©pertoire des fichiers communs aux applications 16 bits sur les systÃ¨mes 64bits et sur les systÃ¨mes 32bits Vista et supÃ©rieur : %ProgramW6432%\\Common Files.\r\n\t\r\n\r\nDisponible uniquement sur les systÃ¨mes NT 64bits et sur les systÃ¨mes 32bits Vista et supÃ©rieur.\r\n\r\nComputerName\r\n\t\r\n\r\nRenvoie le nom de l'ordinateur sur lequel le script est en train de s'exÃ©cuter.\r\n\t\r\n\r\nDisponible sur tous les systÃ¨mes NT.\r\n\r\nComSpec\r\n\t\r\n\r\nRenvoie le chemin d'accÃ¨s complet vers l'interprÃ©teur : %WinDir%\\system32\\cmd.exe.\r\n\t\r\n\r\nDisponible sur tous les systÃ¨mes NT.\r\n\r\nDate\r\n\t\r\n\r\nRenvoie la date actuelle en utilisant le mÃªme format que la commande date.\r\n\t\r\n\r\nDisponible sur tous les systÃ¨mes NT.\r\n\r\nErrorLevel\r\n\t\r\n\r\nRenvoie la valeur du code d'erreur en cours. Cette valeur est modifiÃ©e aprÃ¨s chaque ligne de commande, en fonction du rÃ©sultat de la commande. En gÃ©nÃ©ral, la variable ErrorLevel renvoie 1 ou plus en cas d'erreur de la derniÃ¨re commande et 0 si aucune erreur ne s'est produite. Cependant, il arrive que ce comportement varie selon les commandes, il est donc recommandÃ© de se reporter Ã  l'aide concernant ladite commande.\r\n\t\r\n\r\nDisponible sur tous les systÃ¨mes NT.\r\n\r\nFP_NO_HOST_CHECK\r\n\t\r\n\r\nN.C.\r\n\t\r\n\r\nDisponible sur tous les systÃ¨mes NT.\r\n\r\nHighestNumaNodeNumber\r\n\t\r\n\r\nRenvoie le numÃ©ro de nÅ“ud NUMA le plus Ã©levÃ© de l'ordinateur sur lequel s'exÃ©cute le script.\r\n\t\r\n\r\nDisponible uniquement sur les systÃ¨mes NT 64bits.\r\n\r\nHomeDrive\r\n\t\r\n\r\nRenvoie le point de montage de la partition qui accueille les rÃ©pertoires utilisateurs. Par dÃ©faut : C:.\r\n\t\r\n\r\nDisponible sur tous les systÃ¨mes NT.\r\n\r\nHomePath\r\n\t\r\n\r\nRenvoie le chemin d'accÃ¨s vers le rÃ©pertoire de l'utilisateur actuellement loguÃ©. Par dÃ©faut : \\Users\\%UserName%.\r\n\t\r\n\r\nDisponible sur tous les systÃ¨mes NT.\r\n\r\nLocalAppData\r\n\t\r\n\r\nRenvoie le rÃ©pertoire local des donnÃ©es d'application sous la forme : %UserProfile%\\AppData\\Local.\r\n\t\r\n\r\nDisponible sur tous les systÃ¨mes NT.\r\n\r\nLogonServer\r\n\t\r\n\r\nRenvoie l'URL locale du systÃ¨me d'exploitation sous la forme \\\\%ComputerName%.\r\n\t\r\n\r\nDisponible sur tous les systÃ¨mes NT.\r\n\r\nNumber_Of_Processors\r\n\t\r\n\r\nRenvoie le nombre de cÅ“urs logiques de l'ordinateur sur lequel le script est en train de s'exÃ©cuter.\r\n\t\r\n\r\nDisponible sur tous les systÃ¨mes NT.\r\n\r\nOS\r\n\t\r\n\r\nRenvoie le type de noyau sur lequel repose le systÃ¨me d'exploitation, sur les systÃ¨mes NT cette variable renverra toujours la chaÃ®ne Windows_NT.\r\n\t\r\n\r\nDisponible sur tous les systÃ¨mes NT.\r\n\r\nPath\r\n\t\r\n\r\nRenvoie la liste des rÃ©pertoires reconnus par le systÃ¨me comme contenant des exÃ©cutables, chaque rÃ©pertoire est listÃ© par son chemin d'accÃ¨s complet suffixÃ© par un point-virgule. Si un exÃ©cutable se trouve dans un des rÃ©pertoires de cette liste, il n'est pas nÃ©cessaire de fournir un chemin d'accÃ¨s complet pour l'appeler en ligne de commande.\r\n\t\r\n\r\nDisponible sur tous les systÃ¨mes NT.\r\n\r\nPathExt\r\n\t\r\n\r\nRenvoie la liste des extensions de fichier reconnues par le systÃ¨me comme Ã©tant des extensions de fichiers exÃ©cutables. Si une extension de fichier ne figure pas dans cette liste, alors le fichier ne peut Ãªtre appelÃ© en tant que commande.\r\n\t\r\n\r\nDisponible sur tous les systÃ¨mes NT.\r\n\r\nProcessor_Architecture\r\n\t\r\n\r\nRenvoie le type d'architecture (32/64bits) du processeur sur lequel s'exÃ©cute le script. Les valeurs possibles sont : X86 pour les processeurs 32bits, AMD64 pour les processeurs 64bits basÃ©s sur l'architecture x86 et IA64 pour les processeurs Itanium.\r\n\t\r\n\r\nDisponible sur tous les systÃ¨mes NT.\r\n\r\nProcessor_Identifier\r\n\t\r\n\r\nRenvoie une identification prÃ©cise du processeur sur lequel s'exÃ©cute le script. Cette identification est une chaÃ®ne de caractÃ¨res composÃ©e du type d'architecture suivi de la famille, du modÃ¨le, de la rÃ©vision et enfin du fabricant du processeur.\r\n\t\r\n\r\nDisponible sur tous les systÃ¨mes NT.\r\n\r\nProcessor_Level\r\n\t\r\n\r\nRenvoie une identification prÃ©cise de la famille de la micro-architecture du processeur.\r\n\t\r\n\r\nDisponible sur tous les systÃ¨mes NT.\r\n\r\nProcessor_Revision\r\n\t\r\n\r\nRenvoie une identification prÃ©cise du modÃ¨le et de la rÃ©vision du processeur sous forme d'une chaÃ®ne de caractÃ¨res reprÃ©sentant un nombre hexadÃ©cimal sur deux octets, le premier correspond au modÃ¨le et le second Ã  la rÃ©vision.\r\n\t\r\n\r\nDisponible sur tous les systÃ¨mes NT.\r\n\r\nProgramData\r\n\t\r\n\r\nRenvoie le rÃ©pertoire commun des donnÃ©es d'application 64bits sous la forme : %SystemDrive%\\ProgramData.\r\n\t\r\n\r\nDisponible uniquement sur les systÃ¨mes NT 64bits.\r\n\r\nProgramFiles\r\n\t\r\n\r\nRenvoie le chemin d'accÃ¨s complet vers le rÃ©pertoire Â« ProgramFiles Â». Ce rÃ©pertoire contient les applications 32bits sur les systÃ¨mes 32bits ou les applications 64bits sur les systÃ¨mes 64bits.\r\n\t\r\n\r\nDisponible sur tous les systÃ¨mes NT.\r\n\r\nProgramFiles(x86)\r\n\t\r\n\r\nRenvoie le chemin d'accÃ¨s complet vers le rÃ©pertoire Â« ProgramFiles(x86) Â». Ce rÃ©pertoire contient les applications 32bits sur les systÃ¨mes 64bits.\r\n\t\r\n\r\nDisponible uniquement sur les systÃ¨mes NT 64bits.\r\n\r\nProgramW6432\r\n\t\r\n\r\nRenvoie le chemin d'accÃ¨s complet vers le rÃ©pertoire Â« ProgramW6432 Â». Ce rÃ©pertoire contient les applications 16bits sur les systÃ¨mes 64bits et sur les systÃ¨mes 32bits Vista et supÃ©rieur.\r\n\t\r\n\r\nDisponible sur les systÃ¨mes NT 32 et 64bits Vista et supÃ©rieur.\r\n\r\nPrompt\r\n\t\r\n\r\nRenvoie la chaÃ®ne configurÃ©e pour l'affichage standard, par dÃ©faut : $P$G. Voir l'aide de la commande prompt pour plus d'information : prompt /?.\r\n\t\r\n\r\nDisponible sur tous les systÃ¨mes NT.\r\n\r\nPSModulePath\r\n\t\r\n\r\nRenvoie le chemin d'accÃ¨s complet vers les modules PowerShell.\r\n\t\r\n\r\nDisponible uniquement sur les systÃ¨mes Vista et supÃ©rieur. (XP avec mise Ã  jour KB926140)\r\n\r\nPublic\r\n\t\r\n\r\nRenvoie le chemin d'accÃ¨s complet vers le rÃ©pertoire des documents publics sous la forme %HomeDrive%\\Users\\Public.\r\n\t\r\n\r\nDisponible uniquement sur les systÃ¨mes Vista et supÃ©rieur.\r\n\r\nRandom\r\n\t\r\n\r\nRenvoie un nombre alÃ©atoire compris entre 0 et 32767.\r\n\t\r\n\r\nDisponible sur tous les systÃ¨mes NT.\r\n\r\nSessionName\r\n\t\r\n\r\nRenvoie le nom de la session en cours. Par dÃ©faut : Console.\r\n\t\r\n\r\nDisponible sur tous les systÃ¨mes NT.\r\n\r\nSystemDrive\r\n\t\r\n\r\nRenvoie le point de montage de la partition sur laquelle est installÃ© le systÃ¨me d'exploitation.\r\n\t\r\n\r\nDisponible sur tous les systÃ¨mes NT.\r\n\r\nSystemRoot\r\n\t\r\n\r\nRenvoie le chemin d'accÃ¨s complet vers le systÃ¨me d'exploitation sous la forme\r\n%SystemDrive%\\Windows.\r\n\t\r\n\r\nDisponible sur tous les systÃ¨mes NT.\r\n\r\nTemp\r\n\t\r\n\r\nRenvoie le chemin d'accÃ¨s complet jusqu'au rÃ©pertoire des fichiers temporaires de l'utilisateur. Par dÃ©faut : %UserProfile%\\AppData\\Local\\Temp.\r\n\t\r\n\r\nDisponible sur tous les systÃ¨mes NT.\r\n\r\nTime\r\n\t\r\n\r\nRenvoie l'heure en cours en utilisant le mÃªme format que la commande time.\r\n\t\r\n\r\nDisponible sur tous les systÃ¨mes NT.\r\n\r\nTmp\r\n\t\r\n\r\nIdentique Ã  Temp.\r\n\t\r\n\r\nDisponible sur tous les systÃ¨mes NT.\r\n\r\nUserDomain\r\n\t\r\n\r\nRenvoie le nom de domaine de l'ordinateur sur lequel s'exÃ©cute le script. Si le systÃ¨me n'appartient pas Ã  un domaine alors le nom de domaine sera le nom de l'ordinateur sur lequel s'exÃ©cute le script.\r\n\t\r\n\r\nDisponible sur tous les systÃ¨mes NT.\r\n\r\nUserName\r\n\t\r\n\r\nRenvoie le nom de l'utilisateur actuellement loguÃ©.\r\n\t\r\n\r\nDisponible sur tous les systÃ¨mes NT.\r\n\r\nUserProfile\r\n\t\r\n\r\nRenvoie le chemin d'accÃ¨s complet vers le rÃ©pertoire utilisateur de l'utilisateur actuellement loguÃ© sous la forme : %HomeDrive%\\Users\\%UserName%.\r\n\t\r\n\r\nDisponible sur tous les systÃ¨mes NT.\r\n\r\nWinDir\r\n\t\r\n\r\nRenvoie le chemin d'accÃ¨s complet jusqu'au rÃ©pertoire d'installation du systÃ¨me. Par dÃ©faut : %SystemDrive%\\Windows.\r\n\t\r\n\r\nDisponible sur tous les systÃ¨mes NT.\r\n\r\nTableau 3 : les variables d'environnement\r\nII-B. La commande Â« set Â»\r\nâ–²\r\n\r\nLa commande set gÃ¨re les variables dans l'interprÃ©teur, elle permet :\r\n\r\n    de crÃ©er une variable ;\r\n    d'attribuer une valeur Ã  une variable ;\r\n    de modifier le contenu d'une variable ;\r\n    de supprimer le contenu d'une variable ;\r\n    d'effectuer des opÃ©rations mathÃ©matiques ou logiques entre des nombres ;\r\n    de rÃ©cupÃ©rer la saisie d'un utilisateur pour la placer dans une variable ;\r\n    et de transtyper le contenu d'une variable.\r\n\r\nVoici la syntaxe de la commande set.\r\n\r\nAttribue Ã  la variable une valeur sous forme de chaÃ®ne de caractÃ¨res (oÃ¹ &lt;variable&gt; est son identifiant et &lt;chaÃ®ne&gt; est une chaÃ®ne de caractÃ¨res).\r\n\r\nset [\"]&lt;variable&gt;=&lt;chaÃ®ne&gt;[\"] \r\n\r\nAttribue Ã  la variable une valeur sous forme d'un nombre entier signÃ© (oÃ¹ &lt;expression&gt; est une expression numÃ©rique Ã  Ã©valuer : dÃ©taillÃ© par la suite).\r\n\r\nset /a [\"]&lt;expression&gt;[\"] \r\n\r\nAttribue Ã  la variable une valeur, saisie par l'utilisateur, sous forme de chaÃ®ne de caractÃ¨res aprÃ¨s l'affichage de la chaÃ®ne d'invite si elle est spÃ©cifiÃ©e (oÃ¹ &lt;variable&gt; est son identifiant et oÃ¹ &lt;chaÃ®ne_invite&gt; est une chaÃ®ne de caractÃ¨res affichÃ©e Ã  l'utilisateur afin de l'inviter Ã  saisir une chaÃ®ne au clavier).\r\n\r\nset /p [\"]&lt;variable&gt;=[&lt;chaÃ®ne_invite&gt;][\"] \r\n\r\nSupprime la valeur de la variable de la mÃ©moire, son identifiant reste indexÃ© par l'interprÃ©teur, mais sa valeur est indÃ©finie.\r\n\r\nset [\"]&lt;variable&gt;=[\"] \r\n\r\nVoici les rÃ¨gles usuelles de la commande set :\r\n\r\n    Si la commande set est employÃ©e sans paramÃ¨tre, elle affiche les variables dÃ©finies dans le contexte courant (dÃ©taillÃ© par la suite).\r\n    Si elle est utilisÃ©e avec comme paramÃ¨tre une chaÃ®ne (ou un nom de variable), sans valeur ni signe Ã©gal ; alors elle affiche la variable dont le nom correspond Ã  la chaÃ®ne donnÃ©e en paramÃ¨tre et/ou les variables ayant un nom commenÃ§ant par la chaÃ®ne donnÃ©e en paramÃ¨tre.\r\n    Si elle est utilisÃ©e avec un nom de variable et un signe Ã©gal sans valeur alors le contenu de la variable est vidÃ© de la mÃ©moire, il est possible de tester si une variable est dÃ©finie, mais nous aborderons ce point au prochain chapitre.\r\n    Toute chaÃ®ne non numÃ©rique dans l'expression Ã  Ã©valuer est traitÃ©e comme un identifiant de variable et est convertie en nombre avant d'Ãªtre utilisÃ©e (dans son utilisation avec le paramÃ¨tre /a), si la variable n'existe pas ou qu'elle est indÃ©finie, elle prend comme valeur 0.\r\n    Une expression numÃ©rique Ã  Ã©valuer devrait toujours Ãªtre placÃ©e entre guillemets afin de permettre l'utilisation des opÃ©rateurs logiques et des opÃ©rateurs de groupement.\r\n\r\nVoyons plus en dÃ©tail le fonctionnement de la commande set avec le script 9.\r\nScript 9\r\nSÃ©lectionnez\r\n1.\r\n2.\r\n3.\r\n4.\r\n5.\r\n6.\r\n7.\r\n8.\r\n9.\r\n10.\r\n11.\r\n12.\r\n13.\r\n14.\r\n15.\r\n16.\r\n17.\r\n18.\r\n19.\r\n20.\r\n\r\n@echo off\r\nset VAR_Espace_Un=\"Ma chaÃ®ne avec des espaces\"\r\nset VAR_Espace_Deux\"=Ma chaÃ®ne avec des espaces\"\r\nset \"VAR_Espace_Trois=Ma chaÃ®ne avec des espaces\"\r\n::il y a quatre espaces Ã  la fin de la ligne suivante\r\nset /p VAR_Saisie_Un=    ma saisie un:    \r\nset /p \"VAR_Saisie_Deux=    ma saisie deux:    \"\r\nset /a VAR_Calcul_Un=1+10\r\nset /a VAR_Calcul_Deux\"=2+20\"\r\nset /a \"VAR_Calcul_Trois=3+30\"\r\necho.\r\necho %VAR_Espace_Un%\r\necho %VAR_Espace_Deux%\r\necho %VAR_Espace_Trois%\r\necho.\r\nset VAR_Saisie\r\necho.\r\nset VAR_Calcul\r\necho.\r\npause\r\n\r\nVariable_Quote\r\n\r\nComme vous pouvez le constater, les guillemets occupent une place prÃ©pondÃ©rante dans ce script ; observez bien oÃ¹ ils sont placÃ©s. De la ligne 2 Ã  la ligne 4, les valeurs des variables sont des chaÃ®nes de caractÃ¨res avec des espaces. La dÃ©claration de la variable VAR_Espace_Un se fait avec des guillemets placÃ©s de part et d'autre de la chaÃ®ne, la dÃ©claration de la variable VAR_Espace_Deux se fait avec des guillemets : un placÃ© avant le signe Ã©gal et l'autre Ã  la fin de la chaÃ®ne ; la dÃ©claration de la troisiÃ¨me variable VAR_Espace_Trois se fait avec des guillemets : un placÃ© avant le nom de la variable et l'autre Ã  la fin de la ligne. Si on se reporte Ã  l'affichage obtenu, on remarque que la premiÃ¨re et la troisiÃ¨me variables affichent une sortie correcte ; la deuxiÃ¨me variable quant Ã  elle ne fonctionne pas ; on dÃ©duit donc facilement que si les guillemets s'ouvrent avant l'identifiant de la variable et se ferment aprÃ¨s la valeur de la variable, ils ne font pas partie de la variable ; et si les guillemets s'ouvrent avant la valeur de la variable et se ferment aprÃ¨s la valeur de la variable, ils font partie de la variable.\r\n\r\nLes deux saisies de l'utilisateur donnent aussi un rÃ©sultat intÃ©ressant, la ligne de commande qui dÃ©clare VAR_Saisie_Un n'utilise pas de guillemets ; par contre la ligne de commande qui dÃ©clare VAR_Saisie_Deux, elle, en utilise. Lors de l'affichage des invites de saisie utilisateur, les espaces se trouvant avant les chaÃ®nes d'invites ont disparu, et ceux se trouvant aprÃ¨s sont affichÃ©s. On en dÃ©duit que les espaces en dÃ©but de ligne sont ignorÃ©s et que ceux de la fin sont considÃ©rÃ©s comme faisant partie de la chaÃ®ne d'invite.\r\n\r\nEn ce qui concerne les variables VAR_Calcul_XXX, elles donnent toutes un rÃ©sultat valide cependant il est toujours prÃ©fÃ©rable de respecter les rÃ¨gles de syntaxe ; c'est-Ã -dire toujours mettre l'expression numÃ©rique entre guillemets. Cela sera utile dans la suite du chapitre.\r\nII-C. Les variables de type chaÃ®ne de caractÃ¨res\r\nâ–²\r\n\r\nCe sont, Ã  mon sens, les plus utilisÃ©es en batch. Ce sont toutes les variables composÃ©es de caractÃ¨res alphanumÃ©riques et autres caractÃ¨res. Les chaÃ®nes de caractÃ¨res sont dÃ©clarÃ©es via la commande set et il n'est pas nÃ©cessaire d'utiliser des guillemets pour que les espaces soient pris en compte comme faisant partie de la chaÃ®ne, et ce, oÃ¹ qu'ils soient placÃ©s dans la chaÃ®ne.\r\n\r\nElles offrent aussi d'autres possibilitÃ©s comme la substitution de chaÃ®ne dans l'expansion de la variable. Ainsi avec la syntaxe suivante, il est possible de modifier la variable lors de son expansion sans que cela n'altÃ¨re sa valeur (oÃ¹ &lt;variable&gt; est l'identifiant de la variable, &lt;old_string&gt; est la chaÃ®ne Ã  remplacer et &lt;new_string&gt; est la chaÃ®ne Ã  insÃ©rer Ã  la place de &lt;old_string&gt;). Exemple avec le script 10.\r\n\r\n%&lt;variable&gt;:&lt;old_string&gt;=&lt;new_string&gt;% \r\nScript 10\r\nSÃ©lectionnez\r\n1.\r\n2.\r\n3.\r\n4.\r\n5.\r\n6.\r\n\r\n@echo off\r\nset \"X=une chaÃ®ne\"\r\necho La variable avec substitution: %X:une=ma%\r\necho La valeur rÃ©elle de la variable: %X%\r\necho.\r\npause\r\n\r\nVariable_Parse_String_0\r\n\r\n&lt;old_string&gt; peut aussi Ãªtre une chaÃ®ne prÃ©cÃ©dÃ©e d'un astÃ©risque (*), dans ce cas, la substitution commencera du dÃ©but de la valeur de la variable et se finira aprÃ¨s la premiÃ¨re occurrence de la chaÃ®ne spÃ©cifiÃ©e dans la substitution. Exemple avec le script 11.\r\nScript 11\r\nSÃ©lectionnez\r\n1.\r\n2.\r\n3.\r\n4.\r\n5.\r\n\r\n@echo off\r\nset \"X=string\"\r\necho Substitution avec astÃ©risque: %X:*t=d%\r\necho.\r\npause\r\n\r\nVariable_Parse_String_1\r\n\r\nIl ne faut jamais utiliser un astÃ©risque seul dans la substitution, sans quoi, l'interprÃ©teur de commande se fermera sans autres formes de procÃ¨s. L'astÃ©risque en fin de chaÃ®ne ne provoque pas d'erreur, mais ne permet pas la substitution, la variable est expansÃ©e avec sa valeur d'origine.\r\n\r\nLa substitution ne modifie pas la valeur de la variable, elle transforme juste la variable au moment de son expansion. Pour modifier la valeur de la variable, il faut le faire avec la commande set. Exemple avec le script 12.\r\nScript 12\r\nSÃ©lectionnez\r\n1.\r\n2.\r\n3.\r\n4.\r\n5.\r\n6.\r\n\r\n@echo off\r\nset \"VAR=ma chaÃ®ne\"\r\necho %VAR%\r\nset \"VAR=%VAR:chaÃ®ne=voiture%\"\r\necho %VAR%\r\npause\r\n\r\nVariable_Parse_String_2.2\r\n\r\nVous pouvez aussi ne dÃ©velopper qu'une partie d'une chaÃ®ne en sÃ©lectionnant les caractÃ¨res voulus. Cela se fait via la syntaxe suivante (oÃ¹ &lt;variable&gt; est l'identifiant de la variable, &lt;index&gt; est l'index du premier caractÃ¨re en partant de 0 et &lt;longueur&gt; est la longueur de la sÃ©lection). Exemple avec le script 13.\r\n\r\n%&lt;variable&gt;:~&lt;index&gt;,&lt;longueur&gt;%\r\nScript 13\r\nSÃ©lectionnez\r\n1.\r\n2.\r\n3.\r\n4.\r\n5.\r\n6.\r\n\r\n@echo off\r\nset \"VAR=ma chaÃ®ne\"\r\necho %VAR:~0,2%\r\nset \"VAR=%VAR:~3,6%\"\r\necho %VAR%\r\npause\r\n\r\nImage non disponible\r\n\r\nSi la &lt;longueur&gt; n'est pas spÃ©cifiÃ©e, tout le reste de la chaÃ®ne est sÃ©lectionnÃ©, en partant du caractÃ¨re fourni en &lt;index&gt;. Si une des valeurs donnÃ©es est nÃ©gative, alors la valeur utilisÃ©e est la longueur totale de la chaÃ®ne ajoutÃ©e Ã  la valeur nÃ©gative.\r\nScript 14\r\nSÃ©lectionnez\r\n1.\r\n2.\r\n3.\r\n4.\r\n5.\r\n6.\r\n7.\r\n8.\r\n9.\r\n10.\r\n11.\r\n\r\n@echo off\r\nrem Dans ce script, les caractÃ¨res ^^ servent Ã  Ã©chapper les caractÃ¨res spÃ©ciaux.\r\nset \"VAR=ma chaÃ®ne\"\r\nrem longueur de var :  9 caractÃ¨res\r\necho %VAR:~-6%\r\nrem   9+^(-6^) = 9-6 = 3\r\nrem la chaÃ®ne sera dÃ©veloppÃ©e Ã  partir de l'index 3 et jusqu'Ã  la fin ^(aucune longueur n'est donnÃ©e^).\r\necho %VAR:~0,-7%\r\nrem    9+^(-7^) = 9-7 = 2\r\nrem la chaÃ®ne sera dÃ©veloppÃ©e Ã  partir de l'index 0 et sur une longueur de 2 caractÃ¨res\r\npause\r\n\r\nVariable_Parse_String_2\r\nII-D. Les variables de type nombre entier signÃ©\r\nâ–²\r\n\r\nLa commande set /a permet d'utiliser les nombres entiers signÃ©s allant de -2 147 483 648 Ã  +2 147 483 647 (codÃ©s sur 32bits). Si vous n'utilisez pas le paramÃ¨tre /a dans la commande, alors la sÃ©quence de chiffres sera considÃ©rÃ©e comme Ã©tant une chaÃ®ne de caractÃ¨res, et non un nombre. La syntaxe de la commande set /a est la suivante.\r\n\r\nset /a &lt;expression&gt; \r\n\r\n&lt;expression&gt; utilise, quant Ã  elle, la syntaxe suivante.\r\n\r\n[\"]&lt;identifiant&gt;[&lt;attribution&gt;[{&lt;immÃ©diate&gt;|&lt;sous-expression&gt;}]][\"] \r\n\r\nLes expressions numÃ©riques doivent Ãªtre placÃ©es entre des guillemets si elles contiennent des opÃ©rateurs logiques ou de groupement (dÃ©taillÃ© plus loin dans ce chapitre). Ces diffÃ©rentes constituantes sont :\r\n\r\n    &lt;identifiant&gt; qui est l'identifiant de la variable de destination ;\r\n    &lt;attribution&gt; qui est l'opÃ©rateur d'attribution de l'expression, comme le signe Ã©gal qui effectue l'opÃ©ration d'attribuer une valeur Ã  une variable, d'autres opÃ©rateurs d'attribution seront dÃ©taillÃ©s dans cette section ;\r\n    puis soit &lt;immÃ©diate&gt; qui est une valeur immÃ©diate (un nombre quelconque), soit &lt;sous-expression&gt; qui est une sous-expression, ces derniÃ¨res seront dÃ©taillÃ©es dans le reste de cette section.\r\n\r\nVous pouvez spÃ©cifier plusieurs expressions en les sÃ©parant par des virgules.\r\nScript 15\r\nSÃ©lectionnez\r\n\r\n@echo off\r\nset /a \"VAR1=1\", \"VAR2=2\"\r\necho VAR1: %VAR1%\r\necho VAR2: %VAR2%\r\npause\r\n\r\nImage non disponible\r\n\r\nLes chaÃ®nes de caractÃ¨res prÃ©sentes dans l'expression sont considÃ©rÃ©es comme des variables et sont expansÃ©es (Ã  l'exception de l'identifiant de la variable de destination), cela permet de faire des opÃ©rations sur des variables sans avoir Ã  utiliser de symbole % pour leur expansion.\r\nScript 16\r\nSÃ©lectionnez\r\n\r\n@echo off\r\nset /a \"VAR1=1\"\r\nset /a \"VAR2=VAR1\"\r\necho VAR1: %VAR1%\r\necho VAR2: %VAR2%\r\npause\r\n\r\nSet_a_var_unexpand\r\n\r\nSi un nom de variable inexistante ou indÃ©finie est utilisÃ©, alors elle prend la valeur 0.\r\nScript 17\r\nSÃ©lectionnez\r\n1.\r\n2.\r\n3.\r\n4.\r\n5.\r\n\r\n@echo off\r\nrem La variable VAR1 n'existe pas.\r\nset /a \"VAR2=VAR1\"\r\necho VAR2: %VAR2%\r\npause\r\n\r\nImage non disponible\r\n\r\nLes sous-expressions sont constituÃ©es de nombres, d'opÃ©rateurs et Ã©ventuellement de parenthÃ¨ses, ces derniÃ¨res s'utilisent de la mÃªme maniÃ¨re qu'en mathÃ©matiques et elles n'ont pas besoin d'Ãªtre Ã©chappÃ©es si, et seulement si, les guillemets sont utilisÃ©s. Toutes les constituantes d'une sous-expression sont soumises Ã  la prÃ©sÃ©ance, c'est-Ã -dire l'ordre dans lequel les diverses constituantes vont Ãªtre Ã©valuÃ©es. L'ordre de prÃ©sÃ©ance utilisÃ© est le suivant (dans l'ordre dÃ©croissant d'Ã©valuation) :\r\n\r\n    le groupement soit ( ) ;\r\n    les opÃ©rateurs unaires ! ~ - ;\r\n    les opÃ©rateurs arithmÃ©tiques * / % ;\r\n    les opÃ©rateurs arithmÃ©tiques + - ;\r\n    le dÃ©calage logique &lt;&lt; &gt;&gt; ;\r\n    le ET au niveau du bit &amp; ;\r\n    le OU exclusif au niveau du bit ^ ;\r\n    le OU inclusif au niveau du bit | ;\r\n    l''attribution = *= /= %= += -= &amp;= ^= |= &lt;&lt;= &gt;&gt;= ;\r\n    le sÃ©parateur d'expression ,.\r\n\r\nIl faut Ã©galement noter que l'utilisation du nombre -2 147 483 648 tel quel dans une expression provoque une erreur, c'est dÃ» au transtypage effectuÃ© par l'interprÃ©teur. Ce dernier Ã©value d'abord la chaÃ®ne 2 147 483 648 afin de la transtyper puis lui applique l'opÃ©rateur unaire -. Mais comme le nombre 2 147 483 648 va au-delÃ  de la dÃ©finition d'un nombre sur 32bits, l'opÃ©ration gÃ©nÃ¨re une erreur, exemple avec le script suivant.\r\nScript 18\r\nSÃ©lectionnez\r\n1.\r\n2.\r\n3.\r\n4.\r\n5.\r\n6.\r\n7.\r\n8.\r\n9.\r\n10.\r\n\r\n@echo off\r\necho Nombre brute:\r\nset /a \"ParseError=-2147483648\"\r\necho %ParseError%\r\necho.\r\necho Nombre avec Ã©valuation:\r\nset /a \"ParseError=-2147483647 - 1\"\r\necho %ParseError%\r\necho.\r\npause\r\n\r\nParse_Error\r\n\r\nUne autre mÃ©thode qui fonctionne pour ce cas est la suivante.\r\nScript 19\r\nSÃ©lectionnez\r\n1.\r\n2.\r\n3.\r\n4.\r\n5.\r\n\r\n@echo off\r\nset \"SInt32=-2147483648\"\r\nset /a \"SInt32\"\r\necho %SInt32%\r\npause\r\n\r\nTransTypage\r\nII-D-1. Les opÃ©rations arithmÃ©tiques\r\nâ–²\r\n\r\nLa commande set /a prend en charge les cinq opÃ©rations arithmÃ©tiques suivantes :\r\n\r\n    l'addition ;\r\n    la soustraction ;\r\n    la multiplication ;\r\n    la division ;\r\n    et le modulo (le modulo est une opÃ©ration qui sert Ã  rÃ©cupÃ©rer le reste d'une division).\r\n\r\nOpÃ©rateur arithmÃ©tique\r\n\t\r\n\r\nOpÃ©rateur d'attribution\r\n\t\r\n\r\nOpÃ©ration effectuÃ©e\r\n\r\n+\r\n\t\r\n\r\n+=\r\n\t\r\n\r\nAddition\r\n\r\n-\r\n\t\r\n\r\n-=\r\n\t\r\n\r\nSoustraction\r\n\r\n*\r\n\t\r\n\r\n*=\r\n\t\r\n\r\nMultiplication\r\n\r\n/\r\n\t\r\n\r\n/=\r\n\t\r\n\r\nDivision\r\n\r\n%\r\n\t\r\n\r\n%=\r\n\t\r\n\r\nModulo\r\n\r\nTableau 4 : OpÃ©rations arithmÃ©tiques\r\n\r\nUne note particuliÃ¨re pour le modulo : dans un script de commande, le symbole du modulo % doit Ãªtre prÃ©fixÃ© du caractÃ¨re d'Ã©chappement %. Dans ce cas, c'est un piÃ¨ge dans lequel le novice peut se perdre, le premier symbole % est un caractÃ¨re d'Ã©chappement qui permet au deuxiÃ¨me symbole %, le modulo, d'Ãªtre pris en compte Ã  l'exÃ©cution du script. Dans l'interprÃ©teur de commande, le modulo (%) n'as pas besoin d'Ãªtre Ã©chappÃ©, c'est une spÃ©cificitÃ© du script. Ainsi la commande suivante fonctionne dans l'interprÃ©teur.\r\n\r\nset /a \"Mod=5 % 2\" \r\n\r\nAlors que celle-ci ne fonctionne pas.\r\n\r\nset /a \"Mod=5 %% 2\" \r\nModulo_0\r\n\r\nDans un script, par contre, c'est l'inverse.\r\nScript 20\r\nSÃ©lectionnez\r\n1.\r\n2.\r\n3.\r\n4.\r\n5.\r\n6.\r\n\r\n@echo off\r\nset /a \"Mod=5 % 2\"\r\necho Mod1: %Mod%\r\nset /a \"Mod=5 %% 2\"\r\necho Mod2: %Mod%\r\npause\r\n\r\nModulo_1\r\n\r\nAinsi, les opÃ©rations arithmÃ©tiques s'utilisent de maniÃ¨re Â« classique Â» dans les sous-expressions. Si une variable inexistante ou indÃ©finie est utilisÃ©e dans une sous-expression, elle prend la valeur 0, exemple avec le script 21.\r\nScript 21\r\nSÃ©lectionnez\r\n1.\r\n2.\r\n3.\r\n4.\r\n5.\r\n6.\r\n7.\r\n8.\r\n9.\r\n10.\r\n11.\r\n12.\r\n13.\r\n\r\n@echo off\r\nset /a \"Un=1\"\r\nset /a \"Deux=1 + 1\"\r\nset /a \"Trois=4 - 1\"\r\nset /a \"Quatre=2 * 2\"\r\nset /a \"Cinq=10 / 2\"\r\nset /a \"Six=26 %% 10\"\r\nset /a \"Sept=(( 2 + 1 ) * 2 ) + 1\"\r\nrem La variable Dix n'existe pas.\r\nset /a \"Huit=8+Dix\",\"Neuf=10-Un\"\r\necho %Un%, %Deux%, %Trois%, %Quatre%, %Cinq%, %Six%, %Sept%, %Huit%, %Neuf%\r\necho.\r\npause\r\n\r\nImage non disponible\r\n\r\nL'attribution permet d'effectuer des opÃ©rations sur des variables existantes, si une variable inexistante ou indÃ©finie est utilisÃ©e, elle prend la valeur 0.\r\nScript 22\r\nSÃ©lectionnez\r\n1.\r\n2.\r\n3.\r\n4.\r\n5.\r\n6.\r\n7.\r\n8.\r\n9.\r\n10.\r\n11.\r\n12.\r\n\r\n@echo off\r\nset /a \"Attrib1=1\",\"Attrib2=2\",\"Attrib3=3\",\"Attrib4=4\",\"Attrib5=5\"\r\nrem La variable Attrib0 n'existe pas.\r\nset /a \"Attrib0+=1\"\r\nset /a \"Attrib1+=1\"\r\nset /a \"Attrib2*=2\"\r\nset /a \"Attrib3-=2\"\r\nset /a \"Attrib4/=2\"\r\nset /a \"Attrib5%%=2\"\r\necho %Attrib0%, %Attrib1%, %Attrib2%, %Attrib3%, %Attrib4%, %Attrib5%\r\necho.\r\npause\r\n\r\nVariable_Attribution\r\nII-D-2. Les opÃ©rations logiques\r\nâ–²\r\n\r\nElles ne peuvent s'effectuer que sur des nombres et suivent les rÃ¨gles de l'algÃ¨bre de Boole. Les opÃ©rations logiques prises en charge par la commande set /a possÃ¨dent, elles aussi, des opÃ©rateurs d'attribution. Exemple avec le script 23.\r\n\r\nOpÃ©rateur logique\r\n\t\r\n\r\nOpÃ©rateur d'attribution\r\n\t\r\n\r\nDescription\r\n\r\n&amp;\r\n\t\r\n\r\n&amp;=\r\n\t\r\n\r\nET logique au niveau du bit. (Bitwise AND)\r\n\r\n^\r\n\t\r\n\r\n^=\r\n\t\r\n\r\nOU exclusif au niveau du bit. (Bitwise XOR)\r\n\r\n|\r\n\t\r\n\r\n|=\r\n\t\r\n\r\nOU inclusif au niveau du bit. (Bitwise OR)\r\n\r\n&lt;&lt;\r\n\t\r\n\r\n&lt;&lt;=\r\n\t\r\n\r\nDÃ©calage logique vers la gauche. Le bit entrant est Ã  zÃ©ro (pour l'Ã©lÃ©vation par puissances de deux).\r\n\r\n&gt;&gt;\r\n\t\r\n\r\n&gt;&gt;=\r\n\t\r\n\r\nDÃ©calage logique vers la droite. Le bit entrant est Ã©gal au bit de signe (pour la propagation du bit de signe).\r\n\r\nTableau 5 : Les opÃ©rateurs logiques\r\nScript 23\r\nSÃ©lectionnez\r\n\r\n@echo off\r\nset /a \"Val1=-2147483647 - 1\"\r\nset /a \"Val2=1\"\r\nset /a \"Val1SwitchL01=Val1&lt;&lt;1\",\"Val1SwitchL15=Val1&lt;&lt;15\",\"Val1SwitchL31=Val1&lt;&lt;31\"\r\nset /a \"Val2SwitchL01=Val2&lt;&lt;1\",\"Val2SwitchL15=Val2&lt;&lt;15\",\"Val2SwitchL31=Val2&lt;&lt;31\"\r\nset /a \"Val1SwitchR01=Val1&gt;&gt;1\",\"Val1SwitchR15=Val1&gt;&gt;15\",\"Val1SwitchR31=Val1&gt;&gt;31\"\r\nset /a \"Val2SwitchR01=Val2&gt;&gt;1\",\"Val2SwitchR15=Val2&gt;&gt;15\",\"Val2SwitchR31=Val2&gt;&gt;31\"\r\nset /a \"Val1AttribSwitchR=Val1\",\"Val1AttribSwitchR&gt;&gt;=15\"\r\nset /a \"Val2AttribSwitchL=Val2\",\"Val2AttribSwitchL&lt;&lt;=15\"\r\necho %Val1% ^&lt;^&lt; 1: %Val1SwitchL01%\r\necho %Val1% ^&lt;^&lt; 15: %Val1SwitchL15%\r\necho %Val1% ^&lt;^&lt; 31: %Val1SwitchL31%\r\necho.\r\necho %Val2% ^&lt;^&lt; 1: %Val2SwitchL01%\r\necho %Val2% ^&lt;^&lt; 15: %Val2SwitchL15%\r\necho %Val2% ^&lt;^&lt; 31: %Val2SwitchL31%\r\necho.\r\necho %Val1% ^&gt;^&gt; 1: %Val1SwitchR01%\r\necho %Val1% ^&gt;^&gt; 15: %Val1SwitchR15%\r\necho %Val1% ^&gt;^&gt; 31: %Val1SwitchR31%\r\necho.\r\necho %Val2% ^&gt;^&gt; 1: %Val2SwitchR01%\r\necho %Val2% ^&gt;^&gt; 15: %Val2SwitchR15%\r\necho %Val2% ^&gt;^&gt; 31: %Val2SwitchR31%\r\necho.\r\necho %Val1% ^&gt;^&gt;= 15: %Val1AttribSwitchR%\r\necho %Val2% ^&lt;^&lt;= 15: %Val2AttribSwitchL%\r\necho.\r\nset /a \"Val3=1431655765\"\r\nset /a \"Val4=-858993460\"\r\nset /a \"Val3LogicalOrVal4=Val3 | Val4\"\r\nset /a \"Val3LogicalXorVal4=Val3 ^ Val4\"\r\nset /a \"Val3LogicalAndVal4=Val3 &amp; Val4\"\r\nset /a \"Val3AttribOrVal4=Val3\",\"Val3AttribOrVal4|=Val4\"\r\nset /a \"Val3AttribXorVal4=Val3\",\"Val3AttribXorVal4^=Val4\"\r\nset /a \"Val3AttribAndVal4=Val3\",\"Val3AttribAndVal4&amp;=Val4\"\r\necho %Val3% ^| %Val4%: %Val3LogicalOrVal4%\r\necho %Val3% ^|= %Val4%: %Val3AttribOrVal4%\r\necho.\r\necho %Val3% ^^ %Val4%: %Val3LogicalXorVal4%\r\necho %Val3% ^^= %Val4%: %Val3AttribXorVal4%\r\necho.\r\necho %Val3% ^&amp; %Val4%: %Val3LogicalAndVal4%\r\necho %Val3% ^&amp;= %Val4%: %Val3AttribAndVal4%\r\necho.\r\npause\r\n\r\nVariable_AlgBool\r\nII-D-3. Les opÃ©rateurs unaires\r\nâ–²\r\n\r\nN.B. : Dans les sections II.D.3, II.E et II.F de ce document, sont abordÃ©s diffÃ©rents concepts de reprÃ©sentation numÃ©rique communÃ©ment utilisÃ©s en informatique, tels que :\r\n\r\n    l'Ã©criture de nombre en binaire ;\r\n    l'Ã©criture de nombre en hexadÃ©cimal ;\r\n    l'Ã©criture de nombre en octal ;\r\n    la reprÃ©sentation des nombres en complÃ©ment Ã  un ;\r\n    la reprÃ©sentation des nombres entiers signÃ©s en complÃ©ment Ã  deux.\r\n\r\nIl est donc nÃ©cessaire, si vous ne les connaissez pas, de faire des recherches sur WikipÃ©dia.\r\n\r\n    SystÃ¨me binaire, complÃ©ment Ã  un et complÃ©ment Ã  deux ;\r\n    Notation octale ;\r\n    Notation hexadÃ©cimale.\r\n\r\nLes opÃ©rateurs unaires ne s'appliquent qu'aux nombres qu'ils prÃ©cÃ¨dent, ils ne possÃ¨dent donc pas d'opÃ©rateur d'attribution. Leur syntaxe est la suivante (oÃ¹ &lt;unaire&gt; est l'opÃ©rateur unaire et &lt;nombre&gt; est le nombre auquel il s'applique).\r\n\r\n&lt;unaire&gt;&lt;nombre&gt; \r\n\r\nOpÃ©rateur unaire\r\n\t\r\n\r\nDescription\r\n\r\n!\r\n\t\r\n\r\nNON logique, renvoie 1 si le nombre est Ã©gal Ã  0 et 0 sinon. (Logical NOT).\r\n\r\n~\r\n\t\r\n\r\nNON au niveau du bit, complÃ©ment Ã  un. (Bitwise NOT)\r\n\r\n-\r\n\t\r\n\r\nRenvoie la valeur inverse, soit un nombre nÃ©gatif si le nombre d'origine est positif, complÃ©ment Ã  deux. (NEG)\r\n\r\nTableau 6 : Les opÃ©rateurs unaires\r\n\r\nExemple avec le script 24.\r\nScript 24\r\nSÃ©lectionnez\r\n1.\r\n2.\r\n3.\r\n4.\r\n5.\r\n6.\r\n7.\r\n8.\r\n9.\r\n10.\r\n11.\r\n12.\r\n13.\r\n14.\r\n15.\r\n16.\r\n17.\r\n18.\r\n19.\r\n20.\r\n21.\r\n22.\r\n23.\r\n24.\r\n25.\r\n26.\r\n27.\r\n28.\r\n29.\r\n30.\r\n31.\r\n32.\r\n33.\r\n34.\r\n\r\n@echo off\r\n\r\nrem Veuillez vous assurer d'utiliser le bon encodage, sans quoi l'affichage ne sera pas celui attendu.\r\n\r\nset /a \"Val1=2147483647\"\r\nset /a \"Val2=1\"\r\nset /a \"Val3=0\"\r\n\r\nset /a \"LogicalNOT_Val1=!Val1\"\r\nset /a \"LogicalNOT_Val2=!Val2\"\r\nset /a \"LogicalNOT_Val3=!Val3\"\r\n\r\nset /a \"BitwiseNOT_Val1=~Val1\"\r\nset /a \"BitwiseNOT_Val2=~Val2\"\r\nset /a \"BitwiseNOT_Val3=~Val3\"\r\n\r\nset /a \"NEG_Val1=-Val1\"\r\nset /a \"NEG_Val2=-Val2\"\r\nset /a \"NEG_Val3=-Val3\"\r\n\r\necho              â•”â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•—\r\necho              â•‘                 Nombre                 â•‘\r\necho â•”â•â•â•â•â•â•â•â•â•â•â•â•â•¬â•â•â•â•â•â•â•â•â•â•â•â•â•â•¦â•â•â•â•â•â•â•â•â•â•â•â•â•â•¦â•â•â•â•â•â•â•â•â•â•â•â•â•£\r\necho â•‘ OpÃ©rateur  â•‘ %Val1%  â•‘      %Val2%      â•‘     %Val3%      â•‘\r\necho â• â•â•â•â•â•â•â•â•â•â•â•â•â•¬â•â•â•â•â•â•â•â•â•â•â•â•â•â•¬â•â•â•â•â•â•â•â•â•â•â•â•â•â•¬â•â•â•â•â•â•â•â•â•â•â•â•â•£\r\necho â•‘ LogicalNOT â•‘ %LogicalNOT_Val1%           â•‘ %LogicalNOT_Val2%           â•‘ %LogicalNOT_Val3%          â•‘\r\necho â• â•â•â•â•â•â•â•â•â•â•â•â•â•¬â•â•â•â•â•â•â•â•â•â•â•â•â•â•¬â•â•â•â•â•â•â•â•â•â•â•â•â•â•¬â•â•â•â•â•â•â•â•â•â•â•â•â•£\r\necho â•‘ BitwiseNOT â•‘ %BitwiseNOT_Val1% â•‘ %BitwiseNOT_Val2%          â•‘ %BitwiseNOT_Val3%         â•‘\r\necho â• â•â•â•â•â•â•â•â•â•â•â•â•â•¬â•â•â•â•â•â•â•â•â•â•â•â•â•â•¬â•â•â•â•â•â•â•â•â•â•â•â•â•â•¬â•â•â•â•â•â•â•â•â•â•â•â•â•£\r\necho â•‘ NEG        â•‘ %NEG_Val1% â•‘ %NEG_Val2%          â•‘ %NEG_Val3%          â•‘\r\necho â•šâ•â•â•â•â•â•â•â•â•â•â•â•â•©â•â•â•â•â•â•â•â•â•â•â•â•â•â•©â•â•â•â•â•â•â•â•â•â•â•â•â•â•©â•â•â•â•â•â•â•â•â•â•â•â•â•\r\n\r\necho.\r\npause\r\n\r\nUnaire\r\nII-E. Les nombres entiers signÃ©s en notation hexadÃ©cimale\r\nâ–²\r\n\r\nLes nombres en notation hexadÃ©cimale doivent Ãªtre dÃ©clarÃ©s comme des nombres entiers en notation dÃ©cimale (ce que nous avons utilisÃ© jusqu'Ã  maintenant) avec la commande set /a \"&lt;expression&gt;\" et toujours Ãªtre prÃ©fixÃ©s par 0x (chiffre zÃ©ro suivi de la lettre Â« x Â»). La commande set /a a pour effet de transformer toutes les valeurs entrÃ©es en valeurs numÃ©riques. Si c'est une chaÃ®ne de caractÃ¨res alors la commande cherchera une variable portant ce nom, si c'est un nombre hexadÃ©cimal alors la commande set /a codera le nombre tel quel en binaire. Cependant, mÃªme si un nombre est fourni en notation hexadÃ©cimale, l'interprÃ©teur l'expanse toujours en notation dÃ©cimale, exemple avec le script 25.\r\nScript 25\r\nSÃ©lectionnez\r\n1.\r\n2.\r\n3.\r\n4.\r\n5.\r\n\r\n@echo off\r\nrem le nombre 0x1 vaut 1 et le nombre 0x3 vaut 3.\r\nset /a \"Hexa=0x1 + 0x3\"\r\necho RÃ©sultat:    %Hexa%\r\npause\r\n\r\nHexa_0\r\n\r\nLe rÃ©sultat du script 25 nous montre que le calcul s'effectue correctement, de mÃªme avec le script 26.\r\nScript 26\r\nSÃ©lectionnez\r\n1.\r\n2.\r\n3.\r\n4.\r\n5.\r\n6.\r\n\r\n@echo off\r\nrem le nombre 0x5 vaut 5 et le nombre 0x8 vaut 8.\r\nset /a \"Hexa=0x5 + 0x8\"\r\nrem Le rÃ©sultat doit donc Ãªtre 0xD qui vaut 13.\r\necho RÃ©sultat:    %Hexa%\r\npause\r\n\r\nHexa_1\r\n\r\nJusque-lÃ  tout va bien mÃªme si le rÃ©sultat n'est pas en notation hexadÃ©cimale, il est quand mÃªme celui attendu. Le problÃ¨me c'est que l'interprÃ©teur de commande utilise toujours la reprÃ©sentation en complÃ©ment Ã  deux pour coder un nombre entier signÃ©. Ainsi, dÃ¨s lors que l'on utilise un nombre en notation hexadÃ©cimale supÃ©rieur Ã  0x7FFFFFFF (soit 2 147 483 647 en notation dÃ©cimale), ce nombre est en fait un nombre nÃ©gatif comme le montre le script 27.\r\nScript 27\r\nSÃ©lectionnez\r\n1.\r\n2.\r\n3.\r\n4.\r\n\r\n@echo off\r\nset /a \"Hexa=0x80000000\"\r\necho RÃ©sultat:    %Hexa%\r\npause\r\n\r\nHexa_2\r\n\r\nUn rÃ©sultat plutÃ´t dÃ©routant pour quiconque ne s'y attend pas, en effet la repr",
        "3": "BAT tuto",
        "id": "4012019",
        "date": "2019-01-04",
        "texte": "https://initscreen.developpez.com/tutoriels/batch/apprendre-la-programmation-de-script-batch/\r\n\r\n\r\n\r\n    Forums\r\n    Tutoriels\r\n    Magazine\r\n    FAQ\r\n    Blogs\r\n    Chat\r\n    Newsletter\r\n    Ã‰tudes\r\n    Emploi\r\n    Club\r\n\r\n    Accueil\r\n    ALM\r\n    Java\r\n    .NET\r\n    DÃ©v. Web\r\n    EDI\r\n    Programmation\r\n    SGBD\r\n    Office\r\n    Solutions d'entreprise\r\n    Applications\r\n    Mobiles\r\n    SystÃ¨mes\r\n\r\n    SystÃ¨mes\r\n    Windows\r\n    Linux\r\n    Arduino\r\n    SÃ©curitÃ©\r\n    Hardware\r\n    HPC\r\n    Mac\r\n    Raspberry Pi\r\n    RÃ©seau\r\n    Green IT\r\n    SystÃ¨mes EmbarquÃ©s\r\n    Virtualisation\r\n\r\n    FORUM WINDOWS\r\n    FORUM PROGRAMMATION\r\n    FAQ WINDOWS\r\n    TUTORIELS WINDOWS\r\n    QUIZ WINDOWS\r\n    LOGICIELS &amp; SOURCES WINDOWS\r\n    LIVRES\r\n\r\nTraduire cette page\r\nMicrosoftÂ® Translator\r\nApprendre la programmation de script batch\r\nTable des matiÃ¨resPlier\r\n\r\n    Remerciements\r\n    I. Introduction\r\n        I-A. L'Ã©diteur de texte\r\n        I-B. Encodage des caractÃ¨res\r\n        I-C. Hello World\r\n        I-D. DiffÃ©rence entre la commande Â« rem Â» et le prÃ©fixe Â« :: Â»\r\n        I-E. Les Ã©chappements de caractÃ¨res\r\n        I-F. Les bogues de la commande Â« rem Â» et du prÃ©fixe Â« :: Â»\r\n    II. Les variables\r\n        II-A. Les variables d'environnement\r\n        II-B. La commande Â« set Â»\r\n        II-C. Les variables de type chaÃ®ne de caractÃ¨res\r\n        II-D. Les variables de type nombre entier signÃ©\r\n            II-D-1. Les opÃ©rations arithmÃ©tiques\r\n            II-D-2. Les opÃ©rations logiques\r\n            II-D-3. Les opÃ©rateurs unaires\r\n        II-E. Les nombres entiers signÃ©s en notation hexadÃ©cimale\r\n        II-F. Les nombres entiers signÃ©s en notation octale\r\n    III. Les conditions\r\n        III-A. If, else, else if, not et /i\r\n        III-B. La condition Â« exist &lt;path&gt; Â»\r\n        III-C. La condition Â« defined &lt;variable&gt; Â»\r\n        III-D. La condition Â« errorlevel &lt;opÃ©rande&gt; Â»\r\n        III-E. La condition Â« cmdextversion &lt;opÃ©rande&gt; Â»\r\n        III-F. La condition Â« &lt;chaÃ®ne1&gt; &lt;comparateur&gt; &lt;chaÃ®ne2&gt; Â»\r\n        III-G. La condition Â« \"&lt;chaÃ®ne1&gt;\"==\"&lt;chaÃ®ne2&gt;\" Â»\r\n        III-H. Mise en application de la commande Â« if Â»\r\n    IV. Tout dÃ©pend du contexte\r\n        IV-A. Les labels\r\n        IV-B. Les sauts\r\n        IV-C. Contexte de commande\r\n            IV-C-1. La portÃ©e des variables\r\n        IV-D. Les fonctions\r\n            IV-D-1. L'appel de fonction\r\n            IV-D-2. Sortie de fonction\r\n        IV-E. Les paramÃ¨tres de commande\r\n            IV-E-1. Les modificateurs de paramÃ¨tres de commande\r\n            IV-E-2. La commande shift\r\n        IV-F. Les sorties\r\n        IV-G. Code de sortie\r\n        IV-H. Script batch et adresse de retour\r\n        IV-I. La commande start\r\n        IV-J. La commande setlocal\r\n        IV-K. La commande endlocal\r\n        IV-L. Mise en application des contextes\r\n    V. Les boucles\r\n        V-A. Les boucles pour chemin d'accÃ¨s\r\n        V-B. Les boucles pour compteurs\r\n        V-C. Les boucles de recherche\r\n        V-D. Les Ã©chappements propres Ã  la boucle for\r\n        V-E. Mise en application des boucles\r\n    VI. L'expansion retardÃ©e des variables\r\n        VI-A. Cas de la boucle for\r\n        VI-B. GÃ©nÃ©rer dynamiquement des noms de variables\r\n        VI-C. Parcourir une chaÃ®ne\r\n        VI-D. Mise en application de l'expansion retardÃ©e\r\n    VII. La gestion des flux\r\n        VII-A. Le canal standard\r\n        VII-B. Les opÃ©rateurs de redirection\r\n        VII-C. L'opÃ©rateur &amp;\r\n        VII-D. La sortie standard\r\n        VII-E. Les opÃ©rateurs &gt; et &gt;&gt;\r\n        VII-F. L'erreur standard\r\n        VII-G. L'entrÃ©e standard\r\n        VII-H. Le pseudo-pÃ©riphÃ©rique NUL\r\n        VII-I. L'opÃ©rateur |\r\n            VII-I-1. Les filtres\r\n            VII-I-2. Le filtre find\r\n            VII-I-3. Le filtre sort\r\n            VII-I-4. Le filtre more\r\n            VII-I-5. Le filtre findstr\r\n        VII-J. L'opÃ©rateur &lt;\r\n        VII-K. Le point sur Â« set /p Â» et Â« type Â»\r\n        VII-L. Les opÃ©rateurs &amp;&amp; et ||\r\n            VII-L-1. Tester les deux Ã©tats d'erreurs\r\n        VII-M. Les opÃ©rateurs &lt;&amp; et &gt;&amp;\r\n        VII-N. Les handles pour tampon utilisateur\r\n        VII-O. Les pseudo-fichiers de pÃ©riphÃ©rique\r\n            VII-O-1. Le pseudo-fichier CON\r\n            VII-O-2. Les pseudo-fichiers COMx\r\n            VII-O-3. Les pseudo-fichiers LTPx\r\n            VII-O-4. Le pseudo-fichier PRN\r\n            VII-O-5. Le pseudo-fichier AUX\r\n    VIII. Les fichiers de rÃ©ponse\r\n        VIII-A. La syntaxe des fichiers Â« *.ini Â»\r\n        VIII-B. Lecture d'un fichier Â« *.ini Â»\r\n    IX. SÃ©curitÃ© et script batch\r\n        IX-A. Les variables\r\n        IX-B. L'injection de commandes\r\n    Annexe A. Les caractÃ¨res\r\n        A.1. Affichage des caractÃ¨res de contrÃ´le\r\n        A.2. Insertion de caractÃ¨res de contrÃ´le et de signaux\r\n\r\nCe cours a pour but de vous apprendre la programmation de script batch. TombÃ©s en dÃ©suÃ©tude, ils reviennent forts depuis Windows Server 2012 du fait que celui-ci utilise une interface en ligne de commande aussi appelÃ©e CLI (Command Line Interface) ou CUI (Console User Interface).\r\n\r\n4 commentaires Donner une note Ã  l'article (5)\r\n\r\nArticle lu 168247 fois.\r\nL'auteur\r\n\r\nJuillard Jean-Baptiste\r\nL'article\r\n\r\nPubliÃ© le 13 avril 2015 \r\n\r\nPublic visÃ© : tout le monde\r\n\r\nDurÃ©e : 15-20 heures\r\n\r\nVersion PDF Version hors-ligne\r\n\r\nePub, Azw et Mobi\r\nLiens sociaux\r\nViadeo Twitter Facebook Share on Google+  inPartager \r\nRemerciements\r\nâ–²\r\n\r\nJe tiens Ã  remercier gangsoleil et djibril pour leurs relectures techniques attentives ; ainsi que f-leb, FRANOUCH et milkoseck pour leurs relectures orthographiques assidues.\r\nI. Introduction\r\nâ–²\r\n\r\nLes fichiers batch sont des scripts de commandes qui s'exÃ©cutent dans l'interprÃ©teur de commande Windows. Alors quelle pourrait Ãªtre l'utilitÃ© d'Ã©crire ces lignes de commande dans un script ? En fait, il y a plusieurs raisons :\r\n\r\n    Ã©viter d'avoir Ã  rÃ©Ã©crire sans cesse les mÃªmes commandes lors de tÃ¢ches rÃ©pÃ©titives ;\r\n    possibilitÃ© de crÃ©er de vrais petits Â« programmes Â» facilitant les tÃ¢ches qui doivent Ãªtre rÃ©alisÃ©es via l'interprÃ©teur de commande.\r\n\r\nNous allons Ã©tudier les mÃ©thodes permettant de concevoir ces programmes. Dans la suite de ce document, nous utiliserons la convention suivante :\r\n\r\n    les termes Â« interprÃ©teur de commande Â» ou Â« interprÃ©teur Â» dÃ©signent l'exÃ©cutable Â« cmd.exe Â» ;\r\n    dans les syntaxes de commande, les parties encadrÃ©es avec les caractÃ¨res [ et ] sont optionnelles, les parties encadrÃ©es avec les caractÃ¨res &lt; et &gt; sont Ã  remplacer par diffÃ©rentes informations Ã  fournir (celles-ci seront prÃ©cisÃ©es avec la syntaxe) et les parties encadrÃ©es avec les caractÃ¨res { et } sont des parties Ã  choix multiple oÃ¹ chaque choix est sÃ©parÃ© des autres avec le caractÃ¨re |.\r\n\r\nLa convention syntaxique est la mÃªme que celle pour l'aide en ligne de commande, ainsi il vous sera plus facile de la comprendre.\r\nI-A. L'Ã©diteur de texte\r\nâ–²\r\n\r\nUn simple Ã©diteur de texte, tel que le notepad fourni avec Windows, s'avÃ¨re peu pratique pour Ã©crire des scripts batch. Pour exploiter pleinement les capacitÃ©s de ces scripts, il faut pouvoir encoder les caractÃ¨res non anglophones comme les accents ou le Â« Ã§ Â» afin de pouvoir accÃ©der aux fichiers dont les noms comportent ce genre de caractÃ¨res exotiques. La plupart des Ã©diteurs de texte encodent les fichiers avec le jeu de caractÃ¨res de la norme ANSI qui correspond Ã  la langue d'installation du systÃ¨me d'exploitation alors que l'interprÃ©teur de commande utilise une Ã©tendue de page de code (aussi appelÃ©e Code Page) comme CP-850 qui est l'encodage par dÃ©faut de l'interprÃ©teur pour les systÃ¨mes Windows installÃ©s en franÃ§ais (France).\r\n\r\nSous Windows, il y a un Ã©diteur de texte que vous possÃ©dez peut-Ãªtre dÃ©jÃ , c'est Notepad++ (la version 5.9.x ou supÃ©rieure est nÃ©cessaire) ; si ce n'est pas le cas, vous pouvez le tÃ©lÃ©charger ici : http://notepad-plus-plus.org/fr/\r\n\r\nDans ce dernier, vous pourrez sÃ©lectionner l'encodage dans le menu Â« Encodage &gt; Codage de caractÃ¨res Â», puis si vous voulez le franÃ§ais par exemple : sÃ©lectionnez Â« Langues d'Europe occidentale&gt;OEM-850 Â». Dans Notepad++, les code pages sont appelÃ©s OEM-XXX, au lieu de CP-XXX, mais ce sont les mÃªmes encodages. Il faut aussi noter que dans le mÃªme menu que OEM-850, il y a OEM-863 : franÃ§ais ; c'est bien du franÃ§ais, mais pour le QuÃ©bec. Cette manipulation sera Ã  effectuer pour chaque script afin d'utiliser le bon encodage, il n'est pas possible d'effectuer cette opÃ©ration de faÃ§on automatique dans Notepad++.\r\nNotepad++\r\nI-B. Encodage des caractÃ¨res\r\nâ–²\r\n\r\nLa gestion des pages de code dans l'interprÃ©teur se fait via les commandes mode et chcp, ces commandes permettent d'afficher le code page utilisÃ© ou de le modifier en utilisant l'une des syntaxes suivantes.\r\n\r\nDÃ©finir le code page Ã  utiliser (oÃ¹ &lt;XXX&gt; est le numÃ©ro de code page).\r\n\r\nmode con cp select=&lt;XXX&gt; \r\n\r\nchcp &lt;XXX&gt; \r\n\r\nAfficher le code page utilisÃ©.\r\n\r\nmode con cp [/status] \r\n\r\nchcp\r\n\r\nLe tableau 1 fournit une liste non exhaustive des diffÃ©rents code pages utilisÃ©s par l'interprÃ©teur de commande.\r\n\r\nCode Page\r\n\t\r\n\r\nDescription\r\n\r\nCP-437\r\n\t\r\n\r\npour le support des langues anglophones.\r\n\r\nCP-720\r\n\t\r\n\r\npour le support des langues arabes.\r\n\r\nCP-737\r\n\t\r\n\r\npour le support du grec.\r\n\r\nCP-775\r\n\t\r\n\r\npour le support des langues baltes.\r\n\r\nCP-850\r\n\t\r\n\r\npour le support des langues d'Europe occidentale (mis Ã  jour par CP 858) dont le franÃ§ais (France), mais aussi l'allemand, le basque, le catalan, le danois, l'espagnol, le finnois, l'italien, le nÃ©erlandais, le norvÃ©gien, le portugais, le suÃ©dois, l'afrikaans, le faeroese, le flamand et l'irlandais.\r\n\r\nCP-852\r\n\t\r\n\r\npour le support des langues d'Europe centrale.\r\n\r\nCP-855\r\n\t\r\n\r\npour le support de l'alphabet cyrillique.\r\n\r\nCP-857\r\n\t\r\n\r\npour le support du turc.\r\n\r\nCP-858\r\n\t\r\n\r\npour le support des langues d'Europe occidentale, dont le franÃ§ais (France), il s'agit d'une mise Ã  jour de 1998 basÃ©e sur CP-850 ou seul le symbole Â« â‚¬ Â» a Ã©tÃ© ajoutÃ© au point de code 0xD5.\r\n\r\nCP-861\r\n\t\r\n\r\npour le support de l'islandais.\r\n\r\nCP-863\r\n\t\r\n\r\npour le support du franÃ§ais (QuÃ©bec).\r\n\r\nCP-864\r\n\t\r\n\r\npour le support des langues arabes.\r\n\r\nCP-866\r\n\t\r\n\r\npour le support de l'alphabet cyrillique.\r\n\r\nCP-869\r\n\t\r\n\r\npour le support du grec.\r\n\r\nTableau 1 : Code Page\r\n\r\nIl faut noter que malgrÃ© la mise Ã  jour de CP-850 par CP-858, l'encodage par dÃ©faut pour l'interprÃ©teur sous Windows installÃ© en franÃ§ais (France) reste CP-850. Il est donc prÃ©fÃ©rable d'utiliser CP-850. La liste des code pages supportÃ©s par un systÃ¨me Windows est disponible dans le registre sous la clÃ© : HKLM\\SYSTEM\\CurrentControlSet\\Control\\Nls\\CodePage. Vous noterez la prÃ©sence de 1252 dans la clÃ© prÃ©cÃ©demment mentionnÃ©e, il s'agit de l'encodage Windows-1252 utilisÃ© par les API Windows et donc par la plupart des blocs-notes sur les systÃ¨mes installÃ©s en franÃ§ais (France) ; cependant il n'est pas recommandÃ© de l'utiliser dans l'interprÃ©teur de commande du fait que les commandes ne sont pas faites pour le supporter, il peut mÃªme provoquer des bogues dans certains cas. L'encodage par dÃ©faut pour l'interprÃ©teur peut Ãªtre trouvÃ© via la valeur OEMCP de type REG_SZ toujours dans la clÃ© prÃ©cÃ©demment mentionnÃ©e.\r\n\r\nIl est possible d'ajouter les Code Pages manquants (par dÃ©faut, seuls les code pages correspondant Ã  la langue d'installation sont disponibles) en installant le pack de langue correspondant Ã  l'encodage voulu. Chaque pack de langue comprend une table de conversion permettant Ã  Windows de convertir un point de code en sa reprÃ©sentation graphique et donc de l'afficher. Il est aussi possible d'utiliser l'Unicode (UCS-2 seulement) avec les sorties de commandes internes de l'interprÃ©teur pour permettre l'interaction avec les programmes qui utilisent Unicode de maniÃ¨re Â« native Â» (pour Perl par exemple) en appelant l'interprÃ©teur via la commande suivante (oÃ¹ &lt;commande&gt; est la commande Ã  exÃ©cuter).\r\n\r\ncmd /u &lt;commande&gt; \r\n\r\nDans Notepad++, les caractÃ¨res absents du clavier peuvent Ãªtres rajoutÃ©s via le menu Â« Ã‰dition&gt;Panneau des caractÃ¨res ASCII Â» puis double-clic sur le caractÃ¨re voulu.\r\nI-C. Hello World\r\nâ–²\r\n\r\nNous allons commencer par le traditionnel Â« hello world Â», dont voici le code (Script 1). Copiez le code dans Notepad++, puis enregistrez-le avec l'encodage OEM-850 et l'extension Â« .bat Â» ou Â« .cmd Â» (seulement sur les systÃ¨mes Vista et supÃ©rieur).\r\n\r\nLa diffÃ©rence entre fichier Â« .bat Â» et fichier Â« .cmd Â» tient dans l'interprÃ©teur de commande, en effet sur les systÃ¨mes Windows XP, il y avait deux interprÃ©teurs de commande : Â« cmd.exe Â» et Â« COMMAND.COM Â». Les fichiers avec l'extension Â« .bat Â» Ã©taient exÃ©cutÃ©s par Â« cmd.exe Â» et les fichiers avec l'extension Â« .cmd Â» Ã©taient exÃ©cutÃ©s par Â« COMMAND.COM Â», les deux types de fichiers avaient des spÃ©cificitÃ©s diffÃ©rentes. Cependant sur les systÃ¨mes Windows Vista et supÃ©rieur, seul subsiste Â« cmd.exe Â», tous les scripts Â« .bat Â» et Â« .cmd Â» sont exÃ©cutÃ©s par Â« cmd.exe Â» et ont les mÃªmes spÃ©cificitÃ©s.\r\nScript 1\r\nSÃ©lectionnez\r\n1.\r\n2.\r\n3.\r\n4.\r\n5.\r\n6.\r\n7.\r\n8.\r\n9.\r\n\r\n@echo off\r\ncls\r\n\r\nrem Ceci est une remarque.\r\n:: Ceci est un commentaire.\r\n\r\necho Hello World !!!! DÃ©jÃ  lÃ  ?\r\necho.\r\npause\r\n\r\nLorsqu'on exÃ©cute ce script en cliquant dessus, on obtient l'affichage suivant.\r\nScript_Hello_World\r\n\r\nÃ‰tudions la composition du script 1. La premiÃ¨re ligne, @echo off, est dÃ©jÃ  intÃ©ressante, elle est composÃ©e :\r\n\r\n    du prÃ©fixe @ qui sert Ã  inverser l'Ã©tat de l'affichage standard ;\r\n    de la commande echo qui sert Ã  gÃ©rer l'affichage en ligne de commande ;\r\n    et du paramÃ¨tre off qui sert Ã  dÃ©sactiver l'affichage standard.\r\n\r\nL'affichage standard dÃ©finit ce que l'interprÃ©teur de commande affiche par dÃ©faut. Par exemple lors du lancement de l'interprÃ©teur de commande ci-dessous ; l'affichage standard renvoie le chemin d'accÃ¨s du rÃ©pertoire courant, soit C:\\Users\\Portable&gt;.\r\nSTD_Prompt\r\n\r\nLors de l'exÃ©cution d'un script, l'affichage standard renvoie, par dÃ©faut, le chemin d'accÃ¨s du rÃ©pertoire courant suivi de la commande en cours d'exÃ©cution comme dans l'exemple ci-dessous.\r\nImage non disponible\r\n\r\nLe prÃ©fixe @, quand il est placÃ© en dÃ©but de ligne, sert Ã  inverser l'Ã©tat de l'affichage standard (activÃ© ou dÃ©sactivÃ©) pour l'exÃ©cution de la commande qui le suit (pas seulement pour la commande echo). Ce comportement prend fin une fois la commande exÃ©cutÃ©e. Ainsi la commande @cd /d \"C:\\Users\\Portable\\\" ne sera affichÃ©e que si l'affichage standard est dÃ©sactivÃ©. La syntaxe du prÃ©fixe @ est la suivante (oÃ¹ &lt;commande&gt; est la commande Ã  exÃ©cuter) :\r\n\r\n@&lt;commande&gt; \r\n\r\nLa commande echo gÃ¨re l'affichage dans l'interprÃ©teur, elle peut :\r\n\r\n    modifier l'Ã©tat de l'affichage standard ;\r\n    afficher l'Ã©tat de l'affichage standard ;\r\n    afficher un message ou une ligne vide dans l'interprÃ©teur.\r\n\r\nDÃ©sactiver l'affichage standard peut Ãªtre fait via la syntaxe suivante (seuls les erreurs et les messages de la commande echo sont affichÃ©s).\r\n\r\necho off \r\n\r\nActiver l'affichage standard peut Ãªtre fait via la syntaxe suivante (tout est affichÃ©).\r\n\r\necho on\r\n\r\nUtilisÃ©e sans paramÃ¨tre, la commande echo renvoie l'Ã©tat de l'affichage standard en cours.\r\n\r\necho \r\n\r\nSi l'on reprend le script 1, la ligne @echo off permet de dÃ©sactiver l'affichage standard sans que la commande soit affichÃ©e. Sur la deuxiÃ¨me ligne du script 1, la commande cls est utilisÃ©e pour vider la fenÃªtre de l'interprÃ©teur de son contenu, cette commande ne prend aucun paramÃ¨tre. Sa syntaxe est donc la suivante.\r\n\r\ncls\r\n\r\nLa ligne suivante du script 1 est vide, elle ne sera donc pas prise en compte lors de l'exÃ©cution du script permettant ainsi de le rendre plus lisible. La quatriÃ¨me ligne est composÃ©e de la commande rem et d'une chaÃ®ne de caractÃ¨res, cette commande permet d'insÃ©rer des remarques dans son script. Si et seulement si l'affichage standard est activÃ©, la commande rem sera affichÃ©e. La syntaxe de la commande rem est la suivante (oÃ¹ &lt;remarque&gt; est la chaÃ®ne de caractÃ¨res Ã  insÃ©rer en remarque).\r\n\r\nrem &lt;remarque&gt; \r\n\r\nLa cinquiÃ¨me ligne du script 1, :: Ceci est un commentaire., est composÃ©e du prÃ©fixe :: et d'une chaÃ®ne de caractÃ¨res. Le prÃ©fixe :: dÃ©finit la chaÃ®ne de caractÃ¨res qui le suit comme Ã©tant un commentaire ; ce comportement prend fin au premier retour Ã  la ligne. Quel que soit l'Ã©tat de l'affichage standard, la chaÃ®ne de caractÃ¨res prÃ©fixÃ©e par :: ne sera pas affichÃ©e. La syntaxe est la suivante (oÃ¹ &lt;commentaire&gt; est le commentaire Ã  insÃ©rer).\r\n\r\n::&lt;commentaire&gt; \r\n\r\nSuit une autre ligne vide puis la commande echo Hello World !!!! DÃ©jÃ  lÃ  ? qui affiche Hello World !!!! DÃ©jÃ  lÃ  ? dans la fenÃªtre de l'interprÃ©teur. La syntaxe suivante permet donc d'afficher un message mÃªme si l'affichage standard est dÃ©sactivÃ© (oÃ¹ &lt;message&gt; est le message Ã  afficher).\r\n\r\necho &lt;message&gt; \r\n\r\nVient ensuite la commande echo. qui permet d'afficher la ligne vide que l'on voit dans l'affichage obtenu. Si un point suit directement la commande echo et qu'aprÃ¨s le point il y a un retour Ã  la ligne, celle-ci affiche une ligne vide.\r\n\r\necho. \r\n\r\nSur la ligne suivante se trouve la commande pause qui met en pause l'exÃ©cution du script jusqu'Ã  ce que l'utilisateur appuie sur une touche quelconque du clavier, elle affiche le message Appuyez sur une touche pour continuerâ€¦ (quel que soit l'Ã©tat en cours de l'affichage standard) et ne prend aucun paramÃ¨tre. Dans le script 1, cette commande permet de visualiser le contenu de la fenÃªtre de l'interprÃ©teur avant que celle-ci ne se ferme.\r\n\r\npause \r\nI-D. DiffÃ©rence entre la commande Â« rem Â» et le prÃ©fixe Â« :: Â»\r\nâ–²\r\n\r\nPour mieux comprendre la diffÃ©rence entre la commande rem et le prÃ©fixe ::, Ã©tudions le script 2.\r\nScript 2\r\nSÃ©lectionnez\r\n1.\r\n2.\r\n3.\r\n4.\r\n5.\r\n6.\r\n7.\r\n\r\ncls\r\nrem Remarque 1\r\n:: Commentaire 1\r\n@echo off\r\nrem Remarque 2\r\n:: Commentaire 2\r\npause\r\n\r\nImage non disponible\r\n\r\nComme vous le voyez dans l'affichage du script 2, la commande rem Remarque 1, est prÃ©sente Ã  l'Ã©cran ; l'affichage standard Ã©tant activÃ©, les commandes exÃ©cutÃ©es sont toutes affichÃ©es. La chaÃ®ne :: Commentaire 1 n'est pas affichÃ©e, c'est dÃ» au fait que le prÃ©fixe :: n'est pas une commande et donc n'est pas renvoyÃ© par l'affichage standard. Vient ensuite la commande @echo off qui dÃ©sactive l'affichage standard sans que la commande ne soit affichÃ©e, suivie de la commande rem Remarque 2 qui n'est pas affichÃ©e (l'affichage standard Ã©tant Ã  prÃ©sent dÃ©sactivÃ©), pas plus que la chaÃ®ne :: Commentaire 2 qui est de toute faÃ§on exclue par l'affichage standard.\r\nI-E. Les Ã©chappements de caractÃ¨res\r\nâ–²\r\n\r\nLes caractÃ¨res spÃ©ciaux (aussi appelÃ© mÃ©ta-caractÃ¨res) sont des caractÃ¨res ayant une signification particuliÃ¨re pour l'interprÃ©teur de commande. Chaque fois que l'interprÃ©teur les rencontre, il leur applique le traitement correspondant, quelles que soient leurs positions dans la ligne de commande. En voici la liste :\r\n\r\n&amp; | ^ &lt; &gt; ( ) \r\n\r\nPour pouvoir les utiliser dans une chaÃ®ne de caractÃ¨res, il faut les Â« Ã©chapper Â» avec le caractÃ¨re ^, c'est-Ã -dire placer ce caractÃ¨re devant. Ainsi l'interprÃ©teur saura qu'ils font partie d'une chaÃ®ne et qu'ils n'ont rien Ã  voir avec la commande. Voir le script 3 comme exemple.\r\nScript 3\r\nSÃ©lectionnez\r\n1.\r\n2.\r\n3.\r\n\r\n@echo off\r\necho ^&amp; ^| ^^ ^&lt; ^&gt; ^( ^)\r\npause\r\n\r\nIl faut aussi noter que d'autres caractÃ¨res peuvent avoir besoin d'Ãªtre Ã©chappÃ©s, mais ils suivent d'autres rÃ¨gles. Le caractÃ¨re % doit Ãªtre Ã©chappÃ© par lui-mÃªme pour Ãªtre considÃ©rÃ© comme faisant partie d'une chaÃ®ne lorsqu'il est utilisÃ© dans un script comme le montre le script 4.\r\nScript 4\r\nSÃ©lectionnez\r\n1.\r\n2.\r\n3.\r\n\r\n@echo off\r\necho %%\r\npause\r\n\r\nUn autre cas est Ã  noter, il concerne les caractÃ¨res \" et \\ qui doivent Ãªtre Ã©chappÃ©s avec le caractÃ¨re \\ lorsqu'ils sont utilisÃ©s dans un paramÃ¨tre entre guillemets. Dans le script 5, si les caractÃ¨res \" et \\ n'avaient pas Ã©tÃ© Ã©chappÃ©s, le rÃ©sultat ne serait pas celui attendu. L'interprÃ©teur aurait compris qu'il y avait une chaÃ®ne \"cmd /c \"notepad et une chaÃ®ne \"%cd%\\%~nx0\"\", ce qui aurait conduit Ã  une erreur d'Ã©valuation de la commande.\r\nScript 5\r\nSÃ©lectionnez\r\n1.\r\n2.\r\n3.\r\n\r\n@echo off\r\nrunas /User:%UserName% \"cmd /c \\\"notepad \\\"%cd%\\\\%~nx0\\\"\"\r\npause\r\n\r\nLe caractÃ¨re d'Ã©chappement ^ peut aussi Ãªtre utilisÃ© afin d'Ã©crire une seule et mÃªme commande sur plusieurs lignes. Lorsque l'interprÃ©teur rencontre le caractÃ¨re ^ devant un retour Ã  la ligne, il supprime ce caractÃ¨re et le retour Ã  la ligne, puis continue Ã  lire les donnÃ©es fournies dans la ligne suivante. Exemple avec le script 6.\r\nScript 6\r\nSÃ©lectionnez\r\n1.\r\n2.\r\n3.\r\n4.\r\n\r\n@echo off\r\necho foo ^\r\nbar\r\npause\r\n\r\nImage non disponible\r\n\r\nD'autres Ã©chappements existent, cependant ils seront abordÃ©s plus loin dans ce document, car ils s'appliquent Ã  des commandes prÃ©cises et ne concernent pas les autres. Par exemple, la commande echo qui considÃ¨re le point comme un Ã©chappement de la chaÃ®ne qui le suit. Lorsque la commande echo est directement suivie d'un point, elle considÃ¨re la chaÃ®ne qui se trouve aprÃ¨s le point comme une chaÃ®ne Ã  afficher, retour Ã  la ligne compris. Cela permet d'utiliser en dÃ©but de chaÃ®ne un Â« mot Â» qu'elle aurait, dans le cas contraire, considÃ©rÃ© comme un paramÃ¨tre. Exemple avec le script 7.\r\nScript 7\r\nSÃ©lectionnez\r\n1.\r\n2.\r\n3.\r\n4.\r\n5.\r\n6.\r\n7.\r\n8.\r\n9.\r\n10.\r\n11.\r\n12.\r\n13.\r\n14.\r\n15.\r\n16.\r\n17.\r\n18.\r\n19.\r\n20.\r\n21.\r\n22.\r\n23.\r\n24.\r\n25.\r\n26.\r\n\r\n@echo off\r\n\r\necho Affichage d'une ligne vide sans le point:\r\necho\r\n\r\necho.\r\necho.\r\n\r\necho Affichage d'une ligne vide avec le point:\r\necho.\r\n\r\necho.\r\necho.\r\n\r\necho Affichage de la chaÃ®ne \"     /?  Print this help.\" sans le point:\r\necho     /?  Print this help.\r\n\r\necho.\r\necho.\r\n\r\necho Affichage de la chaÃ®ne \"     /?  Print this help.\" avec le point:\r\necho.    /?  Print this help.\r\n\r\necho.\r\necho.\r\npause\r\n\r\nDans l'affichage ci-dessous, on remarque que l'affichage d'une ligne vide sans le point renvoie l'Ã©tat de l'affichage standard contrairement Ã  celle avec un point. Si Ã  la place d'un retour Ã  la ligne, nous avions utilisÃ© plusieurs espaces, le rÃ©sultat aurait Ã©tÃ© le mÃªme, quel que soit le nombre d'espaces. En effet, l'interprÃ©teur n'Ã©value pas le nombre d'espaces entre deux constituantes d'une ligne de commande, il aurait donc considÃ©rÃ© qu'aucun paramÃ¨tre n'est fourni. Il en est de mÃªme avec la chaÃ®ne /? Print this help., l'interprÃ©teur considÃ¨re la sous-chaÃ®ne /? comme un paramÃ¨tre qui affiche l'aide en ligne de commande.\r\nEscape_str_in_echo_cmd\r\n\r\nLe tableau 2 rÃ©capitule les diffÃ©rents Ã©chappements que l'on vient de voir.\r\n\r\nÃ‰chappement\r\n\t\r\n\r\nDescription\r\n\r\n^\r\n\t\r\n\r\nPlacÃ© devant un des caractÃ¨res spÃ©ciaux, soit &amp;^|&lt;&gt;(), il signifie que le caractÃ¨re qui le suit fait partie de la chaÃ®ne et qu'il n'a rien Ã  voir avec la commande.\r\n\r\nPlacÃ© devant un retour Ã  la ligne, il signifie que la ligne suivante fait partie de la mÃªme commande.\r\n\r\n%\r\n\t\r\n\r\nPlacÃ© devant le caractÃ¨re % dans un script, il signifie que le caractÃ¨re qui le suit fait partie de la chaÃ®ne.\r\n\r\n\\\r\n\t\r\n\r\nPlacÃ© devant un des caractÃ¨res \\ et \" dans un paramÃ¨tre entre guillemets, il signifie que le caractÃ¨re qui le suit fait partie du paramÃ¨tre entre guillemets.\r\n\r\n.\r\n\t\r\n\r\nPlacÃ© immÃ©diatement aprÃ¨s la commande echo, il signifie que la chaÃ®ne qui le suit est une chaÃ®ne Ã  afficher et non un paramÃ¨tre de la commande echo.\r\n\r\nTableau 2 : Les Ã©chappements\r\nI-F. Les bogues de la commande Â« rem Â» et du prÃ©fixe Â« :: Â»\r\nâ–²\r\n\r\nUn problÃ¨me rÃ©current en batch scripting est que les remarques et commentaires (fournis via rem et ::) provoquent des bogues du fait d'une mauvaise utilisation. La commande rem et le prÃ©fixe :: prenant en paramÃ¨tre une chaÃ®ne de caractÃ¨res, ils attendent donc une chaÃ®ne de caractÃ¨res valide. Ainsi les Ã©chappements doivent Ãªtre utilisÃ©s pour les caractÃ¨res suivants : &amp; | ^ &lt; &gt; ( ) %.\r\nII. Les variables\r\nâ–²\r\n\r\nLes variables sont gÃ©rÃ©es via la commande set, il en existe deux types dont voici la liste :\r\n\r\n    les variables de type chaÃ®ne de caractÃ¨res ;\r\n    les variables de type nombre entier signÃ©.\r\n\r\nChaque type de variable est dÃ©clarÃ© et traitÃ© diffÃ©remment ; il est possible de les transtyper, c'est-Ã -dire de les passer d'un type Ã  l'autre, Ã  condition de respecter les rÃ¨gles suivantes :\r\n\r\n    une chaÃ®ne de caractÃ¨res ne pouvant Ãªtre transtypÃ©e en nombre que si elle ne contient que des chiffres ;\r\n    un nombre pourra toujours Ãªtre transtypÃ© en chaÃ®ne de caractÃ¨res (qui ne contiendra que des chiffres).\r\n\r\nLes variables sont accessibles via un identifiant qui leur est propre. Ainsi chaque fois qu'il sera fait mention de cet identifiant, l'interprÃ©teur sera capable de fournir la valeur associÃ©e. Cela peut Ãªtre fait en utilisant le caractÃ¨re % de part et d'autre de l'identifiant, on parle alors d'expansion de la variable. Par exemple avec la variable PATH (qui est une variable d'environnement : fournie par le systÃ¨me), pour obtenir sa valeur ; il faudrait utiliser la syntaxe %PATH% comme dans le script 8.\r\nScript 8\r\nSÃ©lectionnez\r\n1.\r\n2.\r\n3.\r\n\r\n@echo off\r\necho %PATH%\r\npause\r\n\r\nCe qui produirait un affichage similaire Ã  celui ci-dessous.\r\nPATH\r\n\r\nLes identifiants de variable ne sont pas sensibles Ã  la casse, c'est-Ã -dire que l'interprÃ©teur ne fait pas la diffÃ©rence entre majuscule et minuscule lorsqu'il expanse, crÃ©e ou modifie une variable. Ainsi les identifiants PATH, Path et path dÃ©signent une seule et mÃªme variable.\r\nII-A. Les variables d'environnement\r\nâ–²\r\n\r\nNous allons commencer par les variables d'environnement, elles sont toutes de type chaÃ®ne de caractÃ¨res. C'est le systÃ¨me d'exploitation qui dÃ©finit leurs valeurs soit parce que d'un systÃ¨me Ã  l'autre leurs valeurs peuvent Ãªtre diffÃ©rentes, soit parce que ces variables sont dÃ©finies dynamiquement lors de leur expansion. Cela permet d'accÃ©der Ã  des fichiers dont le chemin d'accÃ¨s pourrait ne pas Ãªtre le mÃªme d'une machine Ã  l'autre ou de pouvoir obtenir, par exemple, l'heure ou la date dont les valeurs sont modifiÃ©es en permanence.\r\n\r\nDans le tableau 3, vous trouverez la liste de ces variables. Dans la premiÃ¨re colonne, vous trouverez le nom de ces variables ; ces noms sont rÃ©servÃ©s par le systÃ¨me, et mÃªme s'il est possible de modifier leur valeur pendant l'exÃ©cution du script, les modifications apportÃ©es prendront fin en mÃªme temps que le script. De plus, dans certains cas, la modification de leur valeur peut entraÃ®ner une mauvaise Ã©valuation de l'environnement par le script. La deuxiÃ¨me colonne donne la description de la valeur renvoyÃ©e par la variable. Et enfin, la troisiÃ¨me colonne donne la compatibilitÃ© en fonction de la version du systÃ¨me. Dans cette colonne, il est fait mention de Â« systÃ¨mes NT Â», il s'agit de la Â« famille Â» du systÃ¨me d'exploitation. Les systÃ¨mes NT sont des systÃ¨mes reposant sur un noyau de type NT provenant du systÃ¨me Windows du mÃªme nom. Cette famille comprend au jour oÃ¹ sont Ã©crites ces lignes :\r\n\r\n    les systÃ¨mes Windows NT X.Y (oÃ¹ X est la rÃ©vision majeure et Y la rÃ©vision mineure) ;\r\n    les systÃ¨mes Windows 2000 ;\r\n    les systÃ¨mes Windows XP ;\r\n    les systÃ¨mes Windows Server 2003 ;\r\n    les systÃ¨mes Windows Vista ;\r\n    les systÃ¨mes Windows Server 2008 ;\r\n    les systÃ¨mes Windows 7 ;\r\n    les systÃ¨mes Windows Server 2012 ;\r\n    et les systÃ¨mes Windows 8.\r\n\r\nVariable\r\n\t\r\n\r\nDescription\r\n\t\r\n\r\nCompatibilitÃ©\r\n\r\nAllUsersProfile\r\n\t\r\n\r\nRenvoie le chemin d'accÃ¨s complet jusqu'au rÃ©pertoire des donnÃ©es utilisateurs communes Ã  tous les utilisateurs. Par dÃ©faut : %HomeDrive%\\ProgramData.\r\n\t\r\n\r\nDisponible sur tous les systÃ¨mes NT.\r\n\r\nAppData\r\n\t\r\n\r\nRenvoie le rÃ©pertoire commun des donnÃ©es d'application sous la forme\r\n%UserProfile%\\AppData\\Roaming.\r\n\t\r\n\r\nDisponible sur tous les systÃ¨mes NT.\r\n\r\nCD\r\n\t\r\n\r\nRenvoie le chemin d'accÃ¨s complet jusqu'au rÃ©pertoire dans lequel le script est en train de s'exÃ©cuter, ce rÃ©pertoire peut Ãªtre diffÃ©rent du rÃ©pertoire dans lequel le script s'est lancÃ© (si celui-ci a Ã©tÃ© Â« relocalisÃ© Â» au cours de son exÃ©cution).\r\n\t\r\n\r\nDisponible sur tous les systÃ¨mes NT.\r\n\r\nCmdCmdLine\r\n\t\r\n\r\nRenvoie la ligne de commande originale qui a appelÃ© l'interprÃ©teur de commande.\r\n\t\r\n\r\nDisponible sur tous les systÃ¨mes NT.\r\n\r\nCmdExtVersion\r\n\t\r\n\r\nRenvoie le numÃ©ro de version des extensions de commande du processeur de commande en cours.\r\n\t\r\n\r\nDisponible sur tous les systÃ¨mes NT.\r\n\r\nCommonProgramFiles\r\n\t\r\n\r\nRenvoie le chemin d'accÃ¨s complet jusqu'au rÃ©pertoire des fichiers communs aux applications 32bits sur les systÃ¨mes 32bits ou aux applications 64bits sur les systÃ¨mes 64bits, soit : %ProgramFiles%\\Common Files.\r\n\t\r\n\r\nDisponible sur tous les systÃ¨mes NT.\r\n\r\nCommonProgramFiles(x86)\r\n\t\r\n\r\nRenvoie le chemin d'accÃ¨s complet jusqu'au rÃ©pertoire des fichiers communs aux applications 32bits sur les systÃ¨mes 64bits :\r\n%ProgramFiles(x86)%\\Common Files.\r\n\t\r\n\r\nDisponible uniquement sur les systÃ¨mes NT 64bits.\r\n\r\nCommonProgramW6432\r\n\t\r\n\r\nRenvoie le chemin d'accÃ¨s complet jusqu'au rÃ©pertoire des fichiers communs aux applications 16 bits sur les systÃ¨mes 64bits et sur les systÃ¨mes 32bits Vista et supÃ©rieur : %ProgramW6432%\\Common Files.\r\n\t\r\n\r\nDisponible uniquement sur les systÃ¨mes NT 64bits et sur les systÃ¨mes 32bits Vista et supÃ©rieur.\r\n\r\nComputerName\r\n\t\r\n\r\nRenvoie le nom de l'ordinateur sur lequel le script est en train de s'exÃ©cuter.\r\n\t\r\n\r\nDisponible sur tous les systÃ¨mes NT.\r\n\r\nComSpec\r\n\t\r\n\r\nRenvoie le chemin d'accÃ¨s complet vers l'interprÃ©teur : %WinDir%\\system32\\cmd.exe.\r\n\t\r\n\r\nDisponible sur tous les systÃ¨mes NT.\r\n\r\nDate\r\n\t\r\n\r\nRenvoie la date actuelle en utilisant le mÃªme format que la commande date.\r\n\t\r\n\r\nDisponible sur tous les systÃ¨mes NT.\r\n\r\nErrorLevel\r\n\t\r\n\r\nRenvoie la valeur du code d'erreur en cours. Cette valeur est modifiÃ©e aprÃ¨s chaque ligne de commande, en fonction du rÃ©sultat de la commande. En gÃ©nÃ©ral, la variable ErrorLevel renvoie 1 ou plus en cas d'erreur de la derniÃ¨re commande et 0 si aucune erreur ne s'est produite. Cependant, il arrive que ce comportement varie selon les commandes, il est donc recommandÃ© de se reporter Ã  l'aide concernant ladite commande.\r\n\t\r\n\r\nDisponible sur tous les systÃ¨mes NT.\r\n\r\nFP_NO_HOST_CHECK\r\n\t\r\n\r\nN.C.\r\n\t\r\n\r\nDisponible sur tous les systÃ¨mes NT.\r\n\r\nHighestNumaNodeNumber\r\n\t\r\n\r\nRenvoie le numÃ©ro de nÅ“ud NUMA le plus Ã©levÃ© de l'ordinateur sur lequel s'exÃ©cute le script.\r\n\t\r\n\r\nDisponible uniquement sur les systÃ¨mes NT 64bits.\r\n\r\nHomeDrive\r\n\t\r\n\r\nRenvoie le point de montage de la partition qui accueille les rÃ©pertoires utilisateurs. Par dÃ©faut : C:.\r\n\t\r\n\r\nDisponible sur tous les systÃ¨mes NT.\r\n\r\nHomePath\r\n\t\r\n\r\nRenvoie le chemin d'accÃ¨s vers le rÃ©pertoire de l'utilisateur actuellement loguÃ©. Par dÃ©faut : \\Users\\%UserName%.\r\n\t\r\n\r\nDisponible sur tous les systÃ¨mes NT.\r\n\r\nLocalAppData\r\n\t\r\n\r\nRenvoie le rÃ©pertoire local des donnÃ©es d'application sous la forme : %UserProfile%\\AppData\\Local.\r\n\t\r\n\r\nDisponible sur tous les systÃ¨mes NT.\r\n\r\nLogonServer\r\n\t\r\n\r\nRenvoie l'URL locale du systÃ¨me d'exploitation sous la forme \\\\%ComputerName%.\r\n\t\r\n\r\nDisponible sur tous les systÃ¨mes NT.\r\n\r\nNumber_Of_Processors\r\n\t\r\n\r\nRenvoie le nombre de cÅ“urs logiques de l'ordinateur sur lequel le script est en train de s'exÃ©cuter.\r\n\t\r\n\r\nDisponible sur tous les systÃ¨mes NT.\r\n\r\nOS\r\n\t\r\n\r\nRenvoie le type de noyau sur lequel repose le systÃ¨me d'exploitation, sur les systÃ¨mes NT cette variable renverra toujours la chaÃ®ne Windows_NT.\r\n\t\r\n\r\nDisponible sur tous les systÃ¨mes NT.\r\n\r\nPath\r\n\t\r\n\r\nRenvoie la liste des rÃ©pertoires reconnus par le systÃ¨me comme contenant des exÃ©cutables, chaque rÃ©pertoire est listÃ© par son chemin d'accÃ¨s complet suffixÃ© par un point-virgule. Si un exÃ©cutable se trouve dans un des rÃ©pertoires de cette liste, il n'est pas nÃ©cessaire de fournir un chemin d'accÃ¨s complet pour l'appeler en ligne de commande.\r\n\t\r\n\r\nDisponible sur tous les systÃ¨mes NT.\r\n\r\nPathExt\r\n\t\r\n\r\nRenvoie la liste des extensions de fichier reconnues par le systÃ¨me comme Ã©tant des extensions de fichiers exÃ©cutables. Si une extension de fichier ne figure pas dans cette liste, alors le fichier ne peut Ãªtre appelÃ© en tant que commande.\r\n\t\r\n\r\nDisponible sur tous les systÃ¨mes NT.\r\n\r\nProcessor_Architecture\r\n\t\r\n\r\nRenvoie le type d'architecture (32/64bits) du processeur sur lequel s'exÃ©cute le script. Les valeurs possibles sont : X86 pour les processeurs 32bits, AMD64 pour les processeurs 64bits basÃ©s sur l'architecture x86 et IA64 pour les processeurs Itanium.\r\n\t\r\n\r\nDisponible sur tous les systÃ¨mes NT.\r\n\r\nProcessor_Identifier\r\n\t\r\n\r\nRenvoie une identification prÃ©cise du processeur sur lequel s'exÃ©cute le script. Cette identification est une chaÃ®ne de caractÃ¨res composÃ©e du type d'architecture suivi de la famille, du modÃ¨le, de la rÃ©vision et enfin du fabricant du processeur.\r\n\t\r\n\r\nDisponible sur tous les systÃ¨mes NT.\r\n\r\nProcessor_Level\r\n\t\r\n\r\nRenvoie une identification prÃ©cise de la famille de la micro-architecture du processeur.\r\n\t\r\n\r\nDisponible sur tous les systÃ¨mes NT.\r\n\r\nProcessor_Revision\r\n\t\r\n\r\nRenvoie une identification prÃ©cise du modÃ¨le et de la rÃ©vision du processeur sous forme d'une chaÃ®ne de caractÃ¨res reprÃ©sentant un nombre hexadÃ©cimal sur deux octets, le premier correspond au modÃ¨le et le second Ã  la rÃ©vision.\r\n\t\r\n\r\nDisponible sur tous les systÃ¨mes NT.\r\n\r\nProgramData\r\n\t\r\n\r\nRenvoie le rÃ©pertoire commun des donnÃ©es d'application 64bits sous la forme : %SystemDrive%\\ProgramData.\r\n\t\r\n\r\nDisponible uniquement sur les systÃ¨mes NT 64bits.\r\n\r\nProgramFiles\r\n\t\r\n\r\nRenvoie le chemin d'accÃ¨s complet vers le rÃ©pertoire Â« ProgramFiles Â». Ce rÃ©pertoire contient les applications 32bits sur les systÃ¨mes 32bits ou les applications 64bits sur les systÃ¨mes 64bits.\r\n\t\r\n\r\nDisponible sur tous les systÃ¨mes NT.\r\n\r\nProgramFiles(x86)\r\n\t\r\n\r\nRenvoie le chemin d'accÃ¨s complet vers le rÃ©pertoire Â« ProgramFiles(x86) Â». Ce rÃ©pertoire contient les applications 32bits sur les systÃ¨mes 64bits.\r\n\t\r\n\r\nDisponible uniquement sur les systÃ¨mes NT 64bits.\r\n\r\nProgramW6432\r\n\t\r\n\r\nRenvoie le chemin d'accÃ¨s complet vers le rÃ©pertoire Â« ProgramW6432 Â». Ce rÃ©pertoire contient les applications 16bits sur les systÃ¨mes 64bits et sur les systÃ¨mes 32bits Vista et supÃ©rieur.\r\n\t\r\n\r\nDisponible sur les systÃ¨mes NT 32 et 64bits Vista et supÃ©rieur.\r\n\r\nPrompt\r\n\t\r\n\r\nRenvoie la chaÃ®ne configurÃ©e pour l'affichage standard, par dÃ©faut : $P$G. Voir l'aide de la commande prompt pour plus d'information : prompt /?.\r\n\t\r\n\r\nDisponible sur tous les systÃ¨mes NT.\r\n\r\nPSModulePath\r\n\t\r\n\r\nRenvoie le chemin d'accÃ¨s complet vers les modules PowerShell.\r\n\t\r\n\r\nDisponible uniquement sur les systÃ¨mes Vista et supÃ©rieur. (XP avec mise Ã  jour KB926140)\r\n\r\nPublic\r\n\t\r\n\r\nRenvoie le chemin d'accÃ¨s complet vers le rÃ©pertoire des documents publics sous la forme %HomeDrive%\\Users\\Public.\r\n\t\r\n\r\nDisponible uniquement sur les systÃ¨mes Vista et supÃ©rieur.\r\n\r\nRandom\r\n\t\r\n\r\nRenvoie un nombre alÃ©atoire compris entre 0 et 32767.\r\n\t\r\n\r\nDisponible sur tous les systÃ¨mes NT.\r\n\r\nSessionName\r\n\t\r\n\r\nRenvoie le nom de la session en cours. Par dÃ©faut : Console.\r\n\t\r\n\r\nDisponible sur tous les systÃ¨mes NT.\r\n\r\nSystemDrive\r\n\t\r\n\r\nRenvoie le point de montage de la partition sur laquelle est installÃ© le systÃ¨me d'exploitation.\r\n\t\r\n\r\nDisponible sur tous les systÃ¨mes NT.\r\n\r\nSystemRoot\r\n\t\r\n\r\nRenvoie le chemin d'accÃ¨s complet vers le systÃ¨me d'exploitation sous la forme\r\n%SystemDrive%\\Windows.\r\n\t\r\n\r\nDisponible sur tous les systÃ¨mes NT.\r\n\r\nTemp\r\n\t\r\n\r\nRenvoie le chemin d'accÃ¨s complet jusqu'au rÃ©pertoire des fichiers temporaires de l'utilisateur. Par dÃ©faut : %UserProfile%\\AppData\\Local\\Temp.\r\n\t\r\n\r\nDisponible sur tous les systÃ¨mes NT.\r\n\r\nTime\r\n\t\r\n\r\nRenvoie l'heure en cours en utilisant le mÃªme format que la commande time.\r\n\t\r\n\r\nDisponible sur tous les systÃ¨mes NT.\r\n\r\nTmp\r\n\t\r\n\r\nIdentique Ã  Temp.\r\n\t\r\n\r\nDisponible sur tous les systÃ¨mes NT.\r\n\r\nUserDomain\r\n\t\r\n\r\nRenvoie le nom de domaine de l'ordinateur sur lequel s'exÃ©cute le script. Si le systÃ¨me n'appartient pas Ã  un domaine alors le nom de domaine sera le nom de l'ordinateur sur lequel s'exÃ©cute le script.\r\n\t\r\n\r\nDisponible sur tous les systÃ¨mes NT.\r\n\r\nUserName\r\n\t\r\n\r\nRenvoie le nom de l'utilisateur actuellement loguÃ©.\r\n\t\r\n\r\nDisponible sur tous les systÃ¨mes NT.\r\n\r\nUserProfile\r\n\t\r\n\r\nRenvoie le chemin d'accÃ¨s complet vers le rÃ©pertoire utilisateur de l'utilisateur actuellement loguÃ© sous la forme : %HomeDrive%\\Users\\%UserName%.\r\n\t\r\n\r\nDisponible sur tous les systÃ¨mes NT.\r\n\r\nWinDir\r\n\t\r\n\r\nRenvoie le chemin d'accÃ¨s complet jusqu'au rÃ©pertoire d'installation du systÃ¨me. Par dÃ©faut : %SystemDrive%\\Windows.\r\n\t\r\n\r\nDisponible sur tous les systÃ¨mes NT.\r\n\r\nTableau 3 : les variables d'environnement\r\nII-B. La commande Â« set Â»\r\nâ–²\r\n\r\nLa commande set gÃ¨re les variables dans l'interprÃ©teur, elle permet :\r\n\r\n    de crÃ©er une variable ;\r\n    d'attribuer une valeur Ã  une variable ;\r\n    de modifier le contenu d'une variable ;\r\n    de supprimer le contenu d'une variable ;\r\n    d'effectuer des opÃ©rations mathÃ©matiques ou logiques entre des nombres ;\r\n    de rÃ©cupÃ©rer la saisie d'un utilisateur pour la placer dans une variable ;\r\n    et de transtyper le contenu d'une variable.\r\n\r\nVoici la syntaxe de la commande set.\r\n\r\nAttribue Ã  la variable une valeur sous forme de chaÃ®ne de caractÃ¨res (oÃ¹ &lt;variable&gt; est son identifiant et &lt;chaÃ®ne&gt; est une chaÃ®ne de caractÃ¨res).\r\n\r\nset [\"]&lt;variable&gt;=&lt;chaÃ®ne&gt;[\"] \r\n\r\nAttribue Ã  la variable une valeur sous forme d'un nombre entier signÃ© (oÃ¹ &lt;expression&gt; est une expression numÃ©rique Ã  Ã©valuer : dÃ©taillÃ© par la suite).\r\n\r\nset /a [\"]&lt;expression&gt;[\"] \r\n\r\nAttribue Ã  la variable une valeur, saisie par l'utilisateur, sous forme de chaÃ®ne de caractÃ¨res aprÃ¨s l'affichage de la chaÃ®ne d'invite si elle est spÃ©cifiÃ©e (oÃ¹ &lt;variable&gt; est son identifiant et oÃ¹ &lt;chaÃ®ne_invite&gt; est une chaÃ®ne de caractÃ¨res affichÃ©e Ã  l'utilisateur afin de l'inviter Ã  saisir une chaÃ®ne au clavier).\r\n\r\nset /p [\"]&lt;variable&gt;=[&lt;chaÃ®ne_invite&gt;][\"] \r\n\r\nSupprime la valeur de la variable de la mÃ©moire, son identifiant reste indexÃ© par l'interprÃ©teur, mais sa valeur est indÃ©finie.\r\n\r\nset [\"]&lt;variable&gt;=[\"] \r\n\r\nVoici les rÃ¨gles usuelles de la commande set :\r\n\r\n    Si la commande set est employÃ©e sans paramÃ¨tre, elle affiche les variables dÃ©finies dans le contexte courant (dÃ©taillÃ© par la suite).\r\n    Si elle est utilisÃ©e avec comme paramÃ¨tre une chaÃ®ne (ou un nom de variable), sans valeur ni signe Ã©gal ; alors elle affiche la variable dont le nom correspond Ã  la chaÃ®ne donnÃ©e en paramÃ¨tre et/ou les variables ayant un nom commenÃ§ant par la chaÃ®ne donnÃ©e en paramÃ¨tre.\r\n    Si elle est utilisÃ©e avec un nom de variable et un signe Ã©gal sans valeur alors le contenu de la variable est vidÃ© de la mÃ©moire, il est possible de tester si une variable est dÃ©finie, mais nous aborderons ce point au prochain chapitre.\r\n    Toute chaÃ®ne non numÃ©rique dans l'expression Ã  Ã©valuer est traitÃ©e comme un identifiant de variable et est convertie en nombre avant d'Ãªtre utilisÃ©e (dans son utilisation avec le paramÃ¨tre /a), si la variable n'existe pas ou qu'elle est indÃ©finie, elle prend comme valeur 0.\r\n    Une expression numÃ©rique Ã  Ã©valuer devrait toujours Ãªtre placÃ©e entre guillemets afin de permettre l'utilisation des opÃ©rateurs logiques et des opÃ©rateurs de groupement.\r\n\r\nVoyons plus en dÃ©tail le fonctionnement de la commande set avec le script 9.\r\nScript 9\r\nSÃ©lectionnez\r\n1.\r\n2.\r\n3.\r\n4.\r\n5.\r\n6.\r\n7.\r\n8.\r\n9.\r\n10.\r\n11.\r\n12.\r\n13.\r\n14.\r\n15.\r\n16.\r\n17.\r\n18.\r\n19.\r\n20.\r\n\r\n@echo off\r\nset VAR_Espace_Un=\"Ma chaÃ®ne avec des espaces\"\r\nset VAR_Espace_Deux\"=Ma chaÃ®ne avec des espaces\"\r\nset \"VAR_Espace_Trois=Ma chaÃ®ne avec des espaces\"\r\n::il y a quatre espaces Ã  la fin de la ligne suivante\r\nset /p VAR_Saisie_Un=    ma saisie un:    \r\nset /p \"VAR_Saisie_Deux=    ma saisie deux:    \"\r\nset /a VAR_Calcul_Un=1+10\r\nset /a VAR_Calcul_Deux\"=2+20\"\r\nset /a \"VAR_Calcul_Trois=3+30\"\r\necho.\r\necho %VAR_Espace_Un%\r\necho %VAR_Espace_Deux%\r\necho %VAR_Espace_Trois%\r\necho.\r\nset VAR_Saisie\r\necho.\r\nset VAR_Calcul\r\necho.\r\npause\r\n\r\nVariable_Quote\r\n\r\nComme vous pouvez le constater, les guillemets occupent une place prÃ©pondÃ©rante dans ce script ; observez bien oÃ¹ ils sont placÃ©s. De la ligne 2 Ã  la ligne 4, les valeurs des variables sont des chaÃ®nes de caractÃ¨res avec des espaces. La dÃ©claration de la variable VAR_Espace_Un se fait avec des guillemets placÃ©s de part et d'autre de la chaÃ®ne, la dÃ©claration de la variable VAR_Espace_Deux se fait avec des guillemets : un placÃ© avant le signe Ã©gal et l'autre Ã  la fin de la chaÃ®ne ; la dÃ©claration de la troisiÃ¨me variable VAR_Espace_Trois se fait avec des guillemets : un placÃ© avant le nom de la variable et l'autre Ã  la fin de la ligne. Si on se reporte Ã  l'affichage obtenu, on remarque que la premiÃ¨re et la troisiÃ¨me variables affichent une sortie correcte ; la deuxiÃ¨me variable quant Ã  elle ne fonctionne pas ; on dÃ©duit donc facilement que si les guillemets s'ouvrent avant l'identifiant de la variable et se ferment aprÃ¨s la valeur de la variable, ils ne font pas partie de la variable ; et si les guillemets s'ouvrent avant la valeur de la variable et se ferment aprÃ¨s la valeur de la variable, ils font partie de la variable.\r\n\r\nLes deux saisies de l'utilisateur donnent aussi un rÃ©sultat intÃ©ressant, la ligne de commande qui dÃ©clare VAR_Saisie_Un n'utilise pas de guillemets ; par contre la ligne de commande qui dÃ©clare VAR_Saisie_Deux, elle, en utilise. Lors de l'affichage des invites de saisie utilisateur, les espaces se trouvant avant les chaÃ®nes d'invites ont disparu, et ceux se trouvant aprÃ¨s sont affichÃ©s. On en dÃ©duit que les espaces en dÃ©but de ligne sont ignorÃ©s et que ceux de la fin sont considÃ©rÃ©s comme faisant partie de la chaÃ®ne d'invite.\r\n\r\nEn ce qui concerne les variables VAR_Calcul_XXX, elles donnent toutes un rÃ©sultat valide cependant il est toujours prÃ©fÃ©rable de respecter les rÃ¨gles de syntaxe ; c'est-Ã -dire toujours mettre l'expression numÃ©rique entre guillemets. Cela sera utile dans la suite du chapitre.\r\nII-C. Les variables de type chaÃ®ne de caractÃ¨res\r\nâ–²\r\n\r\nCe sont, Ã  mon sens, les plus utilisÃ©es en batch. Ce sont toutes les variables composÃ©es de caractÃ¨res alphanumÃ©riques et autres caractÃ¨res. Les chaÃ®nes de caractÃ¨res sont dÃ©clarÃ©es via la commande set et il n'est pas nÃ©cessaire d'utiliser des guillemets pour que les espaces soient pris en compte comme faisant partie de la chaÃ®ne, et ce, oÃ¹ qu'ils soient placÃ©s dans la chaÃ®ne.\r\n\r\nElles offrent aussi d'autres possibilitÃ©s comme la substitution de chaÃ®ne dans l'expansion de la variable. Ainsi avec la syntaxe suivante, il est possible de modifier la variable lors de son expansion sans que cela n'altÃ¨re sa valeur (oÃ¹ &lt;variable&gt; est l'identifiant de la variable, &lt;old_string&gt; est la chaÃ®ne Ã  remplacer et &lt;new_string&gt; est la chaÃ®ne Ã  insÃ©rer Ã  la place de &lt;old_string&gt;). Exemple avec le script 10.\r\n\r\n%&lt;variable&gt;:&lt;old_string&gt;=&lt;new_string&gt;% \r\nScript 10\r\nSÃ©lectionnez\r\n1.\r\n2.\r\n3.\r\n4.\r\n5.\r\n6.\r\n\r\n@echo off\r\nset \"X=une chaÃ®ne\"\r\necho La variable avec substitution: %X:une=ma%\r\necho La valeur rÃ©elle de la variable: %X%\r\necho.\r\npause\r\n\r\nVariable_Parse_String_0\r\n\r\n&lt;old_string&gt; peut aussi Ãªtre une chaÃ®ne prÃ©cÃ©dÃ©e d'un astÃ©risque (*), dans ce cas, la substitution commencera du dÃ©but de la valeur de la variable et se finira aprÃ¨s la premiÃ¨re occurrence de la chaÃ®ne spÃ©cifiÃ©e dans la substitution. Exemple avec le script 11.\r\nScript 11\r\nSÃ©lectionnez\r\n1.\r\n2.\r\n3.\r\n4.\r\n5.\r\n\r\n@echo off\r\nset \"X=string\"\r\necho Substitution avec astÃ©risque: %X:*t=d%\r\necho.\r\npause\r\n\r\nVariable_Parse_String_1\r\n\r\nIl ne faut jamais utiliser un astÃ©risque seul dans la substitution, sans quoi, l'interprÃ©teur de commande se fermera sans autres formes de procÃ¨s. L'astÃ©risque en fin de chaÃ®ne ne provoque pas d'erreur, mais ne permet pas la substitution, la variable est expansÃ©e avec sa valeur d'origine.\r\n\r\nLa substitution ne modifie pas la valeur de la variable, elle transforme juste la variable au moment de son expansion. Pour modifier la valeur de la variable, il faut le faire avec la commande set. Exemple avec le script 12.\r\nScript 12\r\nSÃ©lectionnez\r\n1.\r\n2.\r\n3.\r\n4.\r\n5.\r\n6.\r\n\r\n@echo off\r\nset \"VAR=ma chaÃ®ne\"\r\necho %VAR%\r\nset \"VAR=%VAR:chaÃ®ne=voiture%\"\r\necho %VAR%\r\npause\r\n\r\nVariable_Parse_String_2.2\r\n\r\nVous pouvez aussi ne dÃ©velopper qu'une partie d'une chaÃ®ne en sÃ©lectionnant les caractÃ¨res voulus. Cela se fait via la syntaxe suivante (oÃ¹ &lt;variable&gt; est l'identifiant de la variable, &lt;index&gt; est l'index du premier caractÃ¨re en partant de 0 et &lt;longueur&gt; est la longueur de la sÃ©lection). Exemple avec le script 13.\r\n\r\n%&lt;variable&gt;:~&lt;index&gt;,&lt;longueur&gt;%\r\nScript 13\r\nSÃ©lectionnez\r\n1.\r\n2.\r\n3.\r\n4.\r\n5.\r\n6.\r\n\r\n@echo off\r\nset \"VAR=ma chaÃ®ne\"\r\necho %VAR:~0,2%\r\nset \"VAR=%VAR:~3,6%\"\r\necho %VAR%\r\npause\r\n\r\nImage non disponible\r\n\r\nSi la &lt;longueur&gt; n'est pas spÃ©cifiÃ©e, tout le reste de la chaÃ®ne est sÃ©lectionnÃ©, en partant du caractÃ¨re fourni en &lt;index&gt;. Si une des valeurs donnÃ©es est nÃ©gative, alors la valeur utilisÃ©e est la longueur totale de la chaÃ®ne ajoutÃ©e Ã  la valeur nÃ©gative.\r\nScript 14\r\nSÃ©lectionnez\r\n1.\r\n2.\r\n3.\r\n4.\r\n5.\r\n6.\r\n7.\r\n8.\r\n9.\r\n10.\r\n11.\r\n\r\n@echo off\r\nrem Dans ce script, les caractÃ¨res ^^ servent Ã  Ã©chapper les caractÃ¨res spÃ©ciaux.\r\nset \"VAR=ma chaÃ®ne\"\r\nrem longueur de var :  9 caractÃ¨res\r\necho %VAR:~-6%\r\nrem   9+^(-6^) = 9-6 = 3\r\nrem la chaÃ®ne sera dÃ©veloppÃ©e Ã  partir de l'index 3 et jusqu'Ã  la fin ^(aucune longueur n'est donnÃ©e^).\r\necho %VAR:~0,-7%\r\nrem    9+^(-7^) = 9-7 = 2\r\nrem la chaÃ®ne sera dÃ©veloppÃ©e Ã  partir de l'index 0 et sur une longueur de 2 caractÃ¨res\r\npause\r\n\r\nVariable_Parse_String_2\r\nII-D. Les variables de type nombre entier signÃ©\r\nâ–²\r\n\r\nLa commande set /a permet d'utiliser les nombres entiers signÃ©s allant de -2 147 483 648 Ã  +2 147 483 647 (codÃ©s sur 32bits). Si vous n'utilisez pas le paramÃ¨tre /a dans la commande, alors la sÃ©quence de chiffres sera considÃ©rÃ©e comme Ã©tant une chaÃ®ne de caractÃ¨res, et non un nombre. La syntaxe de la commande set /a est la suivante.\r\n\r\nset /a &lt;expression&gt; \r\n\r\n&lt;expression&gt; utilise, quant Ã  elle, la syntaxe suivante.\r\n\r\n[\"]&lt;identifiant&gt;[&lt;attribution&gt;[{&lt;immÃ©diate&gt;|&lt;sous-expression&gt;}]][\"] \r\n\r\nLes expressions numÃ©riques doivent Ãªtre placÃ©es entre des guillemets si elles contiennent des opÃ©rateurs logiques ou de groupement (dÃ©taillÃ© plus loin dans ce chapitre). Ces diffÃ©rentes constituantes sont :\r\n\r\n    &lt;identifiant&gt; qui est l'identifiant de la variable de destination ;\r\n    &lt;attribution&gt; qui est l'opÃ©rateur d'attribution de l'expression, comme le signe Ã©gal qui effectue l'opÃ©ration d'attribuer une valeur Ã  une variable, d'autres opÃ©rateurs d'attribution seront dÃ©taillÃ©s dans cette section ;\r\n    puis soit &lt;immÃ©diate&gt; qui est une valeur immÃ©diate (un nombre quelconque), soit &lt;sous-expression&gt; qui est une sous-expression, ces derniÃ¨res seront dÃ©taillÃ©es dans le reste de cette section.\r\n\r\nVous pouvez spÃ©cifier plusieurs expressions en les sÃ©parant par des virgules.\r\nScript 15\r\nSÃ©lectionnez\r\n\r\n@echo off\r\nset /a \"VAR1=1\", \"VAR2=2\"\r\necho VAR1: %VAR1%\r\necho VAR2: %VAR2%\r\npause\r\n\r\nImage non disponible\r\n\r\nLes chaÃ®nes de caractÃ¨res prÃ©sentes dans l'expression sont considÃ©rÃ©es comme des variables et sont expansÃ©es (Ã  l'exception de l'identifiant de la variable de destination), cela permet de faire des opÃ©rations sur des variables sans avoir Ã  utiliser de symbole % pour leur expansion.\r\nScript 16\r\nSÃ©lectionnez\r\n\r\n@echo off\r\nset /a \"VAR1=1\"\r\nset /a \"VAR2=VAR1\"\r\necho VAR1: %VAR1%\r\necho VAR2: %VAR2%\r\npause\r\n\r\nSet_a_var_unexpand\r\n\r\nSi un nom de variable inexistante ou indÃ©finie est utilisÃ©, alors elle prend la valeur 0.\r\nScript 17\r\nSÃ©lectionnez\r\n1.\r\n2.\r\n3.\r\n4.\r\n5.\r\n\r\n@echo off\r\nrem La variable VAR1 n'existe pas.\r\nset /a \"VAR2=VAR1\"\r\necho VAR2: %VAR2%\r\npause\r\n\r\nImage non disponible\r\n\r\nLes sous-expressions sont constituÃ©es de nombres, d'opÃ©rateurs et Ã©ventuellement de parenthÃ¨ses, ces derniÃ¨res s'utilisent de la mÃªme maniÃ¨re qu'en mathÃ©matiques et elles n'ont pas besoin d'Ãªtre Ã©chappÃ©es si, et seulement si, les guillemets sont utilisÃ©s. Toutes les constituantes d'une sous-expression sont soumises Ã  la prÃ©sÃ©ance, c'est-Ã -dire l'ordre dans lequel les diverses constituantes vont Ãªtre Ã©valuÃ©es. L'ordre de prÃ©sÃ©ance utilisÃ© est le suivant (dans l'ordre dÃ©croissant d'Ã©valuation) :\r\n\r\n    le groupement soit ( ) ;\r\n    les opÃ©rateurs unaires ! ~ - ;\r\n    les opÃ©rateurs arithmÃ©tiques * / % ;\r\n    les opÃ©rateurs arithmÃ©tiques + - ;\r\n    le dÃ©calage logique &lt;&lt; &gt;&gt; ;\r\n    le ET au niveau du bit &amp; ;\r\n    le OU exclusif au niveau du bit ^ ;\r\n    le OU inclusif au niveau du bit | ;\r\n    l''attribution = *= /= %= += -= &amp;= ^= |= &lt;&lt;= &gt;&gt;= ;\r\n    le sÃ©parateur d'expression ,.\r\n\r\nIl faut Ã©galement noter que l'utilisation du nombre -2 147 483 648 tel quel dans une expression provoque une erreur, c'est dÃ» au transtypage effectuÃ© par l'interprÃ©teur. Ce dernier Ã©value d'abord la chaÃ®ne 2 147 483 648 afin de la transtyper puis lui applique l'opÃ©rateur unaire -. Mais comme le nombre 2 147 483 648 va au-delÃ  de la dÃ©finition d'un nombre sur 32bits, l'opÃ©ration gÃ©nÃ¨re une erreur, exemple avec le script suivant.\r\nScript 18\r\nSÃ©lectionnez\r\n1.\r\n2.\r\n3.\r\n4.\r\n5.\r\n6.\r\n7.\r\n8.\r\n9.\r\n10.\r\n\r\n@echo off\r\necho Nombre brute:\r\nset /a \"ParseError=-2147483648\"\r\necho %ParseError%\r\necho.\r\necho Nombre avec Ã©valuation:\r\nset /a \"ParseError=-2147483647 - 1\"\r\necho %ParseError%\r\necho.\r\npause\r\n\r\nParse_Error\r\n\r\nUne autre mÃ©thode qui fonctionne pour ce cas est la suivante.\r\nScript 19\r\nSÃ©lectionnez\r\n1.\r\n2.\r\n3.\r\n4.\r\n5.\r\n\r\n@echo off\r\nset \"SInt32=-2147483648\"\r\nset /a \"SInt32\"\r\necho %SInt32%\r\npause\r\n\r\nTransTypage\r\nII-D-1. Les opÃ©rations arithmÃ©tiques\r\nâ–²\r\n\r\nLa commande set /a prend en charge les cinq opÃ©rations arithmÃ©tiques suivantes :\r\n\r\n    l'addition ;\r\n    la soustraction ;\r\n    la multiplication ;\r\n    la division ;\r\n    et le modulo (le modulo est une opÃ©ration qui sert Ã  rÃ©cupÃ©rer le reste d'une division).\r\n\r\nOpÃ©rateur arithmÃ©tique\r\n\t\r\n\r\nOpÃ©rateur d'attribution\r\n\t\r\n\r\nOpÃ©ration effectuÃ©e\r\n\r\n+\r\n\t\r\n\r\n+=\r\n\t\r\n\r\nAddition\r\n\r\n-\r\n\t\r\n\r\n-=\r\n\t\r\n\r\nSoustraction\r\n\r\n*\r\n\t\r\n\r\n*=\r\n\t\r\n\r\nMultiplication\r\n\r\n/\r\n\t\r\n\r\n/=\r\n\t\r\n\r\nDivision\r\n\r\n%\r\n\t\r\n\r\n%=\r\n\t\r\n\r\nModulo\r\n\r\nTableau 4 : OpÃ©rations arithmÃ©tiques\r\n\r\nUne note particuliÃ¨re pour le modulo : dans un script de commande, le symbole du modulo % doit Ãªtre prÃ©fixÃ© du caractÃ¨re d'Ã©chappement %. Dans ce cas, c'est un piÃ¨ge dans lequel le novice peut se perdre, le premier symbole % est un caractÃ¨re d'Ã©chappement qui permet au deuxiÃ¨me symbole %, le modulo, d'Ãªtre pris en compte Ã  l'exÃ©cution du script. Dans l'interprÃ©teur de commande, le modulo (%) n'as pas besoin d'Ãªtre Ã©chappÃ©, c'est une spÃ©cificitÃ© du script. Ainsi la commande suivante fonctionne dans l'interprÃ©teur.\r\n\r\nset /a \"Mod=5 % 2\" \r\n\r\nAlors que celle-ci ne fonctionne pas.\r\n\r\nset /a \"Mod=5 %% 2\" \r\nModulo_0\r\n\r\nDans un script, par contre, c'est l'inverse.\r\nScript 20\r\nSÃ©lectionnez\r\n1.\r\n2.\r\n3.\r\n4.\r\n5.\r\n6.\r\n\r\n@echo off\r\nset /a \"Mod=5 % 2\"\r\necho Mod1: %Mod%\r\nset /a \"Mod=5 %% 2\"\r\necho Mod2: %Mod%\r\npause\r\n\r\nModulo_1\r\n\r\nAinsi, les opÃ©rations arithmÃ©tiques s'utilisent de maniÃ¨re Â« classique Â» dans les sous-expressions. Si une variable inexistante ou indÃ©finie est utilisÃ©e dans une sous-expression, elle prend la valeur 0, exemple avec le script 21.\r\nScript 21\r\nSÃ©lectionnez\r\n1.\r\n2.\r\n3.\r\n4.\r\n5.\r\n6.\r\n7.\r\n8.\r\n9.\r\n10.\r\n11.\r\n12.\r\n13.\r\n\r\n@echo off\r\nset /a \"Un=1\"\r\nset /a \"Deux=1 + 1\"\r\nset /a \"Trois=4 - 1\"\r\nset /a \"Quatre=2 * 2\"\r\nset /a \"Cinq=10 / 2\"\r\nset /a \"Six=26 %% 10\"\r\nset /a \"Sept=(( 2 + 1 ) * 2 ) + 1\"\r\nrem La variable Dix n'existe pas.\r\nset /a \"Huit=8+Dix\",\"Neuf=10-Un\"\r\necho %Un%, %Deux%, %Trois%, %Quatre%, %Cinq%, %Six%, %Sept%, %Huit%, %Neuf%\r\necho.\r\npause\r\n\r\nImage non disponible\r\n\r\nL'attribution permet d'effectuer des opÃ©rations sur des variables existantes, si une variable inexistante ou indÃ©finie est utilisÃ©e, elle prend la valeur 0.\r\nScript 22\r\nSÃ©lectionnez\r\n1.\r\n2.\r\n3.\r\n4.\r\n5.\r\n6.\r\n7.\r\n8.\r\n9.\r\n10.\r\n11.\r\n12.\r\n\r\n@echo off\r\nset /a \"Attrib1=1\",\"Attrib2=2\",\"Attrib3=3\",\"Attrib4=4\",\"Attrib5=5\"\r\nrem La variable Attrib0 n'existe pas.\r\nset /a \"Attrib0+=1\"\r\nset /a \"Attrib1+=1\"\r\nset /a \"Attrib2*=2\"\r\nset /a \"Attrib3-=2\"\r\nset /a \"Attrib4/=2\"\r\nset /a \"Attrib5%%=2\"\r\necho %Attrib0%, %Attrib1%, %Attrib2%, %Attrib3%, %Attrib4%, %Attrib5%\r\necho.\r\npause\r\n\r\nVariable_Attribution\r\nII-D-2. Les opÃ©rations logiques\r\nâ–²\r\n\r\nElles ne peuvent s'effectuer que sur des nombres et suivent les rÃ¨gles de l'algÃ¨bre de Boole. Les opÃ©rations logiques prises en charge par la commande set /a possÃ¨dent, elles aussi, des opÃ©rateurs d'attribution. Exemple avec le script 23.\r\n\r\nOpÃ©rateur logique\r\n\t\r\n\r\nOpÃ©rateur d'attribution\r\n\t\r\n\r\nDescription\r\n\r\n&amp;\r\n\t\r\n\r\n&amp;=\r\n\t\r\n\r\nET logique au niveau du bit. (Bitwise AND)\r\n\r\n^\r\n\t\r\n\r\n^=\r\n\t\r\n\r\nOU exclusif au niveau du bit. (Bitwise XOR)\r\n\r\n|\r\n\t\r\n\r\n|=\r\n\t\r\n\r\nOU inclusif au niveau du bit. (Bitwise OR)\r\n\r\n&lt;&lt;\r\n\t\r\n\r\n&lt;&lt;=\r\n\t\r\n\r\nDÃ©calage logique vers la gauche. Le bit entrant est Ã  zÃ©ro (pour l'Ã©lÃ©vation par puissances de deux).\r\n\r\n&gt;&gt;\r\n\t\r\n\r\n&gt;&gt;=\r\n\t\r\n\r\nDÃ©calage logique vers la droite. Le bit entrant est Ã©gal au bit de signe (pour la propagation du bit de signe).\r\n\r\nTableau 5 : Les opÃ©rateurs logiques\r\nScript 23\r\nSÃ©lectionnez\r\n\r\n@echo off\r\nset /a \"Val1=-2147483647 - 1\"\r\nset /a \"Val2=1\"\r\nset /a \"Val1SwitchL01=Val1&lt;&lt;1\",\"Val1SwitchL15=Val1&lt;&lt;15\",\"Val1SwitchL31=Val1&lt;&lt;31\"\r\nset /a \"Val2SwitchL01=Val2&lt;&lt;1\",\"Val2SwitchL15=Val2&lt;&lt;15\",\"Val2SwitchL31=Val2&lt;&lt;31\"\r\nset /a \"Val1SwitchR01=Val1&gt;&gt;1\",\"Val1SwitchR15=Val1&gt;&gt;15\",\"Val1SwitchR31=Val1&gt;&gt;31\"\r\nset /a \"Val2SwitchR01=Val2&gt;&gt;1\",\"Val2SwitchR15=Val2&gt;&gt;15\",\"Val2SwitchR31=Val2&gt;&gt;31\"\r\nset /a \"Val1AttribSwitchR=Val1\",\"Val1AttribSwitchR&gt;&gt;=15\"\r\nset /a \"Val2AttribSwitchL=Val2\",\"Val2AttribSwitchL&lt;&lt;=15\"\r\necho %Val1% ^&lt;^&lt; 1: %Val1SwitchL01%\r\necho %Val1% ^&lt;^&lt; 15: %Val1SwitchL15%\r\necho %Val1% ^&lt;^&lt; 31: %Val1SwitchL31%\r\necho.\r\necho %Val2% ^&lt;^&lt; 1: %Val2SwitchL01%\r\necho %Val2% ^&lt;^&lt; 15: %Val2SwitchL15%\r\necho %Val2% ^&lt;^&lt; 31: %Val2SwitchL31%\r\necho.\r\necho %Val1% ^&gt;^&gt; 1: %Val1SwitchR01%\r\necho %Val1% ^&gt;^&gt; 15: %Val1SwitchR15%\r\necho %Val1% ^&gt;^&gt; 31: %Val1SwitchR31%\r\necho.\r\necho %Val2% ^&gt;^&gt; 1: %Val2SwitchR01%\r\necho %Val2% ^&gt;^&gt; 15: %Val2SwitchR15%\r\necho %Val2% ^&gt;^&gt; 31: %Val2SwitchR31%\r\necho.\r\necho %Val1% ^&gt;^&gt;= 15: %Val1AttribSwitchR%\r\necho %Val2% ^&lt;^&lt;= 15: %Val2AttribSwitchL%\r\necho.\r\nset /a \"Val3=1431655765\"\r\nset /a \"Val4=-858993460\"\r\nset /a \"Val3LogicalOrVal4=Val3 | Val4\"\r\nset /a \"Val3LogicalXorVal4=Val3 ^ Val4\"\r\nset /a \"Val3LogicalAndVal4=Val3 &amp; Val4\"\r\nset /a \"Val3AttribOrVal4=Val3\",\"Val3AttribOrVal4|=Val4\"\r\nset /a \"Val3AttribXorVal4=Val3\",\"Val3AttribXorVal4^=Val4\"\r\nset /a \"Val3AttribAndVal4=Val3\",\"Val3AttribAndVal4&amp;=Val4\"\r\necho %Val3% ^| %Val4%: %Val3LogicalOrVal4%\r\necho %Val3% ^|= %Val4%: %Val3AttribOrVal4%\r\necho.\r\necho %Val3% ^^ %Val4%: %Val3LogicalXorVal4%\r\necho %Val3% ^^= %Val4%: %Val3AttribXorVal4%\r\necho.\r\necho %Val3% ^&amp; %Val4%: %Val3LogicalAndVal4%\r\necho %Val3% ^&amp;= %Val4%: %Val3AttribAndVal4%\r\necho.\r\npause\r\n\r\nVariable_AlgBool\r\nII-D-3. Les opÃ©rateurs unaires\r\nâ–²\r\n\r\nN.B. : Dans les sections II.D.3, II.E et II.F de ce document, sont abordÃ©s diffÃ©rents concepts de reprÃ©sentation numÃ©rique communÃ©ment utilisÃ©s en informatique, tels que :\r\n\r\n    l'Ã©criture de nombre en binaire ;\r\n    l'Ã©criture de nombre en hexadÃ©cimal ;\r\n    l'Ã©criture de nombre en octal ;\r\n    la reprÃ©sentation des nombres en complÃ©ment Ã  un ;\r\n    la reprÃ©sentation des nombres entiers signÃ©s en complÃ©ment Ã  deux.\r\n\r\nIl est donc nÃ©cessaire, si vous ne les connaissez pas, de faire des recherches sur WikipÃ©dia.\r\n\r\n    SystÃ¨me binaire, complÃ©ment Ã  un et complÃ©ment Ã  deux ;\r\n    Notation octale ;\r\n    Notation hexadÃ©cimale.\r\n\r\nLes opÃ©rateurs unaires ne s'appliquent qu'aux nombres qu'ils prÃ©cÃ¨dent, ils ne possÃ¨dent donc pas d'opÃ©rateur d'attribution. Leur syntaxe est la suivante (oÃ¹ &lt;unaire&gt; est l'opÃ©rateur unaire et &lt;nombre&gt; est le nombre auquel il s'applique).\r\n\r\n&lt;unaire&gt;&lt;nombre&gt; \r\n\r\nOpÃ©rateur unaire\r\n\t\r\n\r\nDescription\r\n\r\n!\r\n\t\r\n\r\nNON logique, renvoie 1 si le nombre est Ã©gal Ã  0 et 0 sinon. (Logical NOT).\r\n\r\n~\r\n\t\r\n\r\nNON au niveau du bit, complÃ©ment Ã  un. (Bitwise NOT)\r\n\r\n-\r\n\t\r\n\r\nRenvoie la valeur inverse, soit un nombre nÃ©gatif si le nombre d'origine est positif, complÃ©ment Ã  deux. (NEG)\r\n\r\nTableau 6 : Les opÃ©rateurs unaires\r\n\r\nExemple avec le script 24.\r\nScript 24\r\nSÃ©lectionnez\r\n1.\r\n2.\r\n3.\r\n4.\r\n5.\r\n6.\r\n7.\r\n8.\r\n9.\r\n10.\r\n11.\r\n12.\r\n13.\r\n14.\r\n15.\r\n16.\r\n17.\r\n18.\r\n19.\r\n20.\r\n21.\r\n22.\r\n23.\r\n24.\r\n25.\r\n26.\r\n27.\r\n28.\r\n29.\r\n30.\r\n31.\r\n32.\r\n33.\r\n34.\r\n\r\n@echo off\r\n\r\nrem Veuillez vous assurer d'utiliser le bon encodage, sans quoi l'affichage ne sera pas celui attendu.\r\n\r\nset /a \"Val1=2147483647\"\r\nset /a \"Val2=1\"\r\nset /a \"Val3=0\"\r\n\r\nset /a \"LogicalNOT_Val1=!Val1\"\r\nset /a \"LogicalNOT_Val2=!Val2\"\r\nset /a \"LogicalNOT_Val3=!Val3\"\r\n\r\nset /a \"BitwiseNOT_Val1=~Val1\"\r\nset /a \"BitwiseNOT_Val2=~Val2\"\r\nset /a \"BitwiseNOT_Val3=~Val3\"\r\n\r\nset /a \"NEG_Val1=-Val1\"\r\nset /a \"NEG_Val2=-Val2\"\r\nset /a \"NEG_Val3=-Val3\"\r\n\r\necho              â•”â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•—\r\necho              â•‘                 Nombre                 â•‘\r\necho â•”â•â•â•â•â•â•â•â•â•â•â•â•â•¬â•â•â•â•â•â•â•â•â•â•â•â•â•â•¦â•â•â•â•â•â•â•â•â•â•â•â•â•â•¦â•â•â•â•â•â•â•â•â•â•â•â•â•£\r\necho â•‘ OpÃ©rateur  â•‘ %Val1%  â•‘      %Val2%      â•‘     %Val3%      â•‘\r\necho â• â•â•â•â•â•â•â•â•â•â•â•â•â•¬â•â•â•â•â•â•â•â•â•â•â•â•â•â•¬â•â•â•â•â•â•â•â•â•â•â•â•â•â•¬â•â•â•â•â•â•â•â•â•â•â•â•â•£\r\necho â•‘ LogicalNOT â•‘ %LogicalNOT_Val1%           â•‘ %LogicalNOT_Val2%           â•‘ %LogicalNOT_Val3%          â•‘\r\necho â• â•â•â•â•â•â•â•â•â•â•â•â•â•¬â•â•â•â•â•â•â•â•â•â•â•â•â•â•¬â•â•â•â•â•â•â•â•â•â•â•â•â•â•¬â•â•â•â•â•â•â•â•â•â•â•â•â•£\r\necho â•‘ BitwiseNOT â•‘ %BitwiseNOT_Val1% â•‘ %BitwiseNOT_Val2%          â•‘ %BitwiseNOT_Val3%         â•‘\r\necho â• â•â•â•â•â•â•â•â•â•â•â•â•â•¬â•â•â•â•â•â•â•â•â•â•â•â•â•â•¬â•â•â•â•â•â•â•â•â•â•â•â•â•â•¬â•â•â•â•â•â•â•â•â•â•â•â•â•£\r\necho â•‘ NEG        â•‘ %NEG_Val1% â•‘ %NEG_Val2%          â•‘ %NEG_Val3%          â•‘\r\necho â•šâ•â•â•â•â•â•â•â•â•â•â•â•â•©â•â•â•â•â•â•â•â•â•â•â•â•â•â•©â•â•â•â•â•â•â•â•â•â•â•â•â•â•©â•â•â•â•â•â•â•â•â•â•â•â•â•\r\n\r\necho.\r\npause\r\n\r\nUnaire\r\nII-E. Les nombres entiers signÃ©s en notation hexadÃ©cimale\r\nâ–²\r\n\r\nLes nombres en notation hexadÃ©cimale doivent Ãªtre dÃ©clarÃ©s comme des nombres entiers en notation dÃ©cimale (ce que nous avons utilisÃ© jusqu'Ã  maintenant) avec la commande set /a \"&lt;expression&gt;\" et toujours Ãªtre prÃ©fixÃ©s par 0x (chiffre zÃ©ro suivi de la lettre Â« x Â»). La commande set /a a pour effet de transformer toutes les valeurs entrÃ©es en valeurs numÃ©riques. Si c'est une chaÃ®ne de caractÃ¨res alors la commande cherchera une variable portant ce nom, si c'est un nombre hexadÃ©cimal alors la commande set /a codera le nombre tel quel en binaire. Cependant, mÃªme si un nombre est fourni en notation hexadÃ©cimale, l'interprÃ©teur l'expanse toujours en notation dÃ©cimale, exemple avec le script 25.\r\nScript 25\r\nSÃ©lectionnez\r\n1.\r\n2.\r\n3.\r\n4.\r\n5.\r\n\r\n@echo off\r\nrem le nombre 0x1 vaut 1 et le nombre 0x3 vaut 3.\r\nset /a \"Hexa=0x1 + 0x3\"\r\necho RÃ©sultat:    %Hexa%\r\npause\r\n\r\nHexa_0\r\n\r\nLe rÃ©sultat du script 25 nous montre que le calcul s'effectue correctement, de mÃªme avec le script 26.\r\nScript 26\r\nSÃ©lectionnez\r\n1.\r\n2.\r\n3.\r\n4.\r\n5.\r\n6.\r\n\r\n@echo off\r\nrem le nombre 0x5 vaut 5 et le nombre 0x8 vaut 8.\r\nset /a \"Hexa=0x5 + 0x8\"\r\nrem Le rÃ©sultat doit donc Ãªtre 0xD qui vaut 13.\r\necho RÃ©sultat:    %Hexa%\r\npause\r\n\r\nHexa_1\r\n\r\nJusque-lÃ  tout va bien mÃªme si le rÃ©sultat n'est pas en notation hexadÃ©cimale, il est quand mÃªme celui attendu. Le problÃ¨me c'est que l'interprÃ©teur de commande utilise toujours la reprÃ©sentation en complÃ©ment Ã  deux pour coder un nombre entier signÃ©. Ainsi, dÃ¨s lors que l'on utilise un nombre en notation hexadÃ©cimale supÃ©rieur Ã  0x7FFFFFFF (soit 2 147 483 647 en notation dÃ©cimale), ce nombre est en fait un nombre nÃ©gatif comme le montre le script 27.\r\nScript 27\r\nSÃ©lectionnez\r\n1.\r\n2.\r\n3.\r\n4.\r\n\r\n@echo off\r\nset /a \"Hexa=0x80000000\"\r\necho RÃ©sultat:    %Hexa%\r\npause\r\n\r\nHexa_2\r\n\r\nUn rÃ©sultat plutÃ´t dÃ©routant pour quiconque ne s'y attend pas, en effet la repr",
        "motscles": "BAT tuto"
      },
      {
        "0": "7012019",
        "1": "2019-01-07",
        "2": "Le profil rÃ©seau est enregistrÃ©, comme la plupart des configurations de Windows, dans le registre Windows.\r\nIl est donc possible de modifier le type de rÃ©seau depuis la base de registre Windows en utilisant lâ€™Ã©diteur du registre Windows.\r\n\r\n    Sur votre clavier, appuyez sur la touche Windows + R\r\n    Dans la fenÃªtre exÃ©cuter, saisissez regedit et appuyez sur EntrÃ©e\r\n    DÃ©roulez lâ€™arborescence suivante en cliquant sur les + : HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\NetworkList\\Profiles",
        "3": "Reseau public prive",
        "id": "7012019",
        "date": "2019-01-07",
        "texte": "Le profil rÃ©seau est enregistrÃ©, comme la plupart des configurations de Windows, dans le registre Windows.\r\nIl est donc possible de modifier le type de rÃ©seau depuis la base de registre Windows en utilisant lâ€™Ã©diteur du registre Windows.\r\n\r\n    Sur votre clavier, appuyez sur la touche Windows + R\r\n    Dans la fenÃªtre exÃ©cuter, saisissez regedit et appuyez sur EntrÃ©e\r\n    DÃ©roulez lâ€™arborescence suivante en cliquant sur les + : HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\NetworkList\\Profiles",
        "motscles": "Reseau public prive"
      },
      {
        "0": "14012019",
        "1": "2019-01-14",
        "2": "Commandes\r\nCertaines commandes sont dangereuses (l'exemple de SYSKEY) et peuvent causer des problÃ¨mes pouvant conduire au formatage. D'autres commandes ne sont pas exÃ©cutables sous des versions antÃ©rieures de Windows.\r\nPanneau de configuration\r\n\r\n    APPWIZ.CPL : ouvre l'outil Ajouter/Supprimer un programme\r\n    AZMAN.MSC : ouvre le gestionnaire d'autorisations (Pour Vista uniquement)\r\n    CERTMGR.MSC : ouvre les certificats pour l'utilisateur actuel\r\n    CLICONFG : ouvre la configuration des clients SQL\r\n    COMEXP.MSC ou bien DCOMCNFG : ouvre l'outil services et composants (Pour Vista uniquement)\r\n    COMPMGMT.MSC : ouvre l'outil de gestion de l'ordinateur\r\n    COMPUTERDEFAULTS : ouvrir l'outil des programmes par dÃ©faut (Pour Vista uniquement)\r\n    CONTROL /NAME MICROSOFT.BACKUPANDRESTORECENTER : ouvre le centre de sauvegarde et de restauration (Pour Vista uniquement). Tutoriel ICI\r\n    CONTROL ADMINTOOLS : ouvre les outils d'administrations\r\n    CONTROL COLOR : ouvre les paramÃ¨tres de l'apparence\r\n    CONTROL FOLDERS : ouvre les options de dossiers\r\n    CONTROL FONTS : ouvre le gestionnaire de polices\r\n    CONTROL INTERNATIONAL ou bien INTL.CPL : ouvre les options rÃ©gionales et linguistiques\r\n    CONTROL KEYBOARD : ouvre les propriÃ©tÃ©s du clavier\r\n    CONTROL MOUSE ou bien MAIN.CPL : ouvre les propriÃ©tÃ©s de la souris\r\n    CONTROL PRINTERS : ouvre les imprimantes et les fax disponibles\r\n    CONTROL USERPASSWORDS : ouvre l'Ã©diteur des comptes utilisateurs\r\n    CONTROL USERPASSWORDS2 ou bien NETPLWIZ : contrÃ´le les utilisateurs et leurs accÃ¨s\r\n    CONTROL : ouvre le panneau de configuration\r\n    CREDWIZ : ouvre l'outil de sauvegarde et restauration des mots de passe des utilisateurs (Pour Vista uniquement)\r\n    DESK.CPL : ouvre les paramÃ¨tres d'affichage\r\n    DEVMGMT.MSC : ouvre les gestionnaire de pÃ©riphÃ©riques. Tutoriel ICI\r\n    DRWTSN32 : ouvre Dr. Watson (Pour XP uniquement)\r\n    DXDIAG : ouvre l'outil de diagnostic DirectX\r\n    EVENTVWR ou bien EVENTVWR.MSC : ouvre l'observateur d'Ã©vÃ¨nements\r\n    FSMGMT.MSC : ouvre les dossiers partagÃ©s\r\n    GPEDIT.MSC : ouvre l'Ã©diteur des stratÃ©gies de groupe (Pour les Ã©ditions professionnelles et plus de Windows)\r\n    HDWWIZ.CPL : ouvre l'assistant ajout de matÃ©riels\r\n    INFOCARDCPL.CPL : ouvre l'assistant compatibilitÃ© des programmes\r\n    IRPROPS.CPL : ouvre le gestionnaire d'infrarouge\r\n    ISCSICPL : ouvre l'outil de configuration de l'initiateur ISCI Microsoft (Pour Vista uniquement)\r\n    JOY.CPL : ouvre l'outil de contrÃ´leur de jeu\r\n    LPKSETUP : ouvre l'assistant d'installation et dÃ©sinstallation des langues d'affichage (Pour Vista uniquement)\r\n    LUSRMGR.MSC : ouvre l'Ã©diteur des utilisateurs et groupes locaux\r\n    MDSCHED : ouvre l'outil de diagnostics de la mÃ©moire Windows (Pour Vista uniquement)\r\n    MMC : ouvre une nouvelle console vide\r\n    MMSYS.CPL : ouvre les paramÃ¨tres de sons\r\n    MOBSYNC : ouvre le centre de synchronisation\r\n    MSCONFIG : ouvre l'outil de configuration du systÃ¨me\r\n    NAPCLCFG.MSC : ouvre l'outil de configuration du client NAP (Pour Vista uniquement)\r\n    NTMSMGR.MSC : ouvre le gestionnaire des supports de stockage amovibles\r\n    NTMSOPRQ.MSC : ouvre les demandes de l'opÃ©rateur de stockage amovible\r\n    ODBCAD32 : ouvre l'administrateur de sources de donnÃ©es ODBC\r\n    OPTIONALFEATURES : ouvre l'outil Ajouter/Supprimer des composants Windows (Pour Vista uniquement)\r\n    PERFMON ou bien PERFMON.MSC : ouvre le moniteur de fiabilitÃ© et de performances Windows.\r\n    POWERCFG.CPL : ouvre le gestionnaire des modes d'alimentation (Pour Vista uniquement)\r\n    REGEDIT ou bien REGEDT32 (Pour Vista uniquement) : ouvre l'Ã©diteur de registre\r\n    REKEYWIZ : ouvre le gestionnaire des certificats de chiffrement de fichiers (Pour Vista uniquement)\r\n    RSOP.MSC : ouvre le jeu de stratÃ©gie rÃ©sultant\r\n    SECPOL.MSC : ouvre les paramÃ¨tres de sÃ©curitÃ©s locales\r\n    SERVICES.MSC : ouvre le gestionnaire de services\r\n    SYSDM.CPL : ouvre les propriÃ©tÃ©s systÃ¨me\r\n    SYSEDIT : ouvre l'Ã©diteur de configuration systÃ¨me (Attention, Ã  manipuler avec prudence)\r\n    SYSKEY : ouvre l'utilitaire de protection de la base de donnÃ©es des comptes Windows (Attention, Ã  manipuler avec extrÃªme prudence !)\r\n    SYSPREP: ouvre le dossier contenant l'outil de prÃ©paration du systÃ¨me (Pour Vista uniquement)\r\n    TABLETPC.CPL : ouvre les paramÃ¨tres pour Tablet pc (Pour Vista uniquement)\r\n    TASKSCHD.MSC ou bien CONTROL SCHEDTASKS : ouvre le planificateur de tÃ¢ches (Pour Vista uniquement)\r\n    TELEPHON.CPL : ouvre l'outil de connexion tÃ©lÃ©phonique\r\n    TIMEDATE.CPL : ouvre les paramÃ¨tres de l'heure et de la date\r\n    TPM.MSC : ouvre l'outil gestion de module de plateforme sÃ©curisÃ©e sur l'ordinateur local (Pour Vista uniquement)\r\n    UTILMAN : ouvre les options d'ergonomie (Pour Vista uniquement)\r\n    VERIFIER : ouvre le gestionnaire de vÃ©rification des pilotes\r\n    WMIMGMT.MSC : ouvre Windows Management Infrastructure\r\n    WSCUI.CPL : ouvre le centre de sÃ©curitÃ© Windows\r\n    WUAUCPL.CPL : ouvre le service de mise Ã  jour Windows (Pour XP uniquement)\r\n\r\n\r\nProgrammes et outils Windows\r\n\r\n    %WINDIR%\\SYSTEM32\\RESTORE\\RSTRUI.EXE : ouvre l'outil de restauration de systÃ¨me (Pour XP uniquement). Tutoriel ICI\r\n    CALC : ouvre la calculatrice\r\n    CHARMAP : ouvre la table des caractÃ¨res\r\n    CLIPBRD : ouvre le presse papier (Pour XP uniquement, pour l'ajouter Ã  Vista voir ICI)\r\n    CMD : ouvre l'invite de commandes\r\n    DIALER : ouvre le numÃ©rateur tÃ©lÃ©phonique de Windows\r\n    DVDPLAY : ouvre votre lecteur DVD\r\n    EUDCEDIT : ouvre l'Ã©diteur de caractÃ¨res privÃ©s\r\n    EXPLORER : ouvre l'explorateur Windows\r\n    FSQUIRT : Assistant transfert Bluetooth\r\n    IEXPLORE : ouvre Internet Explorer\r\n    IEXPRESS : ouvre l'assistant de crÃ©ation des archives auto-extractibles. Tutoriel ICI\r\n    JOURNAL : ouvre un nouveau journal (Pour Vista uniquement)\r\n    MAGNIFY : ouvre la loupe\r\n    MBLCTR : ouvre le centre de mobilitÃ© de Windows (Pour Vista uniquement)\r\n    MIGWIZ : ouvre l'outil de transfert de fichiers et de paramÃ¨tres Windows (Pour Vista uniquement)\r\n    MIGWIZ.EXE : ouvre l'outil de transfert de fichiers et de paramÃ¨tres Windows (pour XP uniquement)\r\n    MOVIEMK : ouvre Windows Movie Maker\r\n    MRT : lance l'utilitaire de suppression de logiciel malveillant. Tutoriel ICI\r\n    MSDT : ouvre l'outil de diagnostics et support Microsoft\r\n    MSINFO32 : ouvre les informations systÃ¨me\r\n    MSPAINT : ouvre Paint\r\n    MSRA : ouvre l'assistance Ã  distance Windows\r\n    MSTSC : ouvre l'outil de connexion du bureau a distance\r\n    NOTEPAD : ouvre le bloc-notes\r\n    OSK : ouvre le clavier visuel. Tutoriel ICI\r\n    PRINTBRMUI : ouvre l'assistant de migration d'imprimante (Vista uniquement)\r\n    RSTRUI : ouvre l'outil de restauration du systÃ¨me (Pour Vista uniquement)\r\n    SIDEBAR : ouvre le volet Windows (Pour Vista uniquement)\r\n    SIGVERIF : ouvre l'outil de vÃ©rification des signatures de fichiers\r\n    SNDVOL : ouvre le mÃ©langeur de volume\r\n    SNIPPINGTOOL : ouvre l'outil capture d'Ã©cran (Pour Vista uniquement). Tutoriel ICI\r\n    SOUNDRECORDER : ouvre le magnÃ©tophone\r\n    STIKYNOT : ouvre le pense-bÃªte (Pour Vista uniquement)\r\n    TABTIP : ouvre le panneau de saisie Tablet PC (Pour Vista uniquement)\r\n    TASKMGR : ouvre le gestionnaire des tÃ¢ches Windows\r\n    WAB : ouvre les contacts (Pour Vista uniquement)\r\n    WERCON : ouvre l'outil de rapports et de solutions aux problÃ¨mes (Pour Vista uniquement)\r\n    WINCAL : ouvre le calendrier Windows (Pour Vista uniquement)\r\n    WINCHAT : ouvre le logiciel Microsoft de chat en rÃ©seau (Pour Windows XP uniquement)\r\n    WINDOWSANYTIMEUPGRADE : permet la mise Ã  niveau de Windows Vista\r\n    WINVER : ouvre la fenÃªtre pour connaÃ®tre votre version Windows\r\n    WINWORD: ouvre Word (si il est installÃ©)\r\n    WMPLAYER : ouvre le lecteur Windows Media\r\n    WRITE ou bien Wordpad : ouvre Wordpad\r\n\r\n\r\nGestion des disques\r\n\r\n    CHKDSK : effectue une analyse de la partition prÃ©cisÃ©e dans les paramÃ¨tres de la commande (Pour plus d'informations, tapez CHKDSK /? dans l'invite de commande CMD)\r\n    CLEANMGR : ouvre l'outil de nettoyage de disque\r\n    DEFRAG: DÃ©fragmente le disque dur (pour savoir comment utiliser, c'est ici )\r\n    DFRG.MSC : ouvre l'outil de dÃ©fragmentation de disque\r\n    DISKMGMT.MSC : ouvre le gestionnaire de disques\r\n    DISKPART : ouvre l'outil de partitionnement (un peu lourd Ã  manipuler)\r\n\r\n\r\nGestion des rÃ©seaux et Internet\r\n\r\n    CONTROL NETCONNECTIONS ou bien NCPA.CPL : ouvre les connexions rÃ©seau\r\n    FIREWALL.CPL : ouvre le pare-feu Windows\r\n    INETCPL.CPL : ouvre les propriÃ©tÃ©s internet\r\n    IPCONFIG : affiche les configurations des adresses IP sur l'ordinateur (Pour plus d'informations, tapez IPCONFIG /? dans l'invite de commande CMD)\r\n    NETSETUP.CPL : ouvre l'assistant configuration rÃ©seau (Pour XP uniquement)\r\n    WF.MSC : ouvre les fonctions avancÃ©es du pare-feu Windows (Pour Vista uniquement). Tutoriel ICI\r\n    Ã€ VOIR Ã‰GALEMENT : Commandes IP relatives aux rÃ©seaux sous Windows\r\n\r\n\r\nAutres commandes\r\n\r\n    %HOMEDRIVE% : ouvre l'explorateur sur la partition ou le systÃ¨me d'exploitation est installÃ©\r\n    %HOMEPATH% : ouvre le dossier d'utilisateur connectÃ© actuellement C:\\Documents and settings\\[nom d'utilisateur]\r\n    %PROGRAMFILES% : ouvre le dossier d'installation d'autres programmes (Program Files)\r\n    %TEMP% ou bien %TMP% : ouvre le dossier temporaire\r\n    %USERPROFILE% : ouvre le dossier du profil de l'utilisateur connectÃ© actuellement\r\n    %WINDIR% ou bien %SYSTEMROOT% : ouvre le dossier d'installation de Windows\r\n    %WINDIR%\\system32\\rundll32.exe shell32.dll,Control_RunDLL hotplug.dll : affiche la fenÃªtre \"Supprimer le pÃ©riphÃ©rique en toute sÃ©curitÃ©\"\r\n    AC3FILTER.CPL : ouvre les propriÃ©tÃ©s du filtre AC3 (Si installÃ©)\r\n    FIREFOX : lance Mozilla FireFox (Si installÃ©)\r\n    JAVAWS : Visualise le cache du logiciel JAVA (Si installÃ©)\r\n    LOGOFF : ferme la session actuelle\r\n    NETPROJ : autorise ou pas la connexion Ã  un projecteur rÃ©seau (Pour Vista uniquement)\r\n    VÃ©rificateur des fichiers systÃ¨me (NÃ©cessite un CD de Windows si le cache n'est pas disponible): (Tutoriel ICI)\r\n        SFC /SCANNOW : scanne immÃ©diatement tous les fichiers systÃ¨me et rÃ©pare les fichiers endommagÃ©s\r\n        SFC /VERIFYONLY : scanne seulement les fichiers systÃ¨me\r\n        SFC /SCANFILE=\"nom et chemin de fichier\" : scanne le fichier prÃ©cisÃ©, et le rÃ©pare s'il est endommagÃ©\r\n        SFC /VERIFYFILE=\"nom et chemin de fichier\" : scanne seulement le fichier prÃ©cisÃ©\r\n        SFC /SCANONCE : scanne les fichiers systÃ¨me au prochain redÃ©marrage\r\n        SFC /REVERT : remet la configuration initiale (Pour plus d'informations, tapez SFC /? dans l'invite de commande CMD. \r\n    SHUTDOWN : Ã©teint Windows\r\n    SHUTDOWN -A : interrompe l'arrÃªt de Windows\r\n    VSP1CLN : supprime le cache d'installation du service pack 1 de Vista (Tutoriel ICI)",
        "3": "WIN+R",
        "id": "14012019",
        "date": "2019-01-14",
        "texte": "Commandes\r\nCertaines commandes sont dangereuses (l'exemple de SYSKEY) et peuvent causer des problÃ¨mes pouvant conduire au formatage. D'autres commandes ne sont pas exÃ©cutables sous des versions antÃ©rieures de Windows.\r\nPanneau de configuration\r\n\r\n    APPWIZ.CPL : ouvre l'outil Ajouter/Supprimer un programme\r\n    AZMAN.MSC : ouvre le gestionnaire d'autorisations (Pour Vista uniquement)\r\n    CERTMGR.MSC : ouvre les certificats pour l'utilisateur actuel\r\n    CLICONFG : ouvre la configuration des clients SQL\r\n    COMEXP.MSC ou bien DCOMCNFG : ouvre l'outil services et composants (Pour Vista uniquement)\r\n    COMPMGMT.MSC : ouvre l'outil de gestion de l'ordinateur\r\n    COMPUTERDEFAULTS : ouvrir l'outil des programmes par dÃ©faut (Pour Vista uniquement)\r\n    CONTROL /NAME MICROSOFT.BACKUPANDRESTORECENTER : ouvre le centre de sauvegarde et de restauration (Pour Vista uniquement). Tutoriel ICI\r\n    CONTROL ADMINTOOLS : ouvre les outils d'administrations\r\n    CONTROL COLOR : ouvre les paramÃ¨tres de l'apparence\r\n    CONTROL FOLDERS : ouvre les options de dossiers\r\n    CONTROL FONTS : ouvre le gestionnaire de polices\r\n    CONTROL INTERNATIONAL ou bien INTL.CPL : ouvre les options rÃ©gionales et linguistiques\r\n    CONTROL KEYBOARD : ouvre les propriÃ©tÃ©s du clavier\r\n    CONTROL MOUSE ou bien MAIN.CPL : ouvre les propriÃ©tÃ©s de la souris\r\n    CONTROL PRINTERS : ouvre les imprimantes et les fax disponibles\r\n    CONTROL USERPASSWORDS : ouvre l'Ã©diteur des comptes utilisateurs\r\n    CONTROL USERPASSWORDS2 ou bien NETPLWIZ : contrÃ´le les utilisateurs et leurs accÃ¨s\r\n    CONTROL : ouvre le panneau de configuration\r\n    CREDWIZ : ouvre l'outil de sauvegarde et restauration des mots de passe des utilisateurs (Pour Vista uniquement)\r\n    DESK.CPL : ouvre les paramÃ¨tres d'affichage\r\n    DEVMGMT.MSC : ouvre les gestionnaire de pÃ©riphÃ©riques. Tutoriel ICI\r\n    DRWTSN32 : ouvre Dr. Watson (Pour XP uniquement)\r\n    DXDIAG : ouvre l'outil de diagnostic DirectX\r\n    EVENTVWR ou bien EVENTVWR.MSC : ouvre l'observateur d'Ã©vÃ¨nements\r\n    FSMGMT.MSC : ouvre les dossiers partagÃ©s\r\n    GPEDIT.MSC : ouvre l'Ã©diteur des stratÃ©gies de groupe (Pour les Ã©ditions professionnelles et plus de Windows)\r\n    HDWWIZ.CPL : ouvre l'assistant ajout de matÃ©riels\r\n    INFOCARDCPL.CPL : ouvre l'assistant compatibilitÃ© des programmes\r\n    IRPROPS.CPL : ouvre le gestionnaire d'infrarouge\r\n    ISCSICPL : ouvre l'outil de configuration de l'initiateur ISCI Microsoft (Pour Vista uniquement)\r\n    JOY.CPL : ouvre l'outil de contrÃ´leur de jeu\r\n    LPKSETUP : ouvre l'assistant d'installation et dÃ©sinstallation des langues d'affichage (Pour Vista uniquement)\r\n    LUSRMGR.MSC : ouvre l'Ã©diteur des utilisateurs et groupes locaux\r\n    MDSCHED : ouvre l'outil de diagnostics de la mÃ©moire Windows (Pour Vista uniquement)\r\n    MMC : ouvre une nouvelle console vide\r\n    MMSYS.CPL : ouvre les paramÃ¨tres de sons\r\n    MOBSYNC : ouvre le centre de synchronisation\r\n    MSCONFIG : ouvre l'outil de configuration du systÃ¨me\r\n    NAPCLCFG.MSC : ouvre l'outil de configuration du client NAP (Pour Vista uniquement)\r\n    NTMSMGR.MSC : ouvre le gestionnaire des supports de stockage amovibles\r\n    NTMSOPRQ.MSC : ouvre les demandes de l'opÃ©rateur de stockage amovible\r\n    ODBCAD32 : ouvre l'administrateur de sources de donnÃ©es ODBC\r\n    OPTIONALFEATURES : ouvre l'outil Ajouter/Supprimer des composants Windows (Pour Vista uniquement)\r\n    PERFMON ou bien PERFMON.MSC : ouvre le moniteur de fiabilitÃ© et de performances Windows.\r\n    POWERCFG.CPL : ouvre le gestionnaire des modes d'alimentation (Pour Vista uniquement)\r\n    REGEDIT ou bien REGEDT32 (Pour Vista uniquement) : ouvre l'Ã©diteur de registre\r\n    REKEYWIZ : ouvre le gestionnaire des certificats de chiffrement de fichiers (Pour Vista uniquement)\r\n    RSOP.MSC : ouvre le jeu de stratÃ©gie rÃ©sultant\r\n    SECPOL.MSC : ouvre les paramÃ¨tres de sÃ©curitÃ©s locales\r\n    SERVICES.MSC : ouvre le gestionnaire de services\r\n    SYSDM.CPL : ouvre les propriÃ©tÃ©s systÃ¨me\r\n    SYSEDIT : ouvre l'Ã©diteur de configuration systÃ¨me (Attention, Ã  manipuler avec prudence)\r\n    SYSKEY : ouvre l'utilitaire de protection de la base de donnÃ©es des comptes Windows (Attention, Ã  manipuler avec extrÃªme prudence !)\r\n    SYSPREP: ouvre le dossier contenant l'outil de prÃ©paration du systÃ¨me (Pour Vista uniquement)\r\n    TABLETPC.CPL : ouvre les paramÃ¨tres pour Tablet pc (Pour Vista uniquement)\r\n    TASKSCHD.MSC ou bien CONTROL SCHEDTASKS : ouvre le planificateur de tÃ¢ches (Pour Vista uniquement)\r\n    TELEPHON.CPL : ouvre l'outil de connexion tÃ©lÃ©phonique\r\n    TIMEDATE.CPL : ouvre les paramÃ¨tres de l'heure et de la date\r\n    TPM.MSC : ouvre l'outil gestion de module de plateforme sÃ©curisÃ©e sur l'ordinateur local (Pour Vista uniquement)\r\n    UTILMAN : ouvre les options d'ergonomie (Pour Vista uniquement)\r\n    VERIFIER : ouvre le gestionnaire de vÃ©rification des pilotes\r\n    WMIMGMT.MSC : ouvre Windows Management Infrastructure\r\n    WSCUI.CPL : ouvre le centre de sÃ©curitÃ© Windows\r\n    WUAUCPL.CPL : ouvre le service de mise Ã  jour Windows (Pour XP uniquement)\r\n\r\n\r\nProgrammes et outils Windows\r\n\r\n    %WINDIR%\\SYSTEM32\\RESTORE\\RSTRUI.EXE : ouvre l'outil de restauration de systÃ¨me (Pour XP uniquement). Tutoriel ICI\r\n    CALC : ouvre la calculatrice\r\n    CHARMAP : ouvre la table des caractÃ¨res\r\n    CLIPBRD : ouvre le presse papier (Pour XP uniquement, pour l'ajouter Ã  Vista voir ICI)\r\n    CMD : ouvre l'invite de commandes\r\n    DIALER : ouvre le numÃ©rateur tÃ©lÃ©phonique de Windows\r\n    DVDPLAY : ouvre votre lecteur DVD\r\n    EUDCEDIT : ouvre l'Ã©diteur de caractÃ¨res privÃ©s\r\n    EXPLORER : ouvre l'explorateur Windows\r\n    FSQUIRT : Assistant transfert Bluetooth\r\n    IEXPLORE : ouvre Internet Explorer\r\n    IEXPRESS : ouvre l'assistant de crÃ©ation des archives auto-extractibles. Tutoriel ICI\r\n    JOURNAL : ouvre un nouveau journal (Pour Vista uniquement)\r\n    MAGNIFY : ouvre la loupe\r\n    MBLCTR : ouvre le centre de mobilitÃ© de Windows (Pour Vista uniquement)\r\n    MIGWIZ : ouvre l'outil de transfert de fichiers et de paramÃ¨tres Windows (Pour Vista uniquement)\r\n    MIGWIZ.EXE : ouvre l'outil de transfert de fichiers et de paramÃ¨tres Windows (pour XP uniquement)\r\n    MOVIEMK : ouvre Windows Movie Maker\r\n    MRT : lance l'utilitaire de suppression de logiciel malveillant. Tutoriel ICI\r\n    MSDT : ouvre l'outil de diagnostics et support Microsoft\r\n    MSINFO32 : ouvre les informations systÃ¨me\r\n    MSPAINT : ouvre Paint\r\n    MSRA : ouvre l'assistance Ã  distance Windows\r\n    MSTSC : ouvre l'outil de connexion du bureau a distance\r\n    NOTEPAD : ouvre le bloc-notes\r\n    OSK : ouvre le clavier visuel. Tutoriel ICI\r\n    PRINTBRMUI : ouvre l'assistant de migration d'imprimante (Vista uniquement)\r\n    RSTRUI : ouvre l'outil de restauration du systÃ¨me (Pour Vista uniquement)\r\n    SIDEBAR : ouvre le volet Windows (Pour Vista uniquement)\r\n    SIGVERIF : ouvre l'outil de vÃ©rification des signatures de fichiers\r\n    SNDVOL : ouvre le mÃ©langeur de volume\r\n    SNIPPINGTOOL : ouvre l'outil capture d'Ã©cran (Pour Vista uniquement). Tutoriel ICI\r\n    SOUNDRECORDER : ouvre le magnÃ©tophone\r\n    STIKYNOT : ouvre le pense-bÃªte (Pour Vista uniquement)\r\n    TABTIP : ouvre le panneau de saisie Tablet PC (Pour Vista uniquement)\r\n    TASKMGR : ouvre le gestionnaire des tÃ¢ches Windows\r\n    WAB : ouvre les contacts (Pour Vista uniquement)\r\n    WERCON : ouvre l'outil de rapports et de solutions aux problÃ¨mes (Pour Vista uniquement)\r\n    WINCAL : ouvre le calendrier Windows (Pour Vista uniquement)\r\n    WINCHAT : ouvre le logiciel Microsoft de chat en rÃ©seau (Pour Windows XP uniquement)\r\n    WINDOWSANYTIMEUPGRADE : permet la mise Ã  niveau de Windows Vista\r\n    WINVER : ouvre la fenÃªtre pour connaÃ®tre votre version Windows\r\n    WINWORD: ouvre Word (si il est installÃ©)\r\n    WMPLAYER : ouvre le lecteur Windows Media\r\n    WRITE ou bien Wordpad : ouvre Wordpad\r\n\r\n\r\nGestion des disques\r\n\r\n    CHKDSK : effectue une analyse de la partition prÃ©cisÃ©e dans les paramÃ¨tres de la commande (Pour plus d'informations, tapez CHKDSK /? dans l'invite de commande CMD)\r\n    CLEANMGR : ouvre l'outil de nettoyage de disque\r\n    DEFRAG: DÃ©fragmente le disque dur (pour savoir comment utiliser, c'est ici )\r\n    DFRG.MSC : ouvre l'outil de dÃ©fragmentation de disque\r\n    DISKMGMT.MSC : ouvre le gestionnaire de disques\r\n    DISKPART : ouvre l'outil de partitionnement (un peu lourd Ã  manipuler)\r\n\r\n\r\nGestion des rÃ©seaux et Internet\r\n\r\n    CONTROL NETCONNECTIONS ou bien NCPA.CPL : ouvre les connexions rÃ©seau\r\n    FIREWALL.CPL : ouvre le pare-feu Windows\r\n    INETCPL.CPL : ouvre les propriÃ©tÃ©s internet\r\n    IPCONFIG : affiche les configurations des adresses IP sur l'ordinateur (Pour plus d'informations, tapez IPCONFIG /? dans l'invite de commande CMD)\r\n    NETSETUP.CPL : ouvre l'assistant configuration rÃ©seau (Pour XP uniquement)\r\n    WF.MSC : ouvre les fonctions avancÃ©es du pare-feu Windows (Pour Vista uniquement). Tutoriel ICI\r\n    Ã€ VOIR Ã‰GALEMENT : Commandes IP relatives aux rÃ©seaux sous Windows\r\n\r\n\r\nAutres commandes\r\n\r\n    %HOMEDRIVE% : ouvre l'explorateur sur la partition ou le systÃ¨me d'exploitation est installÃ©\r\n    %HOMEPATH% : ouvre le dossier d'utilisateur connectÃ© actuellement C:\\Documents and settings\\[nom d'utilisateur]\r\n    %PROGRAMFILES% : ouvre le dossier d'installation d'autres programmes (Program Files)\r\n    %TEMP% ou bien %TMP% : ouvre le dossier temporaire\r\n    %USERPROFILE% : ouvre le dossier du profil de l'utilisateur connectÃ© actuellement\r\n    %WINDIR% ou bien %SYSTEMROOT% : ouvre le dossier d'installation de Windows\r\n    %WINDIR%\\system32\\rundll32.exe shell32.dll,Control_RunDLL hotplug.dll : affiche la fenÃªtre \"Supprimer le pÃ©riphÃ©rique en toute sÃ©curitÃ©\"\r\n    AC3FILTER.CPL : ouvre les propriÃ©tÃ©s du filtre AC3 (Si installÃ©)\r\n    FIREFOX : lance Mozilla FireFox (Si installÃ©)\r\n    JAVAWS : Visualise le cache du logiciel JAVA (Si installÃ©)\r\n    LOGOFF : ferme la session actuelle\r\n    NETPROJ : autorise ou pas la connexion Ã  un projecteur rÃ©seau (Pour Vista uniquement)\r\n    VÃ©rificateur des fichiers systÃ¨me (NÃ©cessite un CD de Windows si le cache n'est pas disponible): (Tutoriel ICI)\r\n        SFC /SCANNOW : scanne immÃ©diatement tous les fichiers systÃ¨me et rÃ©pare les fichiers endommagÃ©s\r\n        SFC /VERIFYONLY : scanne seulement les fichiers systÃ¨me\r\n        SFC /SCANFILE=\"nom et chemin de fichier\" : scanne le fichier prÃ©cisÃ©, et le rÃ©pare s'il est endommagÃ©\r\n        SFC /VERIFYFILE=\"nom et chemin de fichier\" : scanne seulement le fichier prÃ©cisÃ©\r\n        SFC /SCANONCE : scanne les fichiers systÃ¨me au prochain redÃ©marrage\r\n        SFC /REVERT : remet la configuration initiale (Pour plus d'informations, tapez SFC /? dans l'invite de commande CMD. \r\n    SHUTDOWN : Ã©teint Windows\r\n    SHUTDOWN -A : interrompe l'arrÃªt de Windows\r\n    VSP1CLN : supprime le cache d'installation du service pack 1 de Vista (Tutoriel ICI)",
        "motscles": "WIN+R"
      },
      {
        "0": "6012020",
        "1": "2020-01-06",
        "2": "Clé google Geoffrey.cottave@gmail.com\r\nAIzaSyBDCNplLyamB2MeE-vZyisUSyOCPsCUCfs",
        "3": "clé google",
        "id": "6012020",
        "date": "2020-01-06",
        "texte": "Clé google Geoffrey.cottave@gmail.com\r\nAIzaSyBDCNplLyamB2MeE-vZyisUSyOCPsCUCfs",
        "motscles": "clé google"
      }
    ]
  }
}
